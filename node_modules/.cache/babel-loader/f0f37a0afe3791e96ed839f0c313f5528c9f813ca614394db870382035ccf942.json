{"ast":null,"code":"const INITIAL_STATE = {\n  player1: {\n    pseudo: \"\",\n    playerClass: {\n      className: \"\",\n      hp: null,\n      atk: null,\n      int: null,\n      spd: null,\n      agi: null,\n      armor: null,\n      color: \"\",\n      icon: \"\",\n      potions: null,\n      onDef: false,\n      ultimUp: true\n    }\n  },\n  player2: {\n    pseudo: \"\",\n    playerClass: {\n      className: \"\",\n      hp: null,\n      atk: null,\n      int: null,\n      spd: null,\n      agi: null,\n      armor: null,\n      color: \"\",\n      icon: \"\",\n      potions: null,\n      onDef: false,\n      ultimUp: true\n    }\n  }\n};\nconst playersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"PLAYER_PSEUDO\":\n      {\n        return {\n          ...state,\n          [action.payload.player]: {\n            ...state[action.payload.player],\n            pseudo: action.payload.pseudo\n          }\n        };\n      }\n    case \"UPDATE_PLAYER_CLASS\":\n      {\n        return {\n          ...state,\n          [action.payload.player]: {\n            ...state[action.payload.player],\n            playerClass: action.payload.playerClass\n          }\n        };\n      }\n    case \"PLAYER_TAKE_DMG\":\n      {\n        const {\n          player,\n          hitValue\n        } = action.payload;\n        const playerData = state[player];\n        if (playerData && playerData.playerClass && playerData.playerClass.hp) {\n          const newHP = playerData.playerClass.hp - hitValue;\n          return {\n            ...state,\n            [player]: {\n              ...state[player],\n              playerClass: {\n                ...state[player].playerClass,\n                hp: newHP\n              }\n            }\n          };\n        }\n      }\n    case \"PLAYER_DEFENSE_UP\":\n      {\n        return {\n          ...state,\n          [action.payload.player]: {\n            ...state[action.payload.player],\n            playerClass: {\n              ...state[action.payload.player].playerClass,\n              onDef: true,\n              agi: state[action.payload.player].playerClass.agi + 3\n            }\n          }\n        };\n      }\n    case \"PLAYER_DEFENSE_DOWN\":\n      {\n        return {\n          ...state,\n          [action.payload.player]: {\n            ...state[action.payload.player],\n            playerClass: {\n              ...state[action.payload.player].playerClass,\n              onDef: false,\n              agi: state[action.payload.player].playerClass.agi - 3\n            }\n          }\n        };\n      }\n    case \"PLAYER_POTION_HEAL\":\n      {\n        const {\n          player\n        } = action.payload;\n        const playerData = state[player];\n        const minHealPercentage = 10;\n        const maxHealPercentage = 20;\n        const baseHP = 300; // MAXHP\n        if (playerData && playerData.playerClass && playerData.playerClass.hp && playerData.playerClass.potions > 0) {\n          const minHeal = minHealPercentage / 100 * baseHP;\n          const maxHeal = maxHealPercentage / 100 * baseHP;\n          const randomHeal = Math.floor(Math.random() * (maxHeal - minHeal + 1) + minHeal);\n          const newHP = Math.min(baseHP, playerData.playerClass.hp + randomHeal);\n          const newPotions = playerData.playerClass.potions > 0 ? playerData.playerClass.potions - 1 : playerData.playerClass.potions;\n          return {\n            ...state,\n            [player]: {\n              ...state[player],\n              playerClass: {\n                ...state[player].playerClass,\n                hp: newHP,\n                potions: newPotions\n              }\n            }\n          };\n        } else {\n          return state;\n        }\n      }\n    case \"RESET_PLAYERS_REDUCER\":\n      {\n        return INITIAL_STATE;\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport default playersReducer;","map":{"version":3,"names":["INITIAL_STATE","player1","pseudo","playerClass","className","hp","atk","int","spd","agi","armor","color","icon","potions","onDef","ultimUp","player2","playersReducer","state","action","type","payload","player","hitValue","playerData","newHP","minHealPercentage","maxHealPercentage","baseHP","minHeal","maxHeal","randomHeal","Math","floor","random","min","newPotions"],"sources":["/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/redux/reducers/players.js"],"sourcesContent":["const INITIAL_STATE = {\n  player1: {\n    pseudo: \"\",\n    playerClass: {\n      className: \"\",\n      hp: null,\n      atk: null,\n      int: null,\n      spd: null,\n      agi: null,\n      armor: null,\n      color: \"\",\n      icon: \"\",\n      potions: null,\n      onDef: false,\n      ultimUp: true,\n    },\n  },\n  player2: {\n    pseudo: \"\",\n    playerClass: {\n      className: \"\",\n      hp: null,\n      atk: null,\n      int: null,\n      spd: null,\n      agi: null,\n      armor: null,\n      color: \"\",\n      icon: \"\",\n      potions: null,\n      onDef: false,\n      ultimUp: true,\n    },\n  },\n};\n\nconst playersReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"PLAYER_PSEUDO\": {\n      return {\n        ...state,\n        [action.payload.player]: {\n          ...state[action.payload.player],\n          pseudo: action.payload.pseudo,\n        },\n      };\n    }\n\n    case \"UPDATE_PLAYER_CLASS\": {\n      return {\n        ...state,\n        [action.payload.player]: {\n          ...state[action.payload.player],\n          playerClass: action.payload.playerClass,\n        },\n      };\n    }\n\n    case \"PLAYER_TAKE_DMG\": {\n      const { player, hitValue } = action.payload;\n      const playerData = state[player];\n\n      if (playerData && playerData.playerClass && playerData.playerClass.hp) {\n        const newHP = playerData.playerClass.hp - hitValue;\n\n        return {\n          ...state,\n          [player]: {\n            ...state[player],\n            playerClass: {\n              ...state[player].playerClass,\n              hp: newHP,\n            },\n          },\n        };\n      }\n    }\n\n    case \"PLAYER_DEFENSE_UP\": {\n      return {\n        ...state,\n        [action.payload.player]: {\n          ...state[action.payload.player],\n          playerClass: {\n            ...state[action.payload.player].playerClass,\n            onDef: true,\n            agi: state[action.payload.player].playerClass.agi + 3,\n          },\n        },\n      };\n    }\n    case \"PLAYER_DEFENSE_DOWN\": {\n      return {\n        ...state,\n        [action.payload.player]: {\n          ...state[action.payload.player],\n          playerClass: {\n            ...state[action.payload.player].playerClass,\n            onDef: false,\n            agi: state[action.payload.player].playerClass.agi - 3,\n          },\n        },\n      };\n    }\n\n    case \"PLAYER_POTION_HEAL\": {\n      const { player } = action.payload;\n      const playerData = state[player];\n      const minHealPercentage = 10;\n      const maxHealPercentage = 20;\n      const baseHP = 300; // MAXHP\n      if (\n        playerData &&\n        playerData.playerClass &&\n        playerData.playerClass.hp &&\n        playerData.playerClass.potions > 0\n      ) {\n        const minHeal = (minHealPercentage / 100) * baseHP;\n        const maxHeal = (maxHealPercentage / 100) * baseHP;\n        const randomHeal = Math.floor(\n          Math.random() * (maxHeal - minHeal + 1) + minHeal\n        );\n        const newHP = Math.min(baseHP, playerData.playerClass.hp + randomHeal);\n\n        const newPotions =\n          playerData.playerClass.potions > 0\n            ? playerData.playerClass.potions - 1\n            : playerData.playerClass.potions;\n\n        return {\n          ...state,\n          [player]: {\n            ...state[player],\n            playerClass: {\n              ...state[player].playerClass,\n              hp: newHP,\n              potions: newPotions,\n            },\n          },\n        };\n      } else {\n        return state;\n      }\n    }\n\n    case \"RESET_PLAYERS_REDUCER\": {\n      return INITIAL_STATE;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default playersReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}