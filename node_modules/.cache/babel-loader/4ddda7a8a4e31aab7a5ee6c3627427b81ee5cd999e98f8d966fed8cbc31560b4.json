{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/components/fight-scene/FightScene.jsx\",\n  _s = $RefreshSig$();\nimport mc from \"./fight-scene.module.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { Stage, Layer, Rect, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FightScene = () => {\n  _s();\n  const dispatch = useDispatch();\n  const canvasGameRef = useRef(null);\n  const [stageWidth, setStageWidth] = useState(100);\n  const [stageHeight, setStageHeight] = useState(100); // Initialize with a default value\n\n  const onEndFightButtonClick = () => {\n    dispatch({\n      type: `ANIMATION_FIGHT_START_CANCEL`\n    });\n    setTimeout(() => {\n      dispatch({\n        type: `FIGHT_END`\n      });\n    }, 300);\n  };\n  const updateStageDimensions = () => {\n    if (canvasGameRef.current) {\n      const width = canvasGameRef.current.clientWidth;\n      const height = canvasGameRef.current.clientHeight;\n      setStageWidth(width);\n      setStageHeight(height);\n    }\n  };\n  useEffect(() => {\n    updateStageDimensions();\n    window.addEventListener(\"resize\", updateStageDimensions);\n    return () => {\n      window.removeEventListener(\"resize\", updateStageDimensions);\n    };\n  }, []);\n\n  //   const ColoredRect = () => {\n  //     const [color, setColor] = useState(\"green\");\n  //     const handleClick = () => {\n  //       setColor(Konva.Util.getRandomColor());\n  //     };\n  //     const rectX = (stageWidth - 100) / 2;\n  //     return (\n  //       <Rect\n  //         x={rectX}\n  //         y={0}\n  //         width={100}\n  //         height={100}\n  //         fill={color}\n  //         shadowBlur={5}\n  //         onClick={handleClick}\n  //       />\n  //     );\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onEndFightButtonClick,\n    className: mc.container,\n    children: \"reset\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(FightScene, \"xPVuVle5rIfqiqiVqqyEENbWvfA=\", false, function () {\n  return [useDispatch];\n});\n_c = FightScene;\nexport default FightScene;\nvar _c;\n$RefreshReg$(_c, \"FightScene\");","map":{"version":3,"names":["mc","useDispatch","Stage","Layer","Rect","Text","Konva","useState","useEffect","useRef","FightScene","dispatch","canvasGameRef","stageWidth","setStageWidth","stageHeight","setStageHeight","onEndFightButtonClick","type","setTimeout","updateStageDimensions","current","width","clientWidth","height","clientHeight","window","addEventListener","removeEventListener","container"],"sources":["/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/components/fight-scene/FightScene.jsx"],"sourcesContent":["import mc from \"./fight-scene.module.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { Stage, Layer, Rect, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport { useState, useEffect, useRef } from \"react\";\n\nconst FightScene = () => {\n  const dispatch = useDispatch();\n  const canvasGameRef = useRef(null);\n  const [stageWidth, setStageWidth] = useState(100);\n  const [stageHeight, setStageHeight] = useState(100); // Initialize with a default value\n\n  const onEndFightButtonClick = () => {\n    dispatch({ type: `ANIMATION_FIGHT_START_CANCEL` });\n    setTimeout(() => {\n      dispatch({ type: `FIGHT_END` });\n    }, 300);\n  };\n\n  const updateStageDimensions = () => {\n    if (canvasGameRef.current) {\n      const width = canvasGameRef.current.clientWidth;\n      const height = canvasGameRef.current.clientHeight;\n      setStageWidth(width);\n      setStageHeight(height);\n    }\n  };\n\n  useEffect(() => {\n    updateStageDimensions();\n    window.addEventListener(\"resize\", updateStageDimensions);\n    return () => {\n      window.removeEventListener(\"resize\", updateStageDimensions);\n    };\n  }, []);\n\n  //   const ColoredRect = () => {\n  //     const [color, setColor] = useState(\"green\");\n  //     const handleClick = () => {\n  //       setColor(Konva.Util.getRandomColor());\n  //     };\n  //     const rectX = (stageWidth - 100) / 2;\n  //     return (\n  //       <Rect\n  //         x={rectX}\n  //         y={0}\n  //         width={100}\n  //         height={100}\n  //         fill={color}\n  //         shadowBlur={5}\n  //         onClick={handleClick}\n  //       />\n  //     );\n  //   };\n\n  return (\n    <div onClick={onEndFightButtonClick} className={mc.container}>\n      reset\n    </div>\n  );\n};\n\nexport default FightScene;\n"],"mappings":";;AAAA,OAAOA,EAAE,MAAM,2BAA2B;AAC1C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,QAAQ,aAAa;AACtD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC;AAEpD,MAAMC,UAAU,GAAG,MAAM;EAAA;EACvB,MAAMC,QAAQ,GAAGV,WAAW,EAAE;EAC9B,MAAMW,aAAa,GAAGH,MAAM,CAAC,IAAI,CAAC;EAClC,MAAM,CAACI,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,GAAG,CAAC;EACjD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;EAErD,MAAMU,qBAAqB,GAAG,MAAM;IAClCN,QAAQ,CAAC;MAAEO,IAAI,EAAG;IAA8B,CAAC,CAAC;IAClDC,UAAU,CAAC,MAAM;MACfR,QAAQ,CAAC;QAAEO,IAAI,EAAG;MAAW,CAAC,CAAC;IACjC,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;EAED,MAAME,qBAAqB,GAAG,MAAM;IAClC,IAAIR,aAAa,CAACS,OAAO,EAAE;MACzB,MAAMC,KAAK,GAAGV,aAAa,CAACS,OAAO,CAACE,WAAW;MAC/C,MAAMC,MAAM,GAAGZ,aAAa,CAACS,OAAO,CAACI,YAAY;MACjDX,aAAa,CAACQ,KAAK,CAAC;MACpBN,cAAc,CAACQ,MAAM,CAAC;IACxB;EACF,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACdY,qBAAqB,EAAE;IACvBM,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEP,qBAAqB,CAAC;IACxD,OAAO,MAAM;MACXM,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAER,qBAAqB,CAAC;IAC7D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAK,OAAO,EAAEH,qBAAsB;IAAC,SAAS,EAAEjB,EAAE,CAAC6B,SAAU;IAAA,UAAC;EAE9D;IAAA;IAAA;IAAA;EAAA,QAAM;AAEV,CAAC;AAAC,GAtDInB,UAAU;EAAA,QACGT,WAAW;AAAA;AAAA,KADxBS,UAAU;AAwDhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}