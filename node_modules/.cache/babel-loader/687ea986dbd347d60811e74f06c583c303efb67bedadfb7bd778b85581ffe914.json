{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Enhance = void 0;\nconst Factory_1 = require(\"../Factory\");\nconst Node_1 = require(\"../Node\");\nconst Validators_1 = require(\"../Validators\");\nfunction remap(fromValue, fromMin, fromMax, toMin, toMax) {\n  var fromRange = fromMax - fromMin,\n    toRange = toMax - toMin,\n    toValue;\n  if (fromRange === 0) {\n    return toMin + toRange / 2;\n  }\n  if (toRange === 0) {\n    return toMin;\n  }\n  toValue = (fromValue - fromMin) / fromRange;\n  toValue = toRange * toValue + toMin;\n  return toValue;\n}\nconst Enhance = function (imageData) {\n  var data = imageData.data,\n    nSubPixels = data.length,\n    rMin = data[0],\n    rMax = rMin,\n    r,\n    gMin = data[1],\n    gMax = gMin,\n    g,\n    bMin = data[2],\n    bMax = bMin,\n    b,\n    i;\n  var enhanceAmount = this.enhance();\n  if (enhanceAmount === 0) {\n    return;\n  }\n  for (i = 0; i < nSubPixels; i += 4) {\n    r = data[i + 0];\n    if (r < rMin) {\n      rMin = r;\n    } else if (r > rMax) {\n      rMax = r;\n    }\n    g = data[i + 1];\n    if (g < gMin) {\n      gMin = g;\n    } else if (g > gMax) {\n      gMax = g;\n    }\n    b = data[i + 2];\n    if (b < bMin) {\n      bMin = b;\n    } else if (b > bMax) {\n      bMax = b;\n    }\n  }\n  if (rMax === rMin) {\n    rMax = 255;\n    rMin = 0;\n  }\n  if (gMax === gMin) {\n    gMax = 255;\n    gMin = 0;\n  }\n  if (bMax === bMin) {\n    bMax = 255;\n    bMin = 0;\n  }\n  var rMid, rGoalMax, rGoalMin, gMid, gGoalMax, gGoalMin, bMid, bGoalMax, bGoalMin;\n  if (enhanceAmount > 0) {\n    rGoalMax = rMax + enhanceAmount * (255 - rMax);\n    rGoalMin = rMin - enhanceAmount * (rMin - 0);\n    gGoalMax = gMax + enhanceAmount * (255 - gMax);\n    gGoalMin = gMin - enhanceAmount * (gMin - 0);\n    bGoalMax = bMax + enhanceAmount * (255 - bMax);\n    bGoalMin = bMin - enhanceAmount * (bMin - 0);\n  } else {\n    rMid = (rMax + rMin) * 0.5;\n    rGoalMax = rMax + enhanceAmount * (rMax - rMid);\n    rGoalMin = rMin + enhanceAmount * (rMin - rMid);\n    gMid = (gMax + gMin) * 0.5;\n    gGoalMax = gMax + enhanceAmount * (gMax - gMid);\n    gGoalMin = gMin + enhanceAmount * (gMin - gMid);\n    bMid = (bMax + bMin) * 0.5;\n    bGoalMax = bMax + enhanceAmount * (bMax - bMid);\n    bGoalMin = bMin + enhanceAmount * (bMin - bMid);\n  }\n  for (i = 0; i < nSubPixels; i += 4) {\n    data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);\n    data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);\n    data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);\n  }\n};\nexports.Enhance = Enhance;\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'enhance', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);","map":{"version":3,"names":["Object","defineProperty","exports","value","Enhance","Factory_1","require","Node_1","Validators_1","remap","fromValue","fromMin","fromMax","toMin","toMax","fromRange","toRange","toValue","imageData","data","nSubPixels","length","rMin","rMax","r","gMin","gMax","g","bMin","bMax","b","i","enhanceAmount","enhance","rMid","rGoalMax","rGoalMin","gMid","gGoalMax","gGoalMin","bMid","bGoalMax","bGoalMin","Factory","addGetterSetter","Node","getNumberValidator","afterSetFilter"],"sources":["/Users/nicolasgrenier/Documents/Code/fighting_RPG/node_modules/konva/lib/filters/Enhance.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Enhance = void 0;\nconst Factory_1 = require(\"../Factory\");\nconst Node_1 = require(\"../Node\");\nconst Validators_1 = require(\"../Validators\");\nfunction remap(fromValue, fromMin, fromMax, toMin, toMax) {\n    var fromRange = fromMax - fromMin, toRange = toMax - toMin, toValue;\n    if (fromRange === 0) {\n        return toMin + toRange / 2;\n    }\n    if (toRange === 0) {\n        return toMin;\n    }\n    toValue = (fromValue - fromMin) / fromRange;\n    toValue = toRange * toValue + toMin;\n    return toValue;\n}\nconst Enhance = function (imageData) {\n    var data = imageData.data, nSubPixels = data.length, rMin = data[0], rMax = rMin, r, gMin = data[1], gMax = gMin, g, bMin = data[2], bMax = bMin, b, i;\n    var enhanceAmount = this.enhance();\n    if (enhanceAmount === 0) {\n        return;\n    }\n    for (i = 0; i < nSubPixels; i += 4) {\n        r = data[i + 0];\n        if (r < rMin) {\n            rMin = r;\n        }\n        else if (r > rMax) {\n            rMax = r;\n        }\n        g = data[i + 1];\n        if (g < gMin) {\n            gMin = g;\n        }\n        else if (g > gMax) {\n            gMax = g;\n        }\n        b = data[i + 2];\n        if (b < bMin) {\n            bMin = b;\n        }\n        else if (b > bMax) {\n            bMax = b;\n        }\n    }\n    if (rMax === rMin) {\n        rMax = 255;\n        rMin = 0;\n    }\n    if (gMax === gMin) {\n        gMax = 255;\n        gMin = 0;\n    }\n    if (bMax === bMin) {\n        bMax = 255;\n        bMin = 0;\n    }\n    var rMid, rGoalMax, rGoalMin, gMid, gGoalMax, gGoalMin, bMid, bGoalMax, bGoalMin;\n    if (enhanceAmount > 0) {\n        rGoalMax = rMax + enhanceAmount * (255 - rMax);\n        rGoalMin = rMin - enhanceAmount * (rMin - 0);\n        gGoalMax = gMax + enhanceAmount * (255 - gMax);\n        gGoalMin = gMin - enhanceAmount * (gMin - 0);\n        bGoalMax = bMax + enhanceAmount * (255 - bMax);\n        bGoalMin = bMin - enhanceAmount * (bMin - 0);\n    }\n    else {\n        rMid = (rMax + rMin) * 0.5;\n        rGoalMax = rMax + enhanceAmount * (rMax - rMid);\n        rGoalMin = rMin + enhanceAmount * (rMin - rMid);\n        gMid = (gMax + gMin) * 0.5;\n        gGoalMax = gMax + enhanceAmount * (gMax - gMid);\n        gGoalMin = gMin + enhanceAmount * (gMin - gMid);\n        bMid = (bMax + bMin) * 0.5;\n        bGoalMax = bMax + enhanceAmount * (bMax - bMid);\n        bGoalMin = bMin + enhanceAmount * (bMin - bMid);\n    }\n    for (i = 0; i < nSubPixels; i += 4) {\n        data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);\n        data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);\n        data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);\n    }\n};\nexports.Enhance = Enhance;\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'enhance', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}