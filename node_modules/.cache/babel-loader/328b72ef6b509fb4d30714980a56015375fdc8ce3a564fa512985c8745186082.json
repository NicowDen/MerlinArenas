{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextPath = void 0;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Shape_1 = require(\"../Shape\");\nconst Path_1 = require(\"./Path\");\nconst Text_1 = require(\"./Text\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_1 = require(\"../Global\");\nvar EMPTY_STRING = '',\n  NORMAL = 'normal';\nfunction _fillFunc(context) {\n  context.fillText(this.partialText, 0, 0);\n}\nfunction _strokeFunc(context) {\n  context.strokeText(this.partialText, 0, 0);\n}\nclass TextPath extends Shape_1.Shape {\n  constructor(config) {\n    super(config);\n    this.dummyCanvas = Util_1.Util.createCanvasElement();\n    this.dataArray = [];\n    this._readDataAttribute();\n    this.on('dataChange.konva', function () {\n      this._readDataAttribute();\n      this._setTextData();\n    });\n    this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', this._setTextData);\n    this._setTextData();\n  }\n  _getTextPathLength() {\n    return Path_1.Path.getPathLength(this.dataArray);\n  }\n  _getPointAtLength(length) {\n    if (!this.attrs.data) {\n      return null;\n    }\n    const totalLength = this.pathLength;\n    if (length - 1 > totalLength) {\n      return null;\n    }\n    return Path_1.Path.getPointAtLengthOfDataArray(length, this.dataArray);\n  }\n  _readDataAttribute() {\n    this.dataArray = Path_1.Path.parsePathData(this.attrs.data);\n    this.pathLength = this._getTextPathLength();\n  }\n  _sceneFunc(context) {\n    context.setAttr('font', this._getContextFont());\n    context.setAttr('textBaseline', this.textBaseline());\n    context.setAttr('textAlign', 'left');\n    context.save();\n    var textDecoration = this.textDecoration();\n    var fill = this.fill();\n    var fontSize = this.fontSize();\n    var glyphInfo = this.glyphInfo;\n    if (textDecoration === 'underline') {\n      context.beginPath();\n    }\n    for (var i = 0; i < glyphInfo.length; i++) {\n      context.save();\n      var p0 = glyphInfo[i].p0;\n      context.translate(p0.x, p0.y);\n      context.rotate(glyphInfo[i].rotation);\n      this.partialText = glyphInfo[i].text;\n      context.fillStrokeShape(this);\n      if (textDecoration === 'underline') {\n        if (i === 0) {\n          context.moveTo(0, fontSize / 2 + 1);\n        }\n        context.lineTo(fontSize, fontSize / 2 + 1);\n      }\n      context.restore();\n    }\n    if (textDecoration === 'underline') {\n      context.strokeStyle = fill;\n      context.lineWidth = fontSize / 20;\n      context.stroke();\n    }\n    context.restore();\n  }\n  _hitFunc(context) {\n    context.beginPath();\n    var glyphInfo = this.glyphInfo;\n    if (glyphInfo.length >= 1) {\n      var p0 = glyphInfo[0].p0;\n      context.moveTo(p0.x, p0.y);\n    }\n    for (var i = 0; i < glyphInfo.length; i++) {\n      var p1 = glyphInfo[i].p1;\n      context.lineTo(p1.x, p1.y);\n    }\n    context.setAttr('lineWidth', this.fontSize());\n    context.setAttr('strokeStyle', this.colorKey);\n    context.stroke();\n  }\n  getTextWidth() {\n    return this.textWidth;\n  }\n  getTextHeight() {\n    Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n    return this.textHeight;\n  }\n  setText(text) {\n    return Text_1.Text.prototype.setText.call(this, text);\n  }\n  _getContextFont() {\n    return Text_1.Text.prototype._getContextFont.call(this);\n  }\n  _getTextSize(text) {\n    var dummyCanvas = this.dummyCanvas;\n    var _context = dummyCanvas.getContext('2d');\n    _context.save();\n    _context.font = this._getContextFont();\n    var metrics = _context.measureText(text);\n    _context.restore();\n    return {\n      width: metrics.width,\n      height: parseInt(`${this.fontSize()}`, 10)\n    };\n  }\n  _setTextData() {\n    const {\n      width,\n      height\n    } = this._getTextSize(this.attrs.text);\n    this.textWidth = width;\n    this.textHeight = height;\n    this.glyphInfo = [];\n    if (!this.attrs.data) {\n      return null;\n    }\n    const letterSpacing = this.letterSpacing();\n    const align = this.align();\n    const kerningFunc = this.kerningFunc();\n    const textWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\n    let offset = 0;\n    if (align === 'center') {\n      offset = Math.max(0, this.pathLength / 2 - textWidth / 2);\n    }\n    if (align === 'right') {\n      offset = Math.max(0, this.pathLength - textWidth);\n    }\n    const charArr = (0, Text_1.stringToArray)(this.text());\n    let offsetToGlyph = offset;\n    for (var i = 0; i < charArr.length; i++) {\n      const charStartPoint = this._getPointAtLength(offsetToGlyph);\n      if (!charStartPoint) return;\n      let glyphWidth = this._getTextSize(charArr[i]).width + letterSpacing;\n      if (charArr[i] === ' ' && align === 'justify') {\n        const numberOfSpaces = this.text().split(' ').length - 1;\n        glyphWidth += (this.pathLength - textWidth) / numberOfSpaces;\n      }\n      const charEndPoint = this._getPointAtLength(offsetToGlyph + glyphWidth);\n      if (!charEndPoint) return;\n      const width = Path_1.Path.getLineLength(charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n      let kern = 0;\n      if (kerningFunc) {\n        try {\n          kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();\n        } catch (e) {\n          kern = 0;\n        }\n      }\n      charStartPoint.x += kern;\n      charEndPoint.x += kern;\n      this.textWidth += kern;\n      const midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n      const rotation = Math.atan2(charEndPoint.y - charStartPoint.y, charEndPoint.x - charStartPoint.x);\n      this.glyphInfo.push({\n        transposeX: midpoint.x,\n        transposeY: midpoint.y,\n        text: charArr[i],\n        rotation: rotation,\n        p0: charStartPoint,\n        p1: charEndPoint\n      });\n      offsetToGlyph += glyphWidth;\n    }\n  }\n  getSelfRect() {\n    if (!this.glyphInfo.length) {\n      return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n    var points = [];\n    this.glyphInfo.forEach(function (info) {\n      points.push(info.p0.x);\n      points.push(info.p0.y);\n      points.push(info.p1.x);\n      points.push(info.p1.y);\n    });\n    var minX = points[0] || 0;\n    var maxX = points[0] || 0;\n    var minY = points[1] || 0;\n    var maxY = points[1] || 0;\n    var x, y;\n    for (var i = 0; i < points.length / 2; i++) {\n      x = points[i * 2];\n      y = points[i * 2 + 1];\n      minX = Math.min(minX, x);\n      maxX = Math.max(maxX, x);\n      minY = Math.min(minY, y);\n      maxY = Math.max(maxY, y);\n    }\n    var fontSize = this.fontSize();\n    return {\n      x: minX - fontSize / 2,\n      y: minY - fontSize / 2,\n      width: maxX - minX + fontSize,\n      height: maxY - minY + fontSize\n    };\n  }\n  destroy() {\n    Util_1.Util.releaseCanvas(this.dummyCanvas);\n    return super.destroy();\n  }\n}\nexports.TextPath = TextPath;\nTextPath.prototype._fillFunc = _fillFunc;\nTextPath.prototype._strokeFunc = _strokeFunc;\nTextPath.prototype._fillFuncHit = _fillFunc;\nTextPath.prototype._strokeFuncHit = _strokeFunc;\nTextPath.prototype.className = 'TextPath';\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\n(0, Global_1._registerNode)(TextPath);\nFactory_1.Factory.addGetterSetter(TextPath, 'data');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'align', 'left');\nFactory_1.Factory.addGetterSetter(TextPath, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'textBaseline', 'middle');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\nFactory_1.Factory.addGetterSetter(TextPath, 'textDecoration', null);\nFactory_1.Factory.addGetterSetter(TextPath, 'kerningFunc', null);","map":{"version":3,"names":["Object","defineProperty","exports","value","TextPath","Util_1","require","Factory_1","Shape_1","Path_1","Text_1","Validators_1","Global_1","EMPTY_STRING","NORMAL","_fillFunc","context","fillText","partialText","_strokeFunc","strokeText","Shape","constructor","config","dummyCanvas","Util","createCanvasElement","dataArray","_readDataAttribute","on","_setTextData","_getTextPathLength","Path","getPathLength","_getPointAtLength","length","attrs","data","totalLength","pathLength","getPointAtLengthOfDataArray","parsePathData","_sceneFunc","setAttr","_getContextFont","textBaseline","save","textDecoration","fill","fontSize","glyphInfo","beginPath","i","p0","translate","x","y","rotate","rotation","text","fillStrokeShape","moveTo","lineTo","restore","strokeStyle","lineWidth","stroke","_hitFunc","p1","colorKey","getTextWidth","textWidth","getTextHeight","warn","textHeight","setText","Text","prototype","call","_getTextSize","_context","getContext","font","metrics","measureText","width","height","parseInt","letterSpacing","align","kerningFunc","Math","max","offset","charArr","stringToArray","offsetToGlyph","charStartPoint","glyphWidth","numberOfSpaces","split","charEndPoint","getLineLength","kern","e","midpoint","getPointOnLine","atan2","push","transposeX","transposeY","getSelfRect","points","forEach","info","minX","maxX","minY","maxY","min","destroy","releaseCanvas","_fillFuncHit","_strokeFuncHit","className","_attrsAffectingSize","_registerNode","Factory","addGetterSetter","getNumberValidator"],"sources":["/Users/nicolasgrenier/Documents/Code/fighting_RPG/node_modules/konva/lib/shapes/TextPath.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextPath = void 0;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Shape_1 = require(\"../Shape\");\nconst Path_1 = require(\"./Path\");\nconst Text_1 = require(\"./Text\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_1 = require(\"../Global\");\nvar EMPTY_STRING = '', NORMAL = 'normal';\nfunction _fillFunc(context) {\n    context.fillText(this.partialText, 0, 0);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this.partialText, 0, 0);\n}\nclass TextPath extends Shape_1.Shape {\n    constructor(config) {\n        super(config);\n        this.dummyCanvas = Util_1.Util.createCanvasElement();\n        this.dataArray = [];\n        this._readDataAttribute();\n        this.on('dataChange.konva', function () {\n            this._readDataAttribute();\n            this._setTextData();\n        });\n        this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', this._setTextData);\n        this._setTextData();\n    }\n    _getTextPathLength() {\n        return Path_1.Path.getPathLength(this.dataArray);\n    }\n    _getPointAtLength(length) {\n        if (!this.attrs.data) {\n            return null;\n        }\n        const totalLength = this.pathLength;\n        if (length - 1 > totalLength) {\n            return null;\n        }\n        return Path_1.Path.getPointAtLengthOfDataArray(length, this.dataArray);\n    }\n    _readDataAttribute() {\n        this.dataArray = Path_1.Path.parsePathData(this.attrs.data);\n        this.pathLength = this._getTextPathLength();\n    }\n    _sceneFunc(context) {\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', this.textBaseline());\n        context.setAttr('textAlign', 'left');\n        context.save();\n        var textDecoration = this.textDecoration();\n        var fill = this.fill();\n        var fontSize = this.fontSize();\n        var glyphInfo = this.glyphInfo;\n        if (textDecoration === 'underline') {\n            context.beginPath();\n        }\n        for (var i = 0; i < glyphInfo.length; i++) {\n            context.save();\n            var p0 = glyphInfo[i].p0;\n            context.translate(p0.x, p0.y);\n            context.rotate(glyphInfo[i].rotation);\n            this.partialText = glyphInfo[i].text;\n            context.fillStrokeShape(this);\n            if (textDecoration === 'underline') {\n                if (i === 0) {\n                    context.moveTo(0, fontSize / 2 + 1);\n                }\n                context.lineTo(fontSize, fontSize / 2 + 1);\n            }\n            context.restore();\n        }\n        if (textDecoration === 'underline') {\n            context.strokeStyle = fill;\n            context.lineWidth = fontSize / 20;\n            context.stroke();\n        }\n        context.restore();\n    }\n    _hitFunc(context) {\n        context.beginPath();\n        var glyphInfo = this.glyphInfo;\n        if (glyphInfo.length >= 1) {\n            var p0 = glyphInfo[0].p0;\n            context.moveTo(p0.x, p0.y);\n        }\n        for (var i = 0; i < glyphInfo.length; i++) {\n            var p1 = glyphInfo[i].p1;\n            context.lineTo(p1.x, p1.y);\n        }\n        context.setAttr('lineWidth', this.fontSize());\n        context.setAttr('strokeStyle', this.colorKey);\n        context.stroke();\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    setText(text) {\n        return Text_1.Text.prototype.setText.call(this, text);\n    }\n    _getContextFont() {\n        return Text_1.Text.prototype._getContextFont.call(this);\n    }\n    _getTextSize(text) {\n        var dummyCanvas = this.dummyCanvas;\n        var _context = dummyCanvas.getContext('2d');\n        _context.save();\n        _context.font = this._getContextFont();\n        var metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: parseInt(`${this.fontSize()}`, 10),\n        };\n    }\n    _setTextData() {\n        const { width, height } = this._getTextSize(this.attrs.text);\n        this.textWidth = width;\n        this.textHeight = height;\n        this.glyphInfo = [];\n        if (!this.attrs.data) {\n            return null;\n        }\n        const letterSpacing = this.letterSpacing();\n        const align = this.align();\n        const kerningFunc = this.kerningFunc();\n        const textWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\n        let offset = 0;\n        if (align === 'center') {\n            offset = Math.max(0, this.pathLength / 2 - textWidth / 2);\n        }\n        if (align === 'right') {\n            offset = Math.max(0, this.pathLength - textWidth);\n        }\n        const charArr = (0, Text_1.stringToArray)(this.text());\n        let offsetToGlyph = offset;\n        for (var i = 0; i < charArr.length; i++) {\n            const charStartPoint = this._getPointAtLength(offsetToGlyph);\n            if (!charStartPoint)\n                return;\n            let glyphWidth = this._getTextSize(charArr[i]).width + letterSpacing;\n            if (charArr[i] === ' ' && align === 'justify') {\n                const numberOfSpaces = this.text().split(' ').length - 1;\n                glyphWidth += (this.pathLength - textWidth) / numberOfSpaces;\n            }\n            const charEndPoint = this._getPointAtLength(offsetToGlyph + glyphWidth);\n            if (!charEndPoint)\n                return;\n            const width = Path_1.Path.getLineLength(charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n            let kern = 0;\n            if (kerningFunc) {\n                try {\n                    kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();\n                }\n                catch (e) {\n                    kern = 0;\n                }\n            }\n            charStartPoint.x += kern;\n            charEndPoint.x += kern;\n            this.textWidth += kern;\n            const midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n            const rotation = Math.atan2(charEndPoint.y - charStartPoint.y, charEndPoint.x - charStartPoint.x);\n            this.glyphInfo.push({\n                transposeX: midpoint.x,\n                transposeY: midpoint.y,\n                text: charArr[i],\n                rotation: rotation,\n                p0: charStartPoint,\n                p1: charEndPoint,\n            });\n            offsetToGlyph += glyphWidth;\n        }\n    }\n    getSelfRect() {\n        if (!this.glyphInfo.length) {\n            return {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0,\n            };\n        }\n        var points = [];\n        this.glyphInfo.forEach(function (info) {\n            points.push(info.p0.x);\n            points.push(info.p0.y);\n            points.push(info.p1.x);\n            points.push(info.p1.y);\n        });\n        var minX = points[0] || 0;\n        var maxX = points[0] || 0;\n        var minY = points[1] || 0;\n        var maxY = points[1] || 0;\n        var x, y;\n        for (var i = 0; i < points.length / 2; i++) {\n            x = points[i * 2];\n            y = points[i * 2 + 1];\n            minX = Math.min(minX, x);\n            maxX = Math.max(maxX, x);\n            minY = Math.min(minY, y);\n            maxY = Math.max(maxY, y);\n        }\n        var fontSize = this.fontSize();\n        return {\n            x: minX - fontSize / 2,\n            y: minY - fontSize / 2,\n            width: maxX - minX + fontSize,\n            height: maxY - minY + fontSize,\n        };\n    }\n    destroy() {\n        Util_1.Util.releaseCanvas(this.dummyCanvas);\n        return super.destroy();\n    }\n}\nexports.TextPath = TextPath;\nTextPath.prototype._fillFunc = _fillFunc;\nTextPath.prototype._strokeFunc = _strokeFunc;\nTextPath.prototype._fillFuncHit = _fillFunc;\nTextPath.prototype._strokeFuncHit = _strokeFunc;\nTextPath.prototype.className = 'TextPath';\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\n(0, Global_1._registerNode)(TextPath);\nFactory_1.Factory.addGetterSetter(TextPath, 'data');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'align', 'left');\nFactory_1.Factory.addGetterSetter(TextPath, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'textBaseline', 'middle');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\nFactory_1.Factory.addGetterSetter(TextPath, 'textDecoration', null);\nFactory_1.Factory.addGetterSetter(TextPath, 'kerningFunc', null);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}