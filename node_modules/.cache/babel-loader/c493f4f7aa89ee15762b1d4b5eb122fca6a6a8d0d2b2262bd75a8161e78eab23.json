{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/components/fight-scene/FightScene.jsx\",\n  _s2 = $RefreshSig$();\n// // import mc from \"./fight-scene.module.scss\";\n// // import { useDispatch } from \"react-redux\";\n// // import { render } from \"react-dom\";\n// // import { Stage, Layer, Rect, Text } from \"react-konva\";\n// // import Konva from \"konva\";\n// // import { useState } from \"react\";\n// // //sprites//\n// // // import zombie_player1 from \"../../images/zombie_player1.png\";\n// // // import zombie_player2 from \"../../images/zombie_player2.png\";\n// // // import knight_player1 from \"../../images/knight_player1.png\";\n// // // import knight_player2 from \"../../images/knight_player2.png\";\n// // // import ninja_player1 from \"../../images/ninja_player1.png\";\n// // // import ninja_player2 from \"../../images/ninja_player2.png\";\n\n// // const FightScene = () => {\n// //   const dispatch = useDispatch();\n\n// //   const onEndFightButtonClick = () => {\n// //     dispatch({ type: `ANIMATION_FIGHT_START_CANCEL` });\n// //     setTimeout(() => {\n// //       //setTimeout to match with transition on css and let animation finish before components switch\n// //       dispatch({ type: `FIGHT_END` });\n// //     }, 300);\n// //   };\n\n// //   const ColoredRect = () => {\n// //     const [color, setColor] = useState(\"green\");\n// //     const handleClick = () => {\n// //       setColor(Konva.Util.getRandomColor());\n// //     };\n// //     return (\n// //       <Rect\n// //         x={50}\n// //         y={0}\n// //         width={100}\n// //         height={100}\n// //         fill={color}\n// //         shadowBlur={5}\n// //         onClick={handleClick}\n// //       />\n// //     );\n// //   };\n\n// //   return (\n// //     <div\n// //       // onClick={onEndFightButtonClick}\n// //       className={mc.container}\n// //     >\n// //       <div className={mc.canvas_game}>\n// //         <Stage width={100} height={100}>\n// //           <Layer>\n// //             <Text text=\"Try click on rect\" />\n// //             <ColoredRect />\n// //           </Layer>\n// //         </Stage>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default FightScene;\n\n// import mc from \"./fight-scene.module.scss\";\n// import { useDispatch } from \"react-redux\";\n// import { render } from \"react-dom\";\n// import { Stage, Layer, Rect, Text } from \"react-konva\";\n// import Konva from \"konva\";\n// import { useState } from \"react\";\n\n// const FightScene = () => {\n//   const dispatch = useDispatch();\n\n//   const onEndFightButtonClick = () => {\n//     dispatch({ type: `ANIMATION_FIGHT_START_CANCEL` });\n//     setTimeout(() => {\n//       dispatch({ type: `FIGHT_END` });\n//     }, 300);\n//   };\n\n//   const ColoredRect = () => {\n//     const [color, setColor] = useState(\"green\");\n//     const handleClick = () => {\n//       setColor(Konva.Util.getRandomColor());\n//     };\n//     return (\n//       <Rect\n//         x={50}\n//         y={0}\n//         width={100}\n//         height={100}\n//         fill={color}\n//         shadowBlur={5}\n//         onClick={handleClick}\n//       />\n//     );\n//   };\n\n//   return (\n//     <div\n//       // onClick={onEndFightButtonClick}\n//       className={mc.container}\n//     >\n//       <div className={mc.canvas_game}>\n//         {/* Use clientWidth to get the width of the container */}\n//         <Stage\n//           width={document.querySelector(`.${mc.container}`).clientWidth}\n//           height={100}\n//         >\n//           <Layer>\n//             <Text text=\"Try click on rect\" />\n//             <ColoredRect />\n//           </Layer>\n//         </Stage>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default FightScene;\n\nimport mc from \"./fight-scene.module.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { Stage, Layer, Rect, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FightScene = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const dispatch = useDispatch();\n  const canvasGameRef = useRef(null);\n  const [stageWidth, setStageWidth] = useState(100);\n  const onEndFightButtonClick = () => {\n    dispatch({\n      type: `ANIMATION_FIGHT_START_CANCEL`\n    });\n    setTimeout(() => {\n      dispatch({\n        type: `FIGHT_END`\n      });\n    }, 300);\n  };\n  const updateStageWidth = () => {\n    if (canvasGameRef.current) {\n      const width = canvasGameRef.current.clientWidth;\n      setStageWidth(width);\n    }\n  };\n  useEffect(() => {\n    updateStageWidth();\n    window.addEventListener(\"resize\", updateStageWidth);\n    return () => {\n      window.removeEventListener(\"resize\", updateStageWidth);\n    };\n  }, []);\n  const ColoredRect = () => {\n    _s();\n    const [color, setColor] = useState(\"green\");\n    const handleClick = () => {\n      setColor(Konva.Util.getRandomColor());\n    };\n    return /*#__PURE__*/_jsxDEV(Rect, {\n      x: 50,\n      y: 0,\n      width: 100,\n      height: 100,\n      fill: color,\n      shadowBlur: 5,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this);\n  };\n  _s(ColoredRect, \"TIOBo6tXpBZ8NKwHFM0RibDsB8Y=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    // onClick={onEndFightButtonClick}\n    className: mc.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mc.canvas_game,\n      ref: canvasGameRef,\n      children: /*#__PURE__*/_jsxDEV(Stage, {\n        width: stageWidth,\n        height: 100,\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          children: [/*#__PURE__*/_jsxDEV(Rect, {\n            width: stageWidth,\n            height: 100,\n            fill: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            text: \"Try click on rect\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ColoredRect, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s2(FightScene, \"dmamhLvUG3sA1WQwA5keNxrx2m8=\", false, function () {\n  return [useDispatch];\n});\n_c = FightScene;\nexport default FightScene;\nvar _c;\n$RefreshReg$(_c, \"FightScene\");","map":{"version":3,"names":["mc","useDispatch","Stage","Layer","Rect","Text","Konva","useState","useEffect","useRef","FightScene","dispatch","canvasGameRef","stageWidth","setStageWidth","onEndFightButtonClick","type","setTimeout","updateStageWidth","current","width","clientWidth","window","addEventListener","removeEventListener","ColoredRect","color","setColor","handleClick","Util","getRandomColor","container","canvas_game"],"sources":["/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/components/fight-scene/FightScene.jsx"],"sourcesContent":["// // import mc from \"./fight-scene.module.scss\";\n// // import { useDispatch } from \"react-redux\";\n// // import { render } from \"react-dom\";\n// // import { Stage, Layer, Rect, Text } from \"react-konva\";\n// // import Konva from \"konva\";\n// // import { useState } from \"react\";\n// // //sprites//\n// // // import zombie_player1 from \"../../images/zombie_player1.png\";\n// // // import zombie_player2 from \"../../images/zombie_player2.png\";\n// // // import knight_player1 from \"../../images/knight_player1.png\";\n// // // import knight_player2 from \"../../images/knight_player2.png\";\n// // // import ninja_player1 from \"../../images/ninja_player1.png\";\n// // // import ninja_player2 from \"../../images/ninja_player2.png\";\n\n// // const FightScene = () => {\n// //   const dispatch = useDispatch();\n\n// //   const onEndFightButtonClick = () => {\n// //     dispatch({ type: `ANIMATION_FIGHT_START_CANCEL` });\n// //     setTimeout(() => {\n// //       //setTimeout to match with transition on css and let animation finish before components switch\n// //       dispatch({ type: `FIGHT_END` });\n// //     }, 300);\n// //   };\n\n// //   const ColoredRect = () => {\n// //     const [color, setColor] = useState(\"green\");\n// //     const handleClick = () => {\n// //       setColor(Konva.Util.getRandomColor());\n// //     };\n// //     return (\n// //       <Rect\n// //         x={50}\n// //         y={0}\n// //         width={100}\n// //         height={100}\n// //         fill={color}\n// //         shadowBlur={5}\n// //         onClick={handleClick}\n// //       />\n// //     );\n// //   };\n\n// //   return (\n// //     <div\n// //       // onClick={onEndFightButtonClick}\n// //       className={mc.container}\n// //     >\n// //       <div className={mc.canvas_game}>\n// //         <Stage width={100} height={100}>\n// //           <Layer>\n// //             <Text text=\"Try click on rect\" />\n// //             <ColoredRect />\n// //           </Layer>\n// //         </Stage>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default FightScene;\n\n// import mc from \"./fight-scene.module.scss\";\n// import { useDispatch } from \"react-redux\";\n// import { render } from \"react-dom\";\n// import { Stage, Layer, Rect, Text } from \"react-konva\";\n// import Konva from \"konva\";\n// import { useState } from \"react\";\n\n// const FightScene = () => {\n//   const dispatch = useDispatch();\n\n//   const onEndFightButtonClick = () => {\n//     dispatch({ type: `ANIMATION_FIGHT_START_CANCEL` });\n//     setTimeout(() => {\n//       dispatch({ type: `FIGHT_END` });\n//     }, 300);\n//   };\n\n//   const ColoredRect = () => {\n//     const [color, setColor] = useState(\"green\");\n//     const handleClick = () => {\n//       setColor(Konva.Util.getRandomColor());\n//     };\n//     return (\n//       <Rect\n//         x={50}\n//         y={0}\n//         width={100}\n//         height={100}\n//         fill={color}\n//         shadowBlur={5}\n//         onClick={handleClick}\n//       />\n//     );\n//   };\n\n//   return (\n//     <div\n//       // onClick={onEndFightButtonClick}\n//       className={mc.container}\n//     >\n//       <div className={mc.canvas_game}>\n//         {/* Use clientWidth to get the width of the container */}\n//         <Stage\n//           width={document.querySelector(`.${mc.container}`).clientWidth}\n//           height={100}\n//         >\n//           <Layer>\n//             <Text text=\"Try click on rect\" />\n//             <ColoredRect />\n//           </Layer>\n//         </Stage>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default FightScene;\n\nimport mc from \"./fight-scene.module.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { Stage, Layer, Rect, Text } from \"react-konva\";\nimport Konva from \"konva\";\nimport { useState, useEffect, useRef } from \"react\";\n\nconst FightScene = () => {\n  const dispatch = useDispatch();\n  const canvasGameRef = useRef(null);\n  const [stageWidth, setStageWidth] = useState(100);\n\n  const onEndFightButtonClick = () => {\n    dispatch({ type: `ANIMATION_FIGHT_START_CANCEL` });\n    setTimeout(() => {\n      dispatch({ type: `FIGHT_END` });\n    }, 300);\n  };\n\n  const updateStageWidth = () => {\n    if (canvasGameRef.current) {\n      const width = canvasGameRef.current.clientWidth;\n      setStageWidth(width);\n    }\n  };\n\n  useEffect(() => {\n    updateStageWidth();\n    window.addEventListener(\"resize\", updateStageWidth);\n    return () => {\n      window.removeEventListener(\"resize\", updateStageWidth);\n    };\n  }, []);\n\n  const ColoredRect = () => {\n    const [color, setColor] = useState(\"green\");\n    const handleClick = () => {\n      setColor(Konva.Util.getRandomColor());\n    };\n    return (\n      <Rect\n        x={50}\n        y={0}\n        width={100}\n        height={100}\n        fill={color}\n        shadowBlur={5}\n        onClick={handleClick}\n      />\n    );\n  };\n\n  return (\n    <div\n      // onClick={onEndFightButtonClick}\n      className={mc.container}\n    >\n      <div className={mc.canvas_game} ref={canvasGameRef}>\n        <Stage width={stageWidth} height={100}>\n          <Layer>\n            {/* Add a black background */}\n            <Rect width={stageWidth} height={100} fill=\"black\" />\n            <Text text=\"Try click on rect\" />\n            <ColoredRect />\n          </Layer>\n        </Stage>\n      </div>\n    </div>\n  );\n};\n\nexport default FightScene;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}