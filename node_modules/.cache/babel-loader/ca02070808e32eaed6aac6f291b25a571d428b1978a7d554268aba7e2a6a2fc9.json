{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/components/fight-scene/FightScene.jsx\",\n  _s = $RefreshSig$();\nimport mc from \"./fight-scene.module.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useRef, useState } from \"react\";\n//sprites//\nimport zombie_player1 from \"../../images/zombie_player1.png\";\nimport zombie_player2 from \"../../images/zombie_player2.png\";\nimport knight_player1 from \"../../images/knight_player1.png\";\nimport knight_player2 from \"../../images/knight_player2.png\";\nimport ninja_player1 from \"../../images/ninja_player1.png\";\nimport ninja_player2 from \"../../images/ninja_player2.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FightScene = () => {\n  _s();\n  const dispatch = useDispatch();\n  const onEndFightButtonClick = () => {\n    dispatch({\n      type: `ANIMATION_FIGHT_START_CANCEL`\n    });\n    setTimeout(() => {\n      //setTimeout to match with transition on css and let animation finish before components switch\n      dispatch({\n        type: `FIGHT_END`\n      });\n    }, 300);\n  };\n  const [x, setX] = useState(); // Coordonnée X de l'image\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = ninja_player1;\n    const imageWidth = 100;\n    const imageHeight = 100;\n    const y = canvas.height / 2;\n    setX(canvas.width / 2 - imageWidth / 2); // Coordonnée de départ\n\n    function animate() {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.drawImage(image, x, y, imageWidth, imageHeight);\n      setX(prevX => prevX + 1); // Mise à jour de la coordonnée X\n\n      requestAnimationFrame(animate);\n    }\n    animate();\n  }, []);\n\n  //   const canvasRef = useRef(null);\n\n  //   useEffect(() => {\n  //     const canvas = canvasRef.current;\n  //     const context = canvas.getContext(\"2d\");\n  //     context.fillStyle = \"black\";\n  //     context.fillRect(0, 0, canvas.width, canvas.height);\n  //   }, []);\n\n  //   useEffect(() => {\n  //     const x = 0; // Coordonnée X de l'image sur le canvas\n  //     const y = 0; // Coordonnée Y de l'image sur le canvas\n  //     const width = 100; // Largeur de l'image sur le canvas\n  //     const height = 100; // Hauteur de l'image sur le canvas\n  //     const canvas = canvasRef.current;\n  //     const context = canvas.getContext(\"2d\");\n  //     context.clearRect(0, 0, canvas.width, canvas.height); // Efface le canvas\n  //     context.fillStyle = \"black\";\n  //     context.fillRect(0, 0, canvas.width, canvas.height);\n  //     // Charge l'image\n  //     const image = new Image();\n  //     image.src = ninja_player1;\n\n  //     // Attend que l'image soit chargée avant de la dessiner\n  //     image.onload = () => {\n  //       // Dessine l'image sur le canvas\n  //       context.drawImage(image, x, y, width, height); // Remplacez x, y, width, height par les valeurs appropriées\n  //     };\n  //   }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onEndFightButtonClick,\n    className: mc.container,\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: mc.canvas_game\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(FightScene, \"QsyX6Mw/m8Cu4+ERKXF7yZiULXU=\", false, function () {\n  return [useDispatch];\n});\n_c = FightScene;\nexport default FightScene;\nvar _c;\n$RefreshReg$(_c, \"FightScene\");","map":{"version":3,"names":["mc","useSelector","useDispatch","useEffect","useRef","useState","zombie_player1","zombie_player2","knight_player1","knight_player2","ninja_player1","ninja_player2","FightScene","dispatch","onEndFightButtonClick","type","setTimeout","x","setX","canvasRef","canvas","current","context","getContext","image","Image","src","imageWidth","imageHeight","y","height","width","animate","clearRect","drawImage","prevX","requestAnimationFrame","container","canvas_game"],"sources":["/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/components/fight-scene/FightScene.jsx"],"sourcesContent":["import mc from \"./fight-scene.module.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useRef, useState } from \"react\";\n//sprites//\nimport zombie_player1 from \"../../images/zombie_player1.png\";\nimport zombie_player2 from \"../../images/zombie_player2.png\";\nimport knight_player1 from \"../../images/knight_player1.png\";\nimport knight_player2 from \"../../images/knight_player2.png\";\nimport ninja_player1 from \"../../images/ninja_player1.png\";\nimport ninja_player2 from \"../../images/ninja_player2.png\";\n\nconst FightScene = () => {\n  const dispatch = useDispatch();\n\n  const onEndFightButtonClick = () => {\n    dispatch({ type: `ANIMATION_FIGHT_START_CANCEL` });\n    setTimeout(() => {\n      //setTimeout to match with transition on css and let animation finish before components switch\n      dispatch({ type: `FIGHT_END` });\n    }, 300);\n  };\n\n  const [x, setX] = useState(); // Coordonnée X de l'image\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = ninja_player1;\n    const imageWidth = 100;\n    const imageHeight = 100;\n    const y = canvas.height / 2;\n\n    setX(canvas.width / 2 - imageWidth / 2); // Coordonnée de départ\n\n    function animate() {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.drawImage(image, x, y, imageWidth, imageHeight);\n      setX((prevX) => prevX + 1); // Mise à jour de la coordonnée X\n\n      requestAnimationFrame(animate);\n    }\n\n    animate();\n  }, []);\n\n  //   const canvasRef = useRef(null);\n\n  //   useEffect(() => {\n  //     const canvas = canvasRef.current;\n  //     const context = canvas.getContext(\"2d\");\n  //     context.fillStyle = \"black\";\n  //     context.fillRect(0, 0, canvas.width, canvas.height);\n  //   }, []);\n\n  //   useEffect(() => {\n  //     const x = 0; // Coordonnée X de l'image sur le canvas\n  //     const y = 0; // Coordonnée Y de l'image sur le canvas\n  //     const width = 100; // Largeur de l'image sur le canvas\n  //     const height = 100; // Hauteur de l'image sur le canvas\n  //     const canvas = canvasRef.current;\n  //     const context = canvas.getContext(\"2d\");\n  //     context.clearRect(0, 0, canvas.width, canvas.height); // Efface le canvas\n  //     context.fillStyle = \"black\";\n  //     context.fillRect(0, 0, canvas.width, canvas.height);\n  //     // Charge l'image\n  //     const image = new Image();\n  //     image.src = ninja_player1;\n\n  //     // Attend que l'image soit chargée avant de la dessiner\n  //     image.onload = () => {\n  //       // Dessine l'image sur le canvas\n  //       context.drawImage(image, x, y, width, height); // Remplacez x, y, width, height par les valeurs appropriées\n  //     };\n  //   }, []);\n\n  return (\n    <div onClick={onEndFightButtonClick} className={mc.container}>\n      <canvas ref={canvasRef} className={mc.canvas_game} />\n    </div>\n  );\n};\n\nexport default FightScene;\n"],"mappings":";;AAAA,OAAOA,EAAE,MAAM,2BAA2B;AAC1C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD;AACA,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAOC,aAAa,MAAM,gCAAgC;AAAC;AAE3D,MAAMC,UAAU,GAAG,MAAM;EAAA;EACvB,MAAMC,QAAQ,GAAGX,WAAW,EAAE;EAE9B,MAAMY,qBAAqB,GAAG,MAAM;IAClCD,QAAQ,CAAC;MAAEE,IAAI,EAAG;IAA8B,CAAC,CAAC;IAClDC,UAAU,CAAC,MAAM;MACf;MACAH,QAAQ,CAAC;QAAEE,IAAI,EAAG;MAAW,CAAC,CAAC;IACjC,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;EAED,MAAM,CAACE,CAAC,EAAEC,IAAI,CAAC,GAAGb,QAAQ,EAAE,CAAC,CAAC;EAC9B,MAAMc,SAAS,GAAGf,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMiB,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvC,MAAMC,KAAK,GAAG,IAAIC,KAAK,EAAE;IACzBD,KAAK,CAACE,GAAG,GAAGhB,aAAa;IACzB,MAAMiB,UAAU,GAAG,GAAG;IACtB,MAAMC,WAAW,GAAG,GAAG;IACvB,MAAMC,CAAC,GAAGT,MAAM,CAACU,MAAM,GAAG,CAAC;IAE3BZ,IAAI,CAACE,MAAM,CAACW,KAAK,GAAG,CAAC,GAAGJ,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEzC,SAASK,OAAO,GAAG;MACjBV,OAAO,CAACW,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEb,MAAM,CAACW,KAAK,EAAEX,MAAM,CAACU,MAAM,CAAC;MACpDR,OAAO,CAACY,SAAS,CAACV,KAAK,EAAEP,CAAC,EAAEY,CAAC,EAAEF,UAAU,EAAEC,WAAW,CAAC;MACvDV,IAAI,CAAEiB,KAAK,IAAKA,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;;MAE5BC,qBAAqB,CAACJ,OAAO,CAAC;IAChC;IAEAA,OAAO,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;;EAEN;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAK,OAAO,EAAElB,qBAAsB;IAAC,SAAS,EAAEd,EAAE,CAACqC,SAAU;IAAA,uBAC3D;MAAQ,GAAG,EAAElB,SAAU;MAAC,SAAS,EAAEnB,EAAE,CAACsC;IAAY;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACjD;AAEV,CAAC;AAAC,GAvEI1B,UAAU;EAAA,QACGV,WAAW;AAAA;AAAA,KADxBU,UAAU;AAyEhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}