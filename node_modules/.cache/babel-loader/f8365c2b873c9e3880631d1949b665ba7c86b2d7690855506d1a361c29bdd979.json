{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/components/fight-scene/FightScene.jsx\",\n  _s = $RefreshSig$();\nimport mc from \"./fight-scene.module.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useRef, useState } from \"react\";\n//sprites//\nimport zombie_player1 from \"../../images/zombie_player1.png\";\nimport zombie_player2 from \"../../images/zombie_player2.png\";\nimport knight_player1 from \"../../images/knight_player1.png\";\nimport knight_player2 from \"../../images/knight_player2.png\";\nimport ninja_player1 from \"../../images/ninja_player1.png\";\nimport ninja_player2 from \"../../images/ninja_player2.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FightScene = () => {\n  _s();\n  const dispatch = useDispatch();\n  const onEndFightButtonClick = () => {\n    dispatch({\n      type: `ANIMATION_FIGHT_START_CANCEL`\n    });\n    setTimeout(() => {\n      //setTimeout to match with transition on css and let animation finish before components switch\n      dispatch({\n        type: `FIGHT_END`\n      });\n    }, 300);\n  };\n  const canvasRef = useRef(null);\n  const [ctx, setCtx] = useState(null);\n\n  //   const addImage = (\n  //     src,\n  //     posX,\n  //     posY,\n  //     myImgWidth,\n  //     myImgHeight,\n  //     x,\n  //     y,\n  //     width,\n  //     height\n  //   ) => {\n  //     const myImg = new Image();\n  //     myImg.src = src;\n  //     if (ctx)\n  //       ctx.drawImage(\n  //         myImg,\n  //         posX,\n  //         posY,\n  //         myImgWidth,\n  //         myImgHeight,\n  //         x,\n  //         y,\n  //         width,\n  //         height\n  //       );\n  //   };\n\n  const addImage = (ctx, src, posX, posY, sWidth, sHeight, x, y, width, height) => {\n    const myImg = new Image();\n    myImg.src = src;\n    ctx.drawImage(myImg, posX, posY, sWidth, sHeight, x, y, width, height);\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    setCtx(ctx); // Store the context in state\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const img = new Image();\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, 100, 100); // Dessine l'image aux coordonnées (x, y)\n    };\n\n    img.src = zombie_player1;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onEndFightButtonClick,\n    className: mc.container,\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: mc.canvas_game\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(FightScene, \"m4ppl3yNHM3pbyegQxaxzxpD+14=\", false, function () {\n  return [useDispatch];\n});\n_c = FightScene;\nexport default FightScene;\nvar _c;\n$RefreshReg$(_c, \"FightScene\");","map":{"version":3,"names":["mc","useSelector","useDispatch","useEffect","useRef","useState","zombie_player1","zombie_player2","knight_player1","knight_player2","ninja_player1","ninja_player2","FightScene","dispatch","onEndFightButtonClick","type","setTimeout","canvasRef","ctx","setCtx","addImage","src","posX","posY","sWidth","sHeight","x","y","width","height","myImg","Image","drawImage","canvas","current","getContext","fillStyle","fillRect","img","onload","container","canvas_game"],"sources":["/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/components/fight-scene/FightScene.jsx"],"sourcesContent":["import mc from \"./fight-scene.module.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useRef, useState } from \"react\";\n//sprites//\nimport zombie_player1 from \"../../images/zombie_player1.png\";\nimport zombie_player2 from \"../../images/zombie_player2.png\";\nimport knight_player1 from \"../../images/knight_player1.png\";\nimport knight_player2 from \"../../images/knight_player2.png\";\nimport ninja_player1 from \"../../images/ninja_player1.png\";\nimport ninja_player2 from \"../../images/ninja_player2.png\";\n\nconst FightScene = () => {\n  const dispatch = useDispatch();\n\n  const onEndFightButtonClick = () => {\n    dispatch({ type: `ANIMATION_FIGHT_START_CANCEL` });\n    setTimeout(() => {\n      //setTimeout to match with transition on css and let animation finish before components switch\n      dispatch({ type: `FIGHT_END` });\n    }, 300);\n  };\n\n  const canvasRef = useRef(null);\n  const [ctx, setCtx] = useState(null);\n\n  //   const addImage = (\n  //     src,\n  //     posX,\n  //     posY,\n  //     myImgWidth,\n  //     myImgHeight,\n  //     x,\n  //     y,\n  //     width,\n  //     height\n  //   ) => {\n  //     const myImg = new Image();\n  //     myImg.src = src;\n  //     if (ctx)\n  //       ctx.drawImage(\n  //         myImg,\n  //         posX,\n  //         posY,\n  //         myImgWidth,\n  //         myImgHeight,\n  //         x,\n  //         y,\n  //         width,\n  //         height\n  //       );\n  //   };\n\n  const addImage = (\n    ctx,\n    src,\n    posX,\n    posY,\n    sWidth,\n    sHeight,\n    x,\n    y,\n    width,\n    height\n  ) => {\n    const myImg = new Image();\n    myImg.src = src;\n    ctx.drawImage(myImg, posX, posY, sWidth, sHeight, x, y, width, height);\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    setCtx(ctx); // Store the context in state\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const img = new Image();\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, 100, 100); // Dessine l'image aux coordonnées (x, y)\n    };\n    img.src = zombie_player1;\n  }, []);\n\n  return (\n    <div onClick={onEndFightButtonClick} className={mc.container}>\n      <canvas ref={canvasRef} className={mc.canvas_game} />\n    </div>\n  );\n};\n\nexport default FightScene;\n"],"mappings":";;AAAA,OAAOA,EAAE,MAAM,2BAA2B;AAC1C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD;AACA,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAOC,aAAa,MAAM,gCAAgC;AAAC;AAE3D,MAAMC,UAAU,GAAG,MAAM;EAAA;EACvB,MAAMC,QAAQ,GAAGX,WAAW,EAAE;EAE9B,MAAMY,qBAAqB,GAAG,MAAM;IAClCD,QAAQ,CAAC;MAAEE,IAAI,EAAG;IAA8B,CAAC,CAAC;IAClDC,UAAU,CAAC,MAAM;MACf;MACAH,QAAQ,CAAC;QAAEE,IAAI,EAAG;MAAW,CAAC,CAAC;IACjC,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;EAED,MAAME,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACc,GAAG,EAAEC,MAAM,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAEpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMe,QAAQ,GAAG,CACfF,GAAG,EACHG,GAAG,EACHC,IAAI,EACJC,IAAI,EACJC,MAAM,EACNC,OAAO,EACPC,CAAC,EACDC,CAAC,EACDC,KAAK,EACLC,MAAM,KACH;IACH,MAAMC,KAAK,GAAG,IAAIC,KAAK,EAAE;IACzBD,KAAK,CAACT,GAAG,GAAGA,GAAG;IACfH,GAAG,CAACc,SAAS,CAACF,KAAK,EAAER,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,CAAC;EACxE,CAAC;EAED1B,SAAS,CAAC,MAAM;IACd,MAAM8B,MAAM,GAAGhB,SAAS,CAACiB,OAAO;IAChC,MAAMhB,GAAG,GAAGe,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IACnChB,MAAM,CAACD,GAAG,CAAC,CAAC,CAAC;IACbA,GAAG,CAACkB,SAAS,GAAG,OAAO;IACvBlB,GAAG,CAACmB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAACL,KAAK,EAAEK,MAAM,CAACJ,MAAM,CAAC;IAC/C,MAAMS,GAAG,GAAG,IAAIP,KAAK,EAAE;IACvBO,GAAG,CAACC,MAAM,GAAG,MAAM;MACjBrB,GAAG,CAACc,SAAS,CAACM,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACtC,CAAC;;IACDA,GAAG,CAACjB,GAAG,GAAGf,cAAc;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAK,OAAO,EAAEQ,qBAAsB;IAAC,SAAS,EAAEd,EAAE,CAACwC,SAAU;IAAA,uBAC3D;MAAQ,GAAG,EAAEvB,SAAU;MAAC,SAAS,EAAEjB,EAAE,CAACyC;IAAY;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACjD;AAEV,CAAC;AAAC,GA5EI7B,UAAU;EAAA,QACGV,WAAW;AAAA;AAAA,KADxBU,UAAU;AA8EhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}