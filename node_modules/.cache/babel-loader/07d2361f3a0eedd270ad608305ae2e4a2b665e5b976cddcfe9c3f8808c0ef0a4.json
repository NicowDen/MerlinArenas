{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/components/fight-scene/FightScene.jsx\",\n  _s = $RefreshSig$();\nimport mc from \"./fight-scene.module.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\n//components//\nimport LifeBar from \"../fight-scene-elements/life-bar/LifeBar\";\nimport MdjScene from \"../fight-scene-elements/mdj-scene/MdjScene\";\nimport Fight from \"../fight-scene-elements/fight/Fight\";\nimport Tv from \"../fight-scene-elements/tv/Tv\";\nimport Tutoriel from \"../fight-scene-elements/tutoriel/Tutoriel\";\nimport Winner from \"../fight-scene-elements/winner/Winner\";\n//utils//\nimport { getRandom } from \"../../utils/getRandom\";\n//MDJ dialogs//\nimport { mdjWelcome, mdjTauntAttacker, mdjTauntDefender, mdjFightWillStart, mdjPotionOk, mdjPotionNok, mdjNoMorePotion, mdjDefense, mdjAlreadyDef, mdjCounterAttack } from \"../../constants/mdj\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FightScene = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    windowWidth,\n    player1,\n    player2,\n    tutoriel,\n    animationTutoriel,\n    logs,\n    playersClickOnstartGame,\n    startTv,\n    round,\n    dice,\n    attacker,\n    defender,\n    playerActionStatus,\n    canPlay,\n    winner\n  } = useSelector(store => {\n    return {\n      player1: store.playersReducer.player1,\n      player2: store.playersReducer.player2,\n      windowWidth: store.windowSizeReducer.windowWidth,\n      tutoriel: store.fightReducer.tutoriel,\n      animationTutoriel: store.animationsReducer.animationTutoriel,\n      logs: store.fightReducer.logs,\n      playersClickOnstartGame: store.fightReducer.playersClickOnstartGame,\n      startTv: store.fightReducer.startTv,\n      round: store.fightReducer.round,\n      dice: store.fightReducer.dice,\n      attacker: store.fightReducer.attacker,\n      defender: store.fightReducer.defender,\n      playerActionStatus: store.fightReducer.playerActionStatus,\n      canPlay: store.fightReducer.canPlay,\n      winner: store.fightReducer.winner\n    };\n  });\n\n  // const resetLogs = () => {\n  //   dispatch({ type: \"RESET_LOGS\" });\n  // };\n  // useEffect(() => {\n  //   dispatch({ type: \"RESET_LOGS\" });\n  // }, []);\n\n  // Fight end\n  const onEndFightButtonClick = () => {\n    dispatch({\n      type: `ANIMATION_FIGHT_START_CANCEL`\n    });\n    setTimeout(() => {\n      dispatch({\n        type: `FIGHT_END`\n      });\n    }, 300);\n  };\n\n  //mdj dialogs state rdm//\n  const [random, setRandom] = useState(null);\n  const closeTutoriel = () => {\n    setRandom(getRandom(0, 1)); //mdjWelcomeString array length = 2\n    dispatch({\n      type: \"ANIMATION_CLOSE_TUTORIEL_START\"\n    });\n    setTimeout(() => {\n      dispatch({\n        type: \"CLOSE_TUTORIEL\"\n      });\n    }, 400);\n  };\n  const startGame = () => {\n    dispatch({\n      type: \"START_TV\"\n    });\n    setTimeout(() => {\n      dispatch({\n        type: \"LAUNCH_FIGHT\"\n      });\n      //get 1 or 2 and determine who play first and all the game long.\n      dispatch({\n        type: \"UPDATE_ROUND\",\n        payload: {\n          round: getRandom(1, 2)\n        }\n      });\n    }, 500);\n  };\n\n  //DICE 20 value change//\n  const newDice = () => {\n    dispatch({\n      type: \"UPDATE_DICE\",\n      payload: {\n        value: getRandom(1, 20)\n      }\n    });\n  };\n\n  //in combat log on the bottom of the screen//\n  const newLog = string => {\n    dispatch({\n      type: \"UPDATE_LOGS\",\n      payload: {\n        newlog: string\n      }\n    });\n  };\n\n  //to define attacker and defender variables for some conditions =\"player1\" or \"player2\"  //\n  const attackerDefenderStrings = (attacker, defender) => {\n    dispatch({\n      type: \"UPDATE_ATTACKER\",\n      payload: {\n        attacker\n      }\n    });\n    dispatch({\n      type: \"UPDATE_DEFENDER\",\n      payload: {\n        defender\n      }\n    });\n  };\n\n  //defender dodge chance//\n  const dodge = defender => {\n    return dice.value <= defender.playerClass.agi ? true : false;\n  };\n\n  //after each players action round change//\n  const newRound = nbRoundAdd => {\n    dispatch({\n      type: \"CANT_PLAY\"\n    });\n    setTimeout(() => {\n      dispatch({\n        type: \"UPDATE_ROUND\",\n        payload: {\n          round: round + nbRoundAdd\n        }\n      });\n      dispatch({\n        type: \"CAN_PLAY\"\n      });\n      newDice();\n    }, 2500);\n  };\n  console.log(player1.playerClass.agi);\n\n  //round is even or odd, so modulo2 to determine who can play. If round is odd player 1, else player 2\n  //for each action we add 1 to round. No just change for 1 or 2. We need this way for capacities Cooldown.\n\n  //===SKILLS====//\n  //ATTACK SKILL//\n  const basicAttackDmg = (attacker, defender, attackerTostring, defenderTostring) => {\n    setRandom(getRandom(0, 3));\n    const dmg = Math.round(attacker.playerClass.atk / 2 * attacker.playerClass.spd / 100 + attacker.playerClass.int / 9.5 + getRandom(1, 8) + getRandom(1, 8) - defender.playerClass.armor / 2);\n    const counterAttack = Math.round(defender.playerClass.atk / 2 * defender.playerClass.spd / 100 + defender.playerClass.int / 9.5 + getRandom(1, 8) + getRandom(1, 8) + getRandom(1, 8) - attacker.playerClass.armor / 2);\n    if (dodge(defender) && !defender.playerClass.onDef) {\n      dispatch({\n        type: \"PLAYER_TAKE_DMG\",\n        payload: {\n          player: defenderTostring,\n          hitValue: 0\n        }\n      });\n      dispatch({\n        type: \"PLAYER_ACTION_STATUS_FAIL\"\n      });\n      newLog(`${defender.pseudo.toUpperCase()} esquive`);\n      newRound(1);\n    } else if (dodge(defender) && defender.playerClass.onDef) {\n      dispatch({\n        type: \"PLAYER_TAKE_DMG\",\n        payload: {\n          player: attackerTostring,\n          hitValue: counterAttack\n        }\n      });\n      dispatch({\n        type: \"PLAYER_DEFENSE_DOWN\",\n        payload: {\n          player: defenderTostring\n        }\n      });\n      dispatch({\n        type: \"PLAYER_ACTION_STATUS_COUNTER_ATTACK\"\n      });\n      newLog(`${defender.pseudo.toUpperCase()} contre attaque et inflie ${counterAttack} dommages`);\n      newRound(1);\n    } else {\n      if (defender.playerClass.onDef) {\n        dispatch({\n          type: \"PLAYER_DEFENSE_DOWN\",\n          payload: {\n            player: defenderTostring\n          }\n        });\n      }\n      dispatch({\n        type: \"PLAYER_TAKE_DMG\",\n        payload: {\n          player: defenderTostring,\n          hitValue: dmg\n        }\n      });\n      dispatch({\n        type: \"PLAYER_ACTION_STATUS_HIT\"\n      });\n      newLog(`${attacker.pseudo.toUpperCase()} inflige ${dmg} points de dégâts à ${defender.pseudo.toUpperCase()}`);\n      newRound(1);\n    }\n  };\n  const onAttackClickP1 = () => {\n    if (round % 2 === 1 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player1\", \"player2\");\n      basicAttackDmg(player1, player2, \"player1\", \"player2\");\n    }\n  };\n  const onAttackClickP2 = () => {\n    if (round % 2 === 0 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player2\", \"player1\");\n      basicAttackDmg(player2, player1, \"player2\", \"player1\");\n    }\n  };\n\n  //DEFENSE SKILL//\n  const defenseUp = (attacker, attackerToString) => {\n    if (!attacker.playerClass.onDef) {\n      setRandom(getRandom(0, 2)); //mdjDefense array length = 3.\n      dispatch({\n        type: \"PLAYER_DEFENSE_UP\",\n        payload: {\n          player: attackerToString\n        }\n      });\n      dispatch({\n        type: \"PLAYER_ACTION_STATUS_DEFENSE\"\n      });\n      newLog(`${attacker.pseudo.toUpperCase()} lève son bouclier`);\n      newRound(1);\n    } else {\n      setRandom(getRandom(0, 2)); //mdjAlreadyDef array length = 3.\n      dispatch({\n        type: \"PLAYER_ACTION_STATUS_ALREADY_DEFENSE\"\n      });\n    }\n  };\n  const onDefenseClickP1 = () => {\n    if (round % 2 === 1 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player1\", \"player2\");\n      defenseUp(player1, \"player1\");\n    }\n  };\n  const onDefenseClickP2 = () => {\n    if (round % 2 === 0 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player2\", \"player1\");\n      defenseUp(player2, \"player2\");\n    }\n  };\n\n  //ULTIM SKILL//\n  const onUltimClickP1 = () => {\n    if (round % 2 === 1 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player1\", \"player2\");\n    }\n  };\n  const onUltimClickP2 = () => {\n    if (round % 2 === 0 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player2\", \"player1\");\n    }\n  };\n\n  //POTION SKILL//\n  const potionHeal = (attacker, attackerTostring) => {\n    if (attacker.playerClass.hp >= 300) {\n      dispatch({\n        type: \"PLAYER_ACTION_STATUS_POTION_NOK\"\n      });\n      setRandom(getRandom(0, 2)); //mdjPotionNok array length = 3\n    } else if (attacker.playerClass.potions <= 0) {\n      setRandom(getRandom(0, 2)); //mdjNoMorePotion array length = 3\n      dispatch({\n        type: \"PLAYER_ACTION_STATUS_POTION_ZERO\"\n      });\n    } else {\n      dispatch({\n        type: \"PLAYER_POTION_HEAL\",\n        payload: {\n          player: attackerTostring\n        }\n      });\n      dispatch({\n        type: \"PLAYER_ACTION_STATUS_POTION_OK\"\n      });\n      setRandom(getRandom(0, 2)); //mdjPotionOk array length = 3\n      newLog(`${attacker.pseudo.toUpperCase()} utilise une potion de soin`);\n      newRound(1);\n    }\n  };\n  const onPotionClickP1 = () => {\n    if (round % 2 === 1 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player1\", \"player2\");\n      potionHeal(player1, \"player1\");\n    }\n  };\n  const onPotionClickP2 = () => {\n    if (round % 2 === 0 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player2\", \"player1\");\n      potionHeal(player2, \"player2\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [tutoriel && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mc.tutoriel,\n      children: /*#__PURE__*/_jsxDEV(Tutoriel, {\n        player1: player1,\n        player2: player2,\n        closeTutoriel: closeTutoriel,\n        animation: animationTutoriel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mc.winner,\n      children: /*#__PURE__*/_jsxDEV(Winner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: mc.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: mc.fightingZone,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: mc.top_menu,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: mc.life_bars_player1,\n            children: /*#__PURE__*/_jsxDEV(LifeBar, {\n              windowWidth: windowWidth,\n              playerNumber: 1 //determine row-reverse for player1\n              ,\n              player: player1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: mc.top_tv,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: startGame,\n              children: \"Clique ici pour commencer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: startTv ? `${mc.clean_tv} ${mc.clean_tv_on}` : mc.clean_tv\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this), playersClickOnstartGame && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: mc.myTV,\n              children: /*#__PURE__*/_jsxDEV(Tv, {\n                round: round,\n                player1: player1,\n                player2: player2\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: mc.life_bars_player2,\n            children: /*#__PURE__*/_jsxDEV(LifeBar, {\n              windowWidth: windowWidth,\n              playerNumber: 2 //determine row-reverse for player2\n              ,\n              player: player2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mc.mdj_menu,\n          children: /*#__PURE__*/_jsxDEV(MdjScene, {\n            player1: player1,\n            player2: player2,\n            attacker: attacker === \"player1\" ? player1 : player2,\n            defender: defender === \"player1\" ? player1 : player2,\n            string: !playersClickOnstartGame && random !== null ? mdjWelcome[random] : playersClickOnstartGame && playerActionStatus === \"\" ? mdjFightWillStart : playersClickOnstartGame && playerActionStatus === \"hit\" ? mdjTauntDefender[random] : playersClickOnstartGame && playerActionStatus === \"fail\" ? mdjTauntAttacker[random] : playersClickOnstartGame && playerActionStatus === \"potionOk\" ? mdjPotionOk[random] : playersClickOnstartGame && playerActionStatus === \"potionNok\" ? mdjPotionNok[random] : playersClickOnstartGame && playerActionStatus === \"potionZero\" ? mdjNoMorePotion[random] : playerActionStatus === \"defense\" ? mdjDefense[random] : playerActionStatus === \"alreadyDefense\" ? mdjAlreadyDef[random] : playerActionStatus === \"counterAttack\" ? mdjCounterAttack[random] : \"\",\n            playerActionStatus: playerActionStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: mc.fighting_menu,\n          children: /*#__PURE__*/_jsxDEV(Fight, {\n            windowWidth: windowWidth,\n            player1: player1,\n            player2: player2,\n            logs: logs,\n            onAttackClickP1: onAttackClickP1,\n            onDefenseClickP1: onDefenseClickP1,\n            onUltimClickP1: onUltimClickP1,\n            onPotionClickP1: onPotionClickP1,\n            onAttackClickP2: onAttackClickP2,\n            onDefenseClickP2: onDefenseClickP2,\n            onUltimClickP2: onUltimClickP2,\n            onPotionClickP2: onPotionClickP2,\n            round: round,\n            attacker: attacker,\n            playerActionStatus: playerActionStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(FightScene, \"2tw56zBrm78UXtkqtwoUHYpy1wo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = FightScene;\nexport default FightScene;\nvar _c;\n$RefreshReg$(_c, \"FightScene\");","map":{"version":3,"names":["mc","useDispatch","useSelector","useEffect","useState","LifeBar","MdjScene","Fight","Tv","Tutoriel","Winner","getRandom","mdjWelcome","mdjTauntAttacker","mdjTauntDefender","mdjFightWillStart","mdjPotionOk","mdjPotionNok","mdjNoMorePotion","mdjDefense","mdjAlreadyDef","mdjCounterAttack","FightScene","dispatch","windowWidth","player1","player2","tutoriel","animationTutoriel","logs","playersClickOnstartGame","startTv","round","dice","attacker","defender","playerActionStatus","canPlay","winner","store","playersReducer","windowSizeReducer","fightReducer","animationsReducer","onEndFightButtonClick","type","setTimeout","random","setRandom","closeTutoriel","startGame","payload","newDice","value","newLog","string","newlog","attackerDefenderStrings","dodge","playerClass","agi","newRound","nbRoundAdd","console","log","basicAttackDmg","attackerTostring","defenderTostring","dmg","Math","atk","spd","int","armor","counterAttack","onDef","player","hitValue","pseudo","toUpperCase","onAttackClickP1","onAttackClickP2","defenseUp","attackerToString","onDefenseClickP1","onDefenseClickP2","onUltimClickP1","onUltimClickP2","potionHeal","hp","potions","onPotionClickP1","onPotionClickP2","container","fightingZone","top_menu","life_bars_player1","top_tv","clean_tv","clean_tv_on","myTV","life_bars_player2","mdj_menu","fighting_menu"],"sources":["/Users/nicolasgrenier/Documents/Code/fighting_RPG/src/components/fight-scene/FightScene.jsx"],"sourcesContent":["import mc from \"./fight-scene.module.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\n//components//\nimport LifeBar from \"../fight-scene-elements/life-bar/LifeBar\";\nimport MdjScene from \"../fight-scene-elements/mdj-scene/MdjScene\";\nimport Fight from \"../fight-scene-elements/fight/Fight\";\nimport Tv from \"../fight-scene-elements/tv/Tv\";\nimport Tutoriel from \"../fight-scene-elements/tutoriel/Tutoriel\";\nimport Winner from \"../fight-scene-elements/winner/Winner\";\n//utils//\nimport { getRandom } from \"../../utils/getRandom\";\n//MDJ dialogs//\nimport {\n  mdjWelcome,\n  mdjTauntAttacker,\n  mdjTauntDefender,\n  mdjFightWillStart,\n  mdjPotionOk,\n  mdjPotionNok,\n  mdjNoMorePotion,\n  mdjDefense,\n  mdjAlreadyDef,\n  mdjCounterAttack,\n} from \"../../constants/mdj\";\n\nconst FightScene = () => {\n  const dispatch = useDispatch();\n\n  const {\n    windowWidth,\n    player1,\n    player2,\n    tutoriel,\n    animationTutoriel,\n    logs,\n    playersClickOnstartGame,\n    startTv,\n    round,\n    dice,\n    attacker,\n    defender,\n    playerActionStatus,\n    canPlay,\n    winner,\n  } = useSelector((store) => {\n    return {\n      player1: store.playersReducer.player1,\n      player2: store.playersReducer.player2,\n      windowWidth: store.windowSizeReducer.windowWidth,\n      tutoriel: store.fightReducer.tutoriel,\n      animationTutoriel: store.animationsReducer.animationTutoriel,\n      logs: store.fightReducer.logs,\n      playersClickOnstartGame: store.fightReducer.playersClickOnstartGame,\n      startTv: store.fightReducer.startTv,\n      round: store.fightReducer.round,\n      dice: store.fightReducer.dice,\n      attacker: store.fightReducer.attacker,\n      defender: store.fightReducer.defender,\n      playerActionStatus: store.fightReducer.playerActionStatus,\n      canPlay: store.fightReducer.canPlay,\n      winner: store.fightReducer.winner,\n    };\n  });\n\n  // const resetLogs = () => {\n  //   dispatch({ type: \"RESET_LOGS\" });\n  // };\n  // useEffect(() => {\n  //   dispatch({ type: \"RESET_LOGS\" });\n  // }, []);\n\n  // Fight end\n  const onEndFightButtonClick = () => {\n    dispatch({ type: `ANIMATION_FIGHT_START_CANCEL` });\n    setTimeout(() => {\n      dispatch({ type: `FIGHT_END` });\n    }, 300);\n  };\n\n  //mdj dialogs state rdm//\n  const [random, setRandom] = useState(null);\n\n  const closeTutoriel = () => {\n    setRandom(getRandom(0, 1)); //mdjWelcomeString array length = 2\n    dispatch({\n      type: \"ANIMATION_CLOSE_TUTORIEL_START\",\n    });\n    setTimeout(() => {\n      dispatch({ type: \"CLOSE_TUTORIEL\" });\n    }, 400);\n  };\n\n  const startGame = () => {\n    dispatch({ type: \"START_TV\" });\n    setTimeout(() => {\n      dispatch({ type: \"LAUNCH_FIGHT\" });\n      //get 1 or 2 and determine who play first and all the game long.\n      dispatch({\n        type: \"UPDATE_ROUND\",\n        payload: { round: getRandom(1, 2) },\n      });\n    }, 500);\n  };\n\n  //DICE 20 value change//\n  const newDice = () => {\n    dispatch({\n      type: \"UPDATE_DICE\",\n      payload: { value: getRandom(1, 20) },\n    });\n  };\n\n  //in combat log on the bottom of the screen//\n  const newLog = (string) => {\n    dispatch({\n      type: \"UPDATE_LOGS\",\n      payload: {\n        newlog: string,\n      },\n    });\n  };\n\n  //to define attacker and defender variables for some conditions =\"player1\" or \"player2\"  //\n  const attackerDefenderStrings = (attacker, defender) => {\n    dispatch({\n      type: \"UPDATE_ATTACKER\",\n      payload: { attacker },\n    });\n    dispatch({\n      type: \"UPDATE_DEFENDER\",\n      payload: { defender },\n    });\n  };\n\n  //defender dodge chance//\n  const dodge = (defender) => {\n    return dice.value <= defender.playerClass.agi ? true : false;\n  };\n\n  //after each players action round change//\n  const newRound = (nbRoundAdd) => {\n    dispatch({ type: \"CANT_PLAY\" });\n    setTimeout(() => {\n      dispatch({\n        type: \"UPDATE_ROUND\",\n        payload: { round: round + nbRoundAdd },\n      });\n      dispatch({ type: \"CAN_PLAY\" });\n      newDice();\n    }, 2500);\n  };\n\n  console.log(player1.playerClass.agi);\n\n  //round is even or odd, so modulo2 to determine who can play. If round is odd player 1, else player 2\n  //for each action we add 1 to round. No just change for 1 or 2. We need this way for capacities Cooldown.\n\n  //===SKILLS====//\n  //ATTACK SKILL//\n  const basicAttackDmg = (\n    attacker,\n    defender,\n    attackerTostring,\n    defenderTostring\n  ) => {\n    setRandom(getRandom(0, 3));\n    const dmg = Math.round(\n      ((attacker.playerClass.atk / 2) * attacker.playerClass.spd) / 100 +\n        attacker.playerClass.int / 9.5 +\n        getRandom(1, 8) +\n        getRandom(1, 8) -\n        defender.playerClass.armor / 2\n    );\n    const counterAttack = Math.round(\n      ((defender.playerClass.atk / 2) * defender.playerClass.spd) / 100 +\n        defender.playerClass.int / 9.5 +\n        getRandom(1, 8) +\n        getRandom(1, 8) +\n        getRandom(1, 8) -\n        attacker.playerClass.armor / 2\n    );\n    if (dodge(defender) && !defender.playerClass.onDef) {\n      dispatch({\n        type: \"PLAYER_TAKE_DMG\",\n        payload: { player: defenderTostring, hitValue: 0 },\n      });\n      dispatch({ type: \"PLAYER_ACTION_STATUS_FAIL\" });\n      newLog(`${defender.pseudo.toUpperCase()} esquive`);\n      newRound(1);\n    } else if (dodge(defender) && defender.playerClass.onDef) {\n      dispatch({\n        type: \"PLAYER_TAKE_DMG\",\n        payload: { player: attackerTostring, hitValue: counterAttack },\n      });\n      dispatch({\n        type: \"PLAYER_DEFENSE_DOWN\",\n        payload: { player: defenderTostring },\n      });\n      dispatch({ type: \"PLAYER_ACTION_STATUS_COUNTER_ATTACK\" });\n      newLog(\n        `${defender.pseudo.toUpperCase()} contre attaque et inflie ${counterAttack} dommages`\n      );\n      newRound(1);\n    } else {\n      if (defender.playerClass.onDef) {\n        dispatch({\n          type: \"PLAYER_DEFENSE_DOWN\",\n          payload: { player: defenderTostring },\n        });\n      }\n      dispatch({\n        type: \"PLAYER_TAKE_DMG\",\n        payload: { player: defenderTostring, hitValue: dmg },\n      });\n\n      dispatch({ type: \"PLAYER_ACTION_STATUS_HIT\" });\n      newLog(\n        `${attacker.pseudo.toUpperCase()} inflige ${dmg} points de dégâts à ${defender.pseudo.toUpperCase()}`\n      );\n      newRound(1);\n    }\n  };\n  const onAttackClickP1 = () => {\n    if (round % 2 === 1 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player1\", \"player2\");\n      basicAttackDmg(player1, player2, \"player1\", \"player2\");\n    }\n  };\n  const onAttackClickP2 = () => {\n    if (round % 2 === 0 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player2\", \"player1\");\n      basicAttackDmg(player2, player1, \"player2\", \"player1\");\n    }\n  };\n\n  //DEFENSE SKILL//\n  const defenseUp = (attacker, attackerToString) => {\n    if (!attacker.playerClass.onDef) {\n      setRandom(getRandom(0, 2)); //mdjDefense array length = 3.\n      dispatch({\n        type: \"PLAYER_DEFENSE_UP\",\n        payload: { player: attackerToString },\n      });\n      dispatch({ type: \"PLAYER_ACTION_STATUS_DEFENSE\" });\n      newLog(`${attacker.pseudo.toUpperCase()} lève son bouclier`);\n      newRound(1);\n    } else {\n      setRandom(getRandom(0, 2)); //mdjAlreadyDef array length = 3.\n      dispatch({ type: \"PLAYER_ACTION_STATUS_ALREADY_DEFENSE\" });\n    }\n  };\n  const onDefenseClickP1 = () => {\n    if (round % 2 === 1 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player1\", \"player2\");\n      defenseUp(player1, \"player1\");\n    }\n  };\n  const onDefenseClickP2 = () => {\n    if (round % 2 === 0 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player2\", \"player1\");\n      defenseUp(player2, \"player2\");\n    }\n  };\n\n  //ULTIM SKILL//\n  const onUltimClickP1 = () => {\n    if (round % 2 === 1 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player1\", \"player2\");\n    }\n  };\n  const onUltimClickP2 = () => {\n    if (round % 2 === 0 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player2\", \"player1\");\n    }\n  };\n\n  //POTION SKILL//\n  const potionHeal = (attacker, attackerTostring) => {\n    if (attacker.playerClass.hp >= 300) {\n      dispatch({ type: \"PLAYER_ACTION_STATUS_POTION_NOK\" });\n      setRandom(getRandom(0, 2)); //mdjPotionNok array length = 3\n    } else if (attacker.playerClass.potions <= 0) {\n      setRandom(getRandom(0, 2)); //mdjNoMorePotion array length = 3\n      dispatch({ type: \"PLAYER_ACTION_STATUS_POTION_ZERO\" });\n    } else {\n      dispatch({\n        type: \"PLAYER_POTION_HEAL\",\n        payload: { player: attackerTostring },\n      });\n      dispatch({ type: \"PLAYER_ACTION_STATUS_POTION_OK\" });\n      setRandom(getRandom(0, 2)); //mdjPotionOk array length = 3\n      newLog(`${attacker.pseudo.toUpperCase()} utilise une potion de soin`);\n      newRound(1);\n    }\n  };\n  const onPotionClickP1 = () => {\n    if (round % 2 === 1 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player1\", \"player2\");\n      potionHeal(player1, \"player1\");\n    }\n  };\n  const onPotionClickP2 = () => {\n    if (round % 2 === 0 && round > 0 && canPlay) {\n      attackerDefenderStrings(\"player2\", \"player1\");\n      potionHeal(player2, \"player2\");\n    }\n  };\n\n  return (\n    <>\n      {tutoriel && (\n        <div className={mc.tutoriel}>\n          <Tutoriel\n            player1={player1}\n            player2={player2}\n            closeTutoriel={closeTutoriel}\n            animation={animationTutoriel}\n          />\n        </div>\n      )}\n      <div className={mc.winner}>\n        <Winner />\n      </div>\n      <div className={mc.container}>\n        <div className={mc.fightingZone}>\n          <div className={mc.top_menu}>\n            <div className={mc.life_bars_player1}>\n              <LifeBar\n                windowWidth={windowWidth}\n                playerNumber={1} //determine row-reverse for player1\n                player={player1}\n              />\n            </div>\n            <div className={mc.top_tv}>\n              <button onClick={startGame}>Clique ici pour commencer</button>\n              <div\n                className={\n                  startTv ? `${mc.clean_tv} ${mc.clean_tv_on}` : mc.clean_tv\n                }\n              ></div>\n              {playersClickOnstartGame && (\n                <div className={mc.myTV}>\n                  <Tv round={round} player1={player1} player2={player2} />\n                </div>\n              )}\n            </div>\n\n            <div className={mc.life_bars_player2}>\n              <LifeBar\n                windowWidth={windowWidth}\n                playerNumber={2} //determine row-reverse for player2\n                player={player2}\n              />\n            </div>\n          </div>\n          <div className={mc.mdj_menu}>\n            <MdjScene\n              player1={player1}\n              player2={player2}\n              attacker={attacker === \"player1\" ? player1 : player2}\n              defender={defender === \"player1\" ? player1 : player2}\n              string={\n                !playersClickOnstartGame && random !== null\n                  ? mdjWelcome[random]\n                  : playersClickOnstartGame && playerActionStatus === \"\"\n                  ? mdjFightWillStart\n                  : playersClickOnstartGame && playerActionStatus === \"hit\"\n                  ? mdjTauntDefender[random]\n                  : playersClickOnstartGame && playerActionStatus === \"fail\"\n                  ? mdjTauntAttacker[random]\n                  : playersClickOnstartGame && playerActionStatus === \"potionOk\"\n                  ? mdjPotionOk[random]\n                  : playersClickOnstartGame &&\n                    playerActionStatus === \"potionNok\"\n                  ? mdjPotionNok[random]\n                  : playersClickOnstartGame &&\n                    playerActionStatus === \"potionZero\"\n                  ? mdjNoMorePotion[random]\n                  : playerActionStatus === \"defense\"\n                  ? mdjDefense[random]\n                  : playerActionStatus === \"alreadyDefense\"\n                  ? mdjAlreadyDef[random]\n                  : playerActionStatus === \"counterAttack\"\n                  ? mdjCounterAttack[random]\n                  : \"\"\n              }\n              playerActionStatus={playerActionStatus}\n            />\n          </div>\n          <div className={mc.fighting_menu}>\n            <Fight\n              windowWidth={windowWidth}\n              player1={player1}\n              player2={player2}\n              logs={logs}\n              onAttackClickP1={onAttackClickP1}\n              onDefenseClickP1={onDefenseClickP1}\n              onUltimClickP1={onUltimClickP1}\n              onPotionClickP1={onPotionClickP1}\n              onAttackClickP2={onAttackClickP2}\n              onDefenseClickP2={onDefenseClickP2}\n              onUltimClickP2={onUltimClickP2}\n              onPotionClickP2={onPotionClickP2}\n              round={round}\n              attacker={attacker}\n              playerActionStatus={playerActionStatus}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default FightScene;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}