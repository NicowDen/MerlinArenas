{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mask = void 0;\nconst Factory_1 = require(\"../Factory\");\nconst Node_1 = require(\"../Node\");\nconst Validators_1 = require(\"../Validators\");\nfunction pixelAt(idata, x, y) {\n  var idx = (y * idata.width + x) * 4;\n  var d = [];\n  d.push(idata.data[idx++], idata.data[idx++], idata.data[idx++], idata.data[idx++]);\n  return d;\n}\nfunction rgbDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2) + Math.pow(p1[2] - p2[2], 2));\n}\nfunction rgbMean(pTab) {\n  var m = [0, 0, 0];\n  for (var i = 0; i < pTab.length; i++) {\n    m[0] += pTab[i][0];\n    m[1] += pTab[i][1];\n    m[2] += pTab[i][2];\n  }\n  m[0] /= pTab.length;\n  m[1] /= pTab.length;\n  m[2] /= pTab.length;\n  return m;\n}\nfunction backgroundMask(idata, threshold) {\n  var rgbv_no = pixelAt(idata, 0, 0);\n  var rgbv_ne = pixelAt(idata, idata.width - 1, 0);\n  var rgbv_so = pixelAt(idata, 0, idata.height - 1);\n  var rgbv_se = pixelAt(idata, idata.width - 1, idata.height - 1);\n  var thres = threshold || 10;\n  if (rgbDistance(rgbv_no, rgbv_ne) < thres && rgbDistance(rgbv_ne, rgbv_se) < thres && rgbDistance(rgbv_se, rgbv_so) < thres && rgbDistance(rgbv_so, rgbv_no) < thres) {\n    var mean = rgbMean([rgbv_ne, rgbv_no, rgbv_se, rgbv_so]);\n    var mask = [];\n    for (var i = 0; i < idata.width * idata.height; i++) {\n      var d = rgbDistance(mean, [idata.data[i * 4], idata.data[i * 4 + 1], idata.data[i * 4 + 2]]);\n      mask[i] = d < thres ? 0 : 255;\n    }\n    return mask;\n  }\n}\nfunction applyMask(idata, mask) {\n  for (var i = 0; i < idata.width * idata.height; i++) {\n    idata.data[4 * i + 3] = mask[i];\n  }\n}\nfunction erodeMask(mask, sw, sh) {\n  var weights = [1, 1, 1, 1, 0, 1, 1, 1, 1];\n  var side = Math.round(Math.sqrt(weights.length));\n  var halfSide = Math.floor(side / 2);\n  var maskResult = [];\n  for (var y = 0; y < sh; y++) {\n    for (var x = 0; x < sw; x++) {\n      var so = y * sw + x;\n      var a = 0;\n      for (var cy = 0; cy < side; cy++) {\n        for (var cx = 0; cx < side; cx++) {\n          var scy = y + cy - halfSide;\n          var scx = x + cx - halfSide;\n          if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n            var srcOff = scy * sw + scx;\n            var wt = weights[cy * side + cx];\n            a += mask[srcOff] * wt;\n          }\n        }\n      }\n      maskResult[so] = a === 255 * 8 ? 255 : 0;\n    }\n  }\n  return maskResult;\n}\nfunction dilateMask(mask, sw, sh) {\n  var weights = [1, 1, 1, 1, 1, 1, 1, 1, 1];\n  var side = Math.round(Math.sqrt(weights.length));\n  var halfSide = Math.floor(side / 2);\n  var maskResult = [];\n  for (var y = 0; y < sh; y++) {\n    for (var x = 0; x < sw; x++) {\n      var so = y * sw + x;\n      var a = 0;\n      for (var cy = 0; cy < side; cy++) {\n        for (var cx = 0; cx < side; cx++) {\n          var scy = y + cy - halfSide;\n          var scx = x + cx - halfSide;\n          if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n            var srcOff = scy * sw + scx;\n            var wt = weights[cy * side + cx];\n            a += mask[srcOff] * wt;\n          }\n        }\n      }\n      maskResult[so] = a >= 255 * 4 ? 255 : 0;\n    }\n  }\n  return maskResult;\n}\nfunction smoothEdgeMask(mask, sw, sh) {\n  var weights = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];\n  var side = Math.round(Math.sqrt(weights.length));\n  var halfSide = Math.floor(side / 2);\n  var maskResult = [];\n  for (var y = 0; y < sh; y++) {\n    for (var x = 0; x < sw; x++) {\n      var so = y * sw + x;\n      var a = 0;\n      for (var cy = 0; cy < side; cy++) {\n        for (var cx = 0; cx < side; cx++) {\n          var scy = y + cy - halfSide;\n          var scx = x + cx - halfSide;\n          if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n            var srcOff = scy * sw + scx;\n            var wt = weights[cy * side + cx];\n            a += mask[srcOff] * wt;\n          }\n        }\n      }\n      maskResult[so] = a;\n    }\n  }\n  return maskResult;\n}\nconst Mask = function (imageData) {\n  var threshold = this.threshold(),\n    mask = backgroundMask(imageData, threshold);\n  if (mask) {\n    mask = erodeMask(mask, imageData.width, imageData.height);\n    mask = dilateMask(mask, imageData.width, imageData.height);\n    mask = smoothEdgeMask(mask, imageData.width, imageData.height);\n    applyMask(imageData, mask);\n  }\n  return imageData;\n};\nexports.Mask = Mask;\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);","map":{"version":3,"names":["Object","defineProperty","exports","value","Mask","Factory_1","require","Node_1","Validators_1","pixelAt","idata","x","y","idx","width","d","push","data","rgbDistance","p1","p2","Math","sqrt","pow","rgbMean","pTab","m","i","length","backgroundMask","threshold","rgbv_no","rgbv_ne","rgbv_so","height","rgbv_se","thres","mean","mask","applyMask","erodeMask","sw","sh","weights","side","round","halfSide","floor","maskResult","so","a","cy","cx","scy","scx","srcOff","wt","dilateMask","smoothEdgeMask","imageData","Factory","addGetterSetter","Node","getNumberValidator","afterSetFilter"],"sources":["/Users/nicolasgrenier/Documents/Code/fighting_RPG/node_modules/konva/lib/filters/Mask.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mask = void 0;\nconst Factory_1 = require(\"../Factory\");\nconst Node_1 = require(\"../Node\");\nconst Validators_1 = require(\"../Validators\");\nfunction pixelAt(idata, x, y) {\n    var idx = (y * idata.width + x) * 4;\n    var d = [];\n    d.push(idata.data[idx++], idata.data[idx++], idata.data[idx++], idata.data[idx++]);\n    return d;\n}\nfunction rgbDistance(p1, p2) {\n    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) +\n        Math.pow(p1[1] - p2[1], 2) +\n        Math.pow(p1[2] - p2[2], 2));\n}\nfunction rgbMean(pTab) {\n    var m = [0, 0, 0];\n    for (var i = 0; i < pTab.length; i++) {\n        m[0] += pTab[i][0];\n        m[1] += pTab[i][1];\n        m[2] += pTab[i][2];\n    }\n    m[0] /= pTab.length;\n    m[1] /= pTab.length;\n    m[2] /= pTab.length;\n    return m;\n}\nfunction backgroundMask(idata, threshold) {\n    var rgbv_no = pixelAt(idata, 0, 0);\n    var rgbv_ne = pixelAt(idata, idata.width - 1, 0);\n    var rgbv_so = pixelAt(idata, 0, idata.height - 1);\n    var rgbv_se = pixelAt(idata, idata.width - 1, idata.height - 1);\n    var thres = threshold || 10;\n    if (rgbDistance(rgbv_no, rgbv_ne) < thres &&\n        rgbDistance(rgbv_ne, rgbv_se) < thres &&\n        rgbDistance(rgbv_se, rgbv_so) < thres &&\n        rgbDistance(rgbv_so, rgbv_no) < thres) {\n        var mean = rgbMean([rgbv_ne, rgbv_no, rgbv_se, rgbv_so]);\n        var mask = [];\n        for (var i = 0; i < idata.width * idata.height; i++) {\n            var d = rgbDistance(mean, [\n                idata.data[i * 4],\n                idata.data[i * 4 + 1],\n                idata.data[i * 4 + 2],\n            ]);\n            mask[i] = d < thres ? 0 : 255;\n        }\n        return mask;\n    }\n}\nfunction applyMask(idata, mask) {\n    for (var i = 0; i < idata.width * idata.height; i++) {\n        idata.data[4 * i + 3] = mask[i];\n    }\n}\nfunction erodeMask(mask, sw, sh) {\n    var weights = [1, 1, 1, 1, 0, 1, 1, 1, 1];\n    var side = Math.round(Math.sqrt(weights.length));\n    var halfSide = Math.floor(side / 2);\n    var maskResult = [];\n    for (var y = 0; y < sh; y++) {\n        for (var x = 0; x < sw; x++) {\n            var so = y * sw + x;\n            var a = 0;\n            for (var cy = 0; cy < side; cy++) {\n                for (var cx = 0; cx < side; cx++) {\n                    var scy = y + cy - halfSide;\n                    var scx = x + cx - halfSide;\n                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n                        var srcOff = scy * sw + scx;\n                        var wt = weights[cy * side + cx];\n                        a += mask[srcOff] * wt;\n                    }\n                }\n            }\n            maskResult[so] = a === 255 * 8 ? 255 : 0;\n        }\n    }\n    return maskResult;\n}\nfunction dilateMask(mask, sw, sh) {\n    var weights = [1, 1, 1, 1, 1, 1, 1, 1, 1];\n    var side = Math.round(Math.sqrt(weights.length));\n    var halfSide = Math.floor(side / 2);\n    var maskResult = [];\n    for (var y = 0; y < sh; y++) {\n        for (var x = 0; x < sw; x++) {\n            var so = y * sw + x;\n            var a = 0;\n            for (var cy = 0; cy < side; cy++) {\n                for (var cx = 0; cx < side; cx++) {\n                    var scy = y + cy - halfSide;\n                    var scx = x + cx - halfSide;\n                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n                        var srcOff = scy * sw + scx;\n                        var wt = weights[cy * side + cx];\n                        a += mask[srcOff] * wt;\n                    }\n                }\n            }\n            maskResult[so] = a >= 255 * 4 ? 255 : 0;\n        }\n    }\n    return maskResult;\n}\nfunction smoothEdgeMask(mask, sw, sh) {\n    var weights = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];\n    var side = Math.round(Math.sqrt(weights.length));\n    var halfSide = Math.floor(side / 2);\n    var maskResult = [];\n    for (var y = 0; y < sh; y++) {\n        for (var x = 0; x < sw; x++) {\n            var so = y * sw + x;\n            var a = 0;\n            for (var cy = 0; cy < side; cy++) {\n                for (var cx = 0; cx < side; cx++) {\n                    var scy = y + cy - halfSide;\n                    var scx = x + cx - halfSide;\n                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n                        var srcOff = scy * sw + scx;\n                        var wt = weights[cy * side + cx];\n                        a += mask[srcOff] * wt;\n                    }\n                }\n            }\n            maskResult[so] = a;\n        }\n    }\n    return maskResult;\n}\nconst Mask = function (imageData) {\n    var threshold = this.threshold(), mask = backgroundMask(imageData, threshold);\n    if (mask) {\n        mask = erodeMask(mask, imageData.width, imageData.height);\n        mask = dilateMask(mask, imageData.width, imageData.height);\n        mask = smoothEdgeMask(mask, imageData.width, imageData.height);\n        applyMask(imageData, mask);\n    }\n    return imageData;\n};\nexports.Mask = Mask;\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}