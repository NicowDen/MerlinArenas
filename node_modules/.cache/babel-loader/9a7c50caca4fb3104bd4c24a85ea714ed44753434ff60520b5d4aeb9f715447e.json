{"ast":null,"code":"/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  module.exports = function $$$reconciler($$$hostConfig) {\n    var exports = {};\n    'use strict';\n    var React = require('react');\n    var Scheduler = require('scheduler');\n    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    var suppressWarning = false;\n    function setSuppressWarning(newSuppressWarning) {\n      {\n        suppressWarning = newSuppressWarning;\n      }\n    } // In DEV, calls to console.warn and console.error get replaced\n    // by calls to these methods by a Babel plugin.\n    //\n    // In PROD (or in packages without access to React internals),\n    // they are left as they are instead.\n\n    function warn(format) {\n      {\n        if (!suppressWarning) {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n          printWarning('warn', format, args);\n        }\n      }\n    }\n    function error(format) {\n      {\n        if (!suppressWarning) {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n          printWarning('error', format, args);\n        }\n      }\n    }\n    function printWarning(level, format, args) {\n      // When changing this logic, you might want to also\n      // update consoleWithStackDev.www.js as well.\n      {\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n        if (stack !== '') {\n          format += '%s';\n          args = args.concat([stack]);\n        } // eslint-disable-next-line react-internal/safe-string-coercion\n\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        }); // Careful: RN currently depends on this prefix\n\n        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n        // breaks IE9: https://github.com/facebook/react/issues/13610\n        // eslint-disable-next-line react-internal/no-production-logging\n\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n    var assign = Object.assign;\n\n    /**\n     * `ReactInstanceMap` maintains a mapping from a public facing stateful\n     * instance (key) and the internal representation (value). This allows public\n     * methods to accept the user facing instance as an argument and map them back\n     * to internal methods.\n     *\n     * Note that this module is currently shared and assumed to be stateless.\n     * If this becomes an actual Map, that will break.\n     */\n    function get(key) {\n      return key._reactInternals;\n    }\n    function set(key, value) {\n      key._reactInternals = value;\n    }\n\n    // -----------------------------------------------------------------------------\n    // the react-reconciler package.\n\n    var enableNewReconciler = false; // Support legacy Primer support on internal FB www\n\n    var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\n    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\n    var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\n    var warnAboutStringRefs = false; // -----------------------------------------------------------------------------\n    // Debugging and DevTools\n    // -----------------------------------------------------------------------------\n    // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n    // for an experimental timeline tool.\n\n    var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n\n    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n\n    var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\n    var FunctionComponent = 0;\n    var ClassComponent = 1;\n    var IndeterminateComponent = 2; // Before we know whether it is function or class\n\n    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\n    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\n    var HostComponent = 5;\n    var HostText = 6;\n    var Fragment = 7;\n    var Mode = 8;\n    var ContextConsumer = 9;\n    var ContextProvider = 10;\n    var ForwardRef = 11;\n    var Profiler = 12;\n    var SuspenseComponent = 13;\n    var MemoComponent = 14;\n    var SimpleMemoComponent = 15;\n    var LazyComponent = 16;\n    var IncompleteClassComponent = 17;\n    var DehydratedFragment = 18;\n    var SuspenseListComponent = 19;\n    var ScopeComponent = 21;\n    var OffscreenComponent = 22;\n    var LegacyHiddenComponent = 23;\n    var CacheComponent = 24;\n    var TracingMarkerComponent = 25;\n\n    // ATTENTION\n    // When adding new symbols to this file,\n    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n    // The Symbol used to tag the ReactElement-like types.\n    var REACT_ELEMENT_TYPE = Symbol.for('react.element');\n    var REACT_PORTAL_TYPE = Symbol.for('react.portal');\n    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');\n    var REACT_CONTEXT_TYPE = Symbol.for('react.context');\n    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n    var REACT_MEMO_TYPE = Symbol.for('react.memo');\n    var REACT_LAZY_TYPE = Symbol.for('react.lazy');\n    var REACT_SCOPE_TYPE = Symbol.for('react.scope');\n    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\n    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\n    var REACT_CACHE_TYPE = Symbol.for('react.cache');\n    var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = '@@iterator';\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== 'object') {\n        return null;\n      }\n      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n      if (typeof maybeIterator === 'function') {\n        return maybeIterator;\n      }\n      return null;\n    }\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var displayName = outerType.displayName;\n      if (displayName) {\n        return displayName;\n      }\n      var functionName = innerType.displayName || innerType.name || '';\n      return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n    } // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n    function getContextName(type) {\n      return type.displayName || 'Context';\n    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n    function getComponentNameFromType(type) {\n      if (type == null) {\n        // Host root, text node or just invalid type.\n        return null;\n      }\n      {\n        if (typeof type.tag === 'number') {\n          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n        }\n      }\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return 'Fragment';\n        case REACT_PORTAL_TYPE:\n          return 'Portal';\n        case REACT_PROFILER_TYPE:\n          return 'Profiler';\n        case REACT_STRICT_MODE_TYPE:\n          return 'StrictMode';\n        case REACT_SUSPENSE_TYPE:\n          return 'Suspense';\n        case REACT_SUSPENSE_LIST_TYPE:\n          return 'SuspenseList';\n      }\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_CONTEXT_TYPE:\n            var context = type;\n            return getContextName(context) + '.Consumer';\n          case REACT_PROVIDER_TYPE:\n            var provider = type;\n            return getContextName(provider._context) + '.Provider';\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName(type, type.render, 'ForwardRef');\n          case REACT_MEMO_TYPE:\n            var outerName = type.displayName || null;\n            if (outerName !== null) {\n              return outerName;\n            }\n            return getComponentNameFromType(type.type) || 'Memo';\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              try {\n                return getComponentNameFromType(init(payload));\n              } catch (x) {\n                return null;\n              }\n            }\n\n          // eslint-disable-next-line no-fallthrough\n        }\n      }\n\n      return null;\n    }\n    function getWrappedName$1(outerType, innerType, wrapperName) {\n      var functionName = innerType.displayName || innerType.name || '';\n      return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n    } // Keep in sync with shared/getComponentNameFromType\n\n    function getContextName$1(type) {\n      return type.displayName || 'Context';\n    }\n    function getComponentNameFromFiber(fiber) {\n      var tag = fiber.tag,\n        type = fiber.type;\n      switch (tag) {\n        case CacheComponent:\n          return 'Cache';\n        case ContextConsumer:\n          var context = type;\n          return getContextName$1(context) + '.Consumer';\n        case ContextProvider:\n          var provider = type;\n          return getContextName$1(provider._context) + '.Provider';\n        case DehydratedFragment:\n          return 'DehydratedFragment';\n        case ForwardRef:\n          return getWrappedName$1(type, type.render, 'ForwardRef');\n        case Fragment:\n          return 'Fragment';\n        case HostComponent:\n          // Host component type is the display name (e.g. \"div\", \"View\")\n          return type;\n        case HostPortal:\n          return 'Portal';\n        case HostRoot:\n          return 'Root';\n        case HostText:\n          return 'Text';\n        case LazyComponent:\n          // Name comes from the type in this case; we don't have a tag.\n          return getComponentNameFromType(type);\n        case Mode:\n          if (type === REACT_STRICT_MODE_TYPE) {\n            // Don't be less specific than shared/getComponentNameFromType\n            return 'StrictMode';\n          }\n          return 'Mode';\n        case OffscreenComponent:\n          return 'Offscreen';\n        case Profiler:\n          return 'Profiler';\n        case ScopeComponent:\n          return 'Scope';\n        case SuspenseComponent:\n          return 'Suspense';\n        case SuspenseListComponent:\n          return 'SuspenseList';\n        case TracingMarkerComponent:\n          return 'TracingMarker';\n        // The display name for this tags come from the user-provided type:\n\n        case ClassComponent:\n        case FunctionComponent:\n        case IncompleteClassComponent:\n        case IndeterminateComponent:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          if (typeof type === 'function') {\n            return type.displayName || type.name || null;\n          }\n          if (typeof type === 'string') {\n            return type;\n          }\n          break;\n      }\n      return null;\n    }\n\n    // Don't change these two values. They're used by React Dev Tools.\n    var NoFlags = /*                      */\n    0;\n    var PerformedWork = /*                */\n    1; // You can change the rest (and add more).\n\n    var Placement = /*                    */\n    2;\n    var Update = /*                       */\n    4;\n    var ChildDeletion = /*                */\n    16;\n    var ContentReset = /*                 */\n    32;\n    var Callback = /*                     */\n    64;\n    var DidCapture = /*                   */\n    128;\n    var ForceClientRender = /*            */\n    256;\n    var Ref = /*                          */\n    512;\n    var Snapshot = /*                     */\n    1024;\n    var Passive = /*                      */\n    2048;\n    var Hydrating = /*                    */\n    4096;\n    var Visibility = /*                   */\n    8192;\n    var StoreConsistency = /*             */\n    16384;\n    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\n    var HostEffectMask = /*               */\n    32767; // These are not really side effects, but we still reuse this field.\n\n    var Incomplete = /*                   */\n    32768;\n    var ShouldCapture = /*                */\n    65536;\n    var ForceUpdateForLegacySuspense = /* */\n    131072;\n    var Forked = /*                       */\n    1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n    // This enables us to defer more work in the unmount case,\n    // since we can defer traversing the tree during layout to look for Passive effects,\n    // and instead rely on the static flag as a signal that there may be cleanup work.\n\n    var RefStatic = /*                    */\n    2097152;\n    var LayoutStatic = /*                 */\n    4194304;\n    var PassiveStatic = /*                */\n    8388608; // These flags allow us to traverse to fibers that have effects on mount\n    // without traversing the entire tree after every commit for\n    // double invoking\n\n    var MountLayoutDev = /*               */\n    16777216;\n    var MountPassiveDev = /*              */\n    33554432; // Groups of flags that are used in the commit phase to skip over trees that\n    // don't contain effects, by checking subtreeFlags.\n\n    var BeforeMutationMask =\n    // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n    // flag logic (see #20043)\n    Update | Snapshot | 0;\n    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\n    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\n    var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n    // This allows certain concepts to persist without recalculating them,\n    // e.g. whether a subtree contains passive effects or portals.\n\n    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n    function getNearestMountedFiber(fiber) {\n      var node = fiber;\n      var nearestMounted = fiber;\n      if (!fiber.alternate) {\n        // If there is no alternate, this might be a new tree that isn't inserted\n        // yet. If it is, then it will have a pending insertion effect on it.\n        var nextNode = node;\n        do {\n          node = nextNode;\n          if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n            // This is an insertion or in-progress hydration. The nearest possible\n            // mounted fiber is the parent but we need to continue to figure out\n            // if that one is still mounted.\n            nearestMounted = node.return;\n          }\n          nextNode = node.return;\n        } while (nextNode);\n      } else {\n        while (node.return) {\n          node = node.return;\n        }\n      }\n      if (node.tag === HostRoot) {\n        // TODO: Check if this was a nested HostRoot when used with\n        // renderContainerIntoSubtree.\n        return nearestMounted;\n      } // If we didn't hit the root, that means that we're in an disconnected tree\n      // that has been unmounted.\n\n      return null;\n    }\n    function isFiberMounted(fiber) {\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n    function isMounted(component) {\n      {\n        var owner = ReactCurrentOwner.current;\n        if (owner !== null && owner.tag === ClassComponent) {\n          var ownerFiber = owner;\n          var instance = ownerFiber.stateNode;\n          if (!instance._warnedAboutRefsInRender) {\n            error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n          }\n          instance._warnedAboutRefsInRender = true;\n        }\n      }\n      var fiber = get(component);\n      if (!fiber) {\n        return false;\n      }\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n    function assertIsMounted(fiber) {\n      if (getNearestMountedFiber(fiber) !== fiber) {\n        throw new Error('Unable to find node on an unmounted component.');\n      }\n    }\n    function findCurrentFiberUsingSlowPath(fiber) {\n      var alternate = fiber.alternate;\n      if (!alternate) {\n        // If there is no alternate, then we only need to check if it is mounted.\n        var nearestMounted = getNearestMountedFiber(fiber);\n        if (nearestMounted === null) {\n          throw new Error('Unable to find node on an unmounted component.');\n        }\n        if (nearestMounted !== fiber) {\n          return null;\n        }\n        return fiber;\n      } // If we have two possible branches, we'll walk backwards up to the root\n      // to see what path the root points to. On the way we may hit one of the\n      // special cases and we'll deal with them.\n\n      var a = fiber;\n      var b = alternate;\n      while (true) {\n        var parentA = a.return;\n        if (parentA === null) {\n          // We're at the root.\n          break;\n        }\n        var parentB = parentA.alternate;\n        if (parentB === null) {\n          // There is no alternate. This is an unusual case. Currently, it only\n          // happens when a Suspense component is hidden. An extra fragment fiber\n          // is inserted in between the Suspense fiber and its children. Skip\n          // over this extra fragment fiber and proceed to the next parent.\n          var nextParent = parentA.return;\n          if (nextParent !== null) {\n            a = b = nextParent;\n            continue;\n          } // If there's no parent, we're at the root.\n\n          break;\n        } // If both copies of the parent fiber point to the same child, we can\n        // assume that the child is current. This happens when we bailout on low\n        // priority: the bailed out fiber's child reuses the current child.\n\n        if (parentA.child === parentB.child) {\n          var child = parentA.child;\n          while (child) {\n            if (child === a) {\n              // We've determined that A is the current branch.\n              assertIsMounted(parentA);\n              return fiber;\n            }\n            if (child === b) {\n              // We've determined that B is the current branch.\n              assertIsMounted(parentA);\n              return alternate;\n            }\n            child = child.sibling;\n          } // We should never have an alternate for any mounting node. So the only\n          // way this could possibly happen is if this was unmounted, if at all.\n\n          throw new Error('Unable to find node on an unmounted component.');\n        }\n        if (a.return !== b.return) {\n          // The return pointer of A and the return pointer of B point to different\n          // fibers. We assume that return pointers never criss-cross, so A must\n          // belong to the child set of A.return, and B must belong to the child\n          // set of B.return.\n          a = parentA;\n          b = parentB;\n        } else {\n          // The return pointers point to the same fiber. We'll have to use the\n          // default, slow path: scan the child sets of each parent alternate to see\n          // which child belongs to which set.\n          //\n          // Search parent A's child set\n          var didFindChild = false;\n          var _child = parentA.child;\n          while (_child) {\n            if (_child === a) {\n              didFindChild = true;\n              a = parentA;\n              b = parentB;\n              break;\n            }\n            if (_child === b) {\n              didFindChild = true;\n              b = parentA;\n              a = parentB;\n              break;\n            }\n            _child = _child.sibling;\n          }\n          if (!didFindChild) {\n            // Search parent B's child set\n            _child = parentB.child;\n            while (_child) {\n              if (_child === a) {\n                didFindChild = true;\n                a = parentB;\n                b = parentA;\n                break;\n              }\n              if (_child === b) {\n                didFindChild = true;\n                b = parentB;\n                a = parentA;\n                break;\n              }\n              _child = _child.sibling;\n            }\n            if (!didFindChild) {\n              throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n            }\n          }\n        }\n        if (a.alternate !== b) {\n          throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n      } // If the root is not a host container, we're in a disconnected tree. I.e.\n      // unmounted.\n\n      if (a.tag !== HostRoot) {\n        throw new Error('Unable to find node on an unmounted component.');\n      }\n      if (a.stateNode.current === a) {\n        // We've determined that A is the current branch.\n        return fiber;\n      } // Otherwise B has to be current branch.\n\n      return alternate;\n    }\n    function findCurrentHostFiber(parent) {\n      var currentParent = findCurrentFiberUsingSlowPath(parent);\n      return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n    }\n    function findCurrentHostFiberImpl(node) {\n      // Next we'll drill down this component to find the first HostComponent/Text.\n      if (node.tag === HostComponent || node.tag === HostText) {\n        return node;\n      }\n      var child = node.child;\n      while (child !== null) {\n        var match = findCurrentHostFiberImpl(child);\n        if (match !== null) {\n          return match;\n        }\n        child = child.sibling;\n      }\n      return null;\n    }\n    function findCurrentHostFiberWithNoPortals(parent) {\n      var currentParent = findCurrentFiberUsingSlowPath(parent);\n      return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n    }\n    function findCurrentHostFiberWithNoPortalsImpl(node) {\n      // Next we'll drill down this component to find the first HostComponent/Text.\n      if (node.tag === HostComponent || node.tag === HostText) {\n        return node;\n      }\n      var child = node.child;\n      while (child !== null) {\n        if (child.tag !== HostPortal) {\n          var match = findCurrentHostFiberWithNoPortalsImpl(child);\n          if (match !== null) {\n            return match;\n          }\n        }\n        child = child.sibling;\n      }\n      return null;\n    }\n    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n    function isArray(a) {\n      return isArrayImpl(a);\n    }\n\n    // This is a host config that's used for the `react-reconciler` package on npm.\n    // It is only used by third-party renderers.\n    //\n    // Its API lets you pass the host config as an argument.\n    // However, inside the `react-reconciler` we treat host config as a module.\n    // This file is a shim between two worlds.\n    //\n    // It works because the `react-reconciler` bundle is wrapped in something like:\n    //\n    // module.exports = function ($$$config) {\n    //   /* reconciler code */\n    // }\n    //\n    // So `$$$config` looks like a global variable, but it's\n    // really an argument to a top-level wrapping function.\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    var getPublicInstance = $$$hostConfig.getPublicInstance;\n    var getRootHostContext = $$$hostConfig.getRootHostContext;\n    var getChildHostContext = $$$hostConfig.getChildHostContext;\n    var prepareForCommit = $$$hostConfig.prepareForCommit;\n    var resetAfterCommit = $$$hostConfig.resetAfterCommit;\n    var createInstance = $$$hostConfig.createInstance;\n    var appendInitialChild = $$$hostConfig.appendInitialChild;\n    var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\n    var prepareUpdate = $$$hostConfig.prepareUpdate;\n    var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\n    var createTextInstance = $$$hostConfig.createTextInstance;\n    var scheduleTimeout = $$$hostConfig.scheduleTimeout;\n    var cancelTimeout = $$$hostConfig.cancelTimeout;\n    var noTimeout = $$$hostConfig.noTimeout;\n    var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\n    var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\n    var supportsMutation = $$$hostConfig.supportsMutation;\n    var supportsPersistence = $$$hostConfig.supportsPersistence;\n    var supportsHydration = $$$hostConfig.supportsHydration;\n    var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\n    var beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;\n    var afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;\n    var preparePortalMount = $$$hostConfig.preparePortalMount;\n    var prepareScopeUpdate = $$$hostConfig.prepareScopeUpdate;\n    var getInstanceFromScope = $$$hostConfig.getInstanceFromScope;\n    var getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\n    var detachDeletedInstance = $$$hostConfig.detachDeletedInstance; // -------------------\n    //      Microtasks\n    //     (optional)\n    // -------------------\n\n    var supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\n    var scheduleMicrotask = $$$hostConfig.scheduleMicrotask; // -------------------\n    //      Test selectors\n    //     (optional)\n    // -------------------\n\n    var supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\n    var findFiberRoot = $$$hostConfig.findFiberRoot;\n    var getBoundingRect = $$$hostConfig.getBoundingRect;\n    var getTextContent = $$$hostConfig.getTextContent;\n    var isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\n    var matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\n    var setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\n    var setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------\n    //      Mutation\n    //     (optional)\n    // -------------------\n\n    var appendChild = $$$hostConfig.appendChild;\n    var appendChildToContainer = $$$hostConfig.appendChildToContainer;\n    var commitTextUpdate = $$$hostConfig.commitTextUpdate;\n    var commitMount = $$$hostConfig.commitMount;\n    var commitUpdate = $$$hostConfig.commitUpdate;\n    var insertBefore = $$$hostConfig.insertBefore;\n    var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\n    var removeChild = $$$hostConfig.removeChild;\n    var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\n    var resetTextContent = $$$hostConfig.resetTextContent;\n    var hideInstance = $$$hostConfig.hideInstance;\n    var hideTextInstance = $$$hostConfig.hideTextInstance;\n    var unhideInstance = $$$hostConfig.unhideInstance;\n    var unhideTextInstance = $$$hostConfig.unhideTextInstance;\n    var clearContainer = $$$hostConfig.clearContainer; // -------------------\n    //     Persistence\n    //     (optional)\n    // -------------------\n\n    var cloneInstance = $$$hostConfig.cloneInstance;\n    var createContainerChildSet = $$$hostConfig.createContainerChildSet;\n    var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\n    var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\n    var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\n    var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\n    var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance; // -------------------\n    //     Hydration\n    //     (optional)\n    // -------------------\n\n    var canHydrateInstance = $$$hostConfig.canHydrateInstance;\n    var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\n    var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;\n    var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;\n    var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;\n    var getSuspenseInstanceFallbackErrorDetails = $$$hostConfig.getSuspenseInstanceFallbackErrorDetails;\n    var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;\n    var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\n    var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\n    var getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;\n    var getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\n    var hydrateInstance = $$$hostConfig.hydrateInstance;\n    var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\n    var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\n    var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\n    var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\n    var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;\n    var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\n    var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;\n    var shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;\n    var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\n    var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\n    var didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;\n    var didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\n    var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\n    var didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\n    var didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\n    var didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\n    var didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\n    var didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\n    var didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\n    var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\n    var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\n    var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;\n    var errorHydratingContainer = $$$hostConfig.errorHydratingContainer;\n\n    // Helpers to patch console.logs to avoid logging during side-effect free\n    // replaying on render function. This currently only patches the object\n    // lazily which won't cover if the log function was extracted eagerly.\n    // We could also eagerly patch the method.\n    var disabledDepth = 0;\n    var prevLog;\n    var prevInfo;\n    var prevWarn;\n    var prevError;\n    var prevGroup;\n    var prevGroupCollapsed;\n    var prevGroupEnd;\n    function disabledLog() {}\n    disabledLog.__reactDisabledLog = true;\n    function disableLogs() {\n      {\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          prevLog = console.log;\n          prevInfo = console.info;\n          prevWarn = console.warn;\n          prevError = console.error;\n          prevGroup = console.group;\n          prevGroupCollapsed = console.groupCollapsed;\n          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n          var props = {\n            configurable: true,\n            enumerable: true,\n            value: disabledLog,\n            writable: true\n          }; // $FlowFixMe Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            info: props,\n            log: props,\n            warn: props,\n            error: props,\n            group: props,\n            groupCollapsed: props,\n            groupEnd: props\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        disabledDepth++;\n      }\n    }\n    function reenableLogs() {\n      {\n        disabledDepth--;\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          var props = {\n            configurable: true,\n            enumerable: true,\n            writable: true\n          }; // $FlowFixMe Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            log: assign({}, props, {\n              value: prevLog\n            }),\n            info: assign({}, props, {\n              value: prevInfo\n            }),\n            warn: assign({}, props, {\n              value: prevWarn\n            }),\n            error: assign({}, props, {\n              value: prevError\n            }),\n            group: assign({}, props, {\n              value: prevGroup\n            }),\n            groupCollapsed: assign({}, props, {\n              value: prevGroupCollapsed\n            }),\n            groupEnd: assign({}, props, {\n              value: prevGroupEnd\n            })\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        if (disabledDepth < 0) {\n          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n        }\n      }\n    }\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n    var prefix;\n    function describeBuiltInComponentFrame(name, source, ownerFn) {\n      {\n        if (prefix === undefined) {\n          // Extract the VM specific prefix used by each line.\n          try {\n            throw Error();\n          } catch (x) {\n            var match = x.stack.trim().match(/\\n( *(at )?)/);\n            prefix = match && match[1] || '';\n          }\n        } // We use the prefix to ensure our stacks line up with native stack frames.\n\n        return '\\n' + prefix + name;\n      }\n    }\n    var reentry = false;\n    var componentFrameCache;\n    {\n      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n      componentFrameCache = new PossiblyWeakMap();\n    }\n    function describeNativeComponentFrame(fn, construct) {\n      // If something asked for a stack inside a fake render, it should get ignored.\n      if (!fn || reentry) {\n        return '';\n      }\n      {\n        var frame = componentFrameCache.get(fn);\n        if (frame !== undefined) {\n          return frame;\n        }\n      }\n      var control;\n      reentry = true;\n      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n      Error.prepareStackTrace = undefined;\n      var previousDispatcher;\n      {\n        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n        // for warnings.\n\n        ReactCurrentDispatcher.current = null;\n        disableLogs();\n      }\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            }\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          }\n          fn();\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          // This extracts the first frame from the sample that isn't also in the control.\n          // Skipping one frame that we assume is the frame that calls the two.\n          var sampleLines = sample.stack.split('\\n');\n          var controlLines = control.stack.split('\\n');\n          var s = sampleLines.length - 1;\n          var c = controlLines.length - 1;\n          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n            // We expect at least one stack frame to be shared.\n            // Typically this will be the root most one. However, stack frames may be\n            // cut off due to maximum stack limits. In this case, one maybe cut off\n            // earlier than the other. We assume that the sample is longer or the same\n            // and there for cut off earlier. So we should find the root most frame in\n            // the sample somewhere in the control.\n            c--;\n          }\n          for (; s >= 1 && c >= 0; s--, c--) {\n            // Next we find the first one that isn't the same which should be the\n            // frame that called our sample function and the control.\n            if (sampleLines[s] !== controlLines[c]) {\n              // In V8, the first line is describing the message but other VMs don't.\n              // If we're about to return the first line, and the control is also on the same\n              // line, that's a pretty good indicator that our sample threw at same line as\n              // the control. I.e. before we entered the sample frame. So we ignore this result.\n              // This can happen if you passed a class to function component, or non-function.\n              if (s !== 1 || c !== 1) {\n                do {\n                  s--;\n                  c--; // We may still have similar intermediate frames from the construct call.\n                  // The next one that isn't the same should be our match though.\n\n                  if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                    // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                    var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                    // but we have a user-provided \"displayName\"\n                    // splice it in to make the stack more readable.\n\n                    if (fn.displayName && _frame.includes('<anonymous>')) {\n                      _frame = _frame.replace('<anonymous>', fn.displayName);\n                    }\n                    {\n                      if (typeof fn === 'function') {\n                        componentFrameCache.set(fn, _frame);\n                      }\n                    } // Return the line we found.\n\n                    return _frame;\n                  }\n                } while (s >= 1 && c >= 0);\n              }\n              break;\n            }\n          }\n        }\n      } finally {\n        reentry = false;\n        {\n          ReactCurrentDispatcher.current = previousDispatcher;\n          reenableLogs();\n        }\n        Error.prepareStackTrace = previousPrepareStackTrace;\n      } // Fallback to just using the name if we couldn't make it throw.\n\n      var name = fn ? fn.displayName || fn.name : '';\n      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n      {\n        if (typeof fn === 'function') {\n          componentFrameCache.set(fn, syntheticFrame);\n        }\n      }\n      return syntheticFrame;\n    }\n    function describeClassComponentFrame(ctor, source, ownerFn) {\n      {\n        return describeNativeComponentFrame(ctor, true);\n      }\n    }\n    function describeFunctionComponentFrame(fn, source, ownerFn) {\n      {\n        return describeNativeComponentFrame(fn, false);\n      }\n    }\n    function shouldConstruct(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n      if (type == null) {\n        return '';\n      }\n      if (typeof type === 'function') {\n        {\n          return describeNativeComponentFrame(type, shouldConstruct(type));\n        }\n      }\n      if (typeof type === 'string') {\n        return describeBuiltInComponentFrame(type);\n      }\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame('Suspense');\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame('SuspenseList');\n      }\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return describeFunctionComponentFrame(type.render);\n          case REACT_MEMO_TYPE:\n            // Memo may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              try {\n                // Lazy may contain any component type so we recursively resolve it.\n                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n              } catch (x) {}\n            }\n        }\n      }\n      return '';\n    }\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var loggedTypeFailures = {};\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    function setCurrentlyValidatingElement(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n          ReactDebugCurrentFrame.setExtraStackFrame(stack);\n        } else {\n          ReactDebugCurrentFrame.setExtraStackFrame(null);\n        }\n      }\n    }\n    function checkPropTypes(typeSpecs, values, location, componentName, element) {\n      {\n        // $FlowFixMe This is okay but Flow doesn't know it.\n        var has = Function.call.bind(hasOwnProperty);\n        for (var typeSpecName in typeSpecs) {\n          if (has(typeSpecs, typeSpecName)) {\n            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n            // fail the render phase where it didn't fail before. So we log it.\n            // After these have been cleaned up, we'll let them throw.\n\n            try {\n              // This is intentionally an invariant that gets caught. It's the same\n              // behavior as without this statement except with a better message.\n              if (typeof typeSpecs[typeSpecName] !== 'function') {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n                err.name = 'Invariant Violation';\n                throw err;\n              }\n              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n            } catch (ex) {\n              error$1 = ex;\n            }\n            if (error$1 && !(error$1 instanceof Error)) {\n              setCurrentlyValidatingElement(element);\n              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n              setCurrentlyValidatingElement(null);\n            }\n            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n              // Only monitor this failure once because there tends to be a lot of the\n              // same error.\n              loggedTypeFailures[error$1.message] = true;\n              setCurrentlyValidatingElement(element);\n              error('Failed %s type: %s', location, error$1.message);\n              setCurrentlyValidatingElement(null);\n            }\n          }\n        }\n      }\n    }\n    var valueStack = [];\n    var fiberStack;\n    {\n      fiberStack = [];\n    }\n    var index = -1;\n    function createCursor(defaultValue) {\n      return {\n        current: defaultValue\n      };\n    }\n    function pop(cursor, fiber) {\n      if (index < 0) {\n        {\n          error('Unexpected pop.');\n        }\n        return;\n      }\n      {\n        if (fiber !== fiberStack[index]) {\n          error('Unexpected Fiber popped.');\n        }\n      }\n      cursor.current = valueStack[index];\n      valueStack[index] = null;\n      {\n        fiberStack[index] = null;\n      }\n      index--;\n    }\n    function push(cursor, value, fiber) {\n      index++;\n      valueStack[index] = cursor.current;\n      {\n        fiberStack[index] = fiber;\n      }\n      cursor.current = value;\n    }\n    var warnedAboutMissingGetChildContext;\n    {\n      warnedAboutMissingGetChildContext = {};\n    }\n    var emptyContextObject = {};\n    {\n      Object.freeze(emptyContextObject);\n    } // A cursor to the current merged context object on the stack.\n\n    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\n    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n    // We use this to get access to the parent context after we have already\n    // pushed the next context provider, and now need to merge their contexts.\n\n    var previousContext = emptyContextObject;\n    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n      {\n        if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n          // If the fiber is a context provider itself, when we read its context\n          // we may have already pushed its own child context on the stack. A context\n          // provider should not \"see\" its own child context. Therefore we read the\n          // previous (parent) context instead for a context provider.\n          return previousContext;\n        }\n        return contextStackCursor.current;\n      }\n    }\n    function cacheContext(workInProgress, unmaskedContext, maskedContext) {\n      {\n        var instance = workInProgress.stateNode;\n        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n      }\n    }\n    function getMaskedContext(workInProgress, unmaskedContext) {\n      {\n        var type = workInProgress.type;\n        var contextTypes = type.contextTypes;\n        if (!contextTypes) {\n          return emptyContextObject;\n        } // Avoid recreating masked context unless unmasked context has changed.\n        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n        // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n        var instance = workInProgress.stateNode;\n        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n          return instance.__reactInternalMemoizedMaskedChildContext;\n        }\n        var context = {};\n        for (var key in contextTypes) {\n          context[key] = unmaskedContext[key];\n        }\n        {\n          var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n          checkPropTypes(contextTypes, context, 'context', name);\n        } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n        // Context is created before the class component is instantiated so check for instance.\n\n        if (instance) {\n          cacheContext(workInProgress, unmaskedContext, context);\n        }\n        return context;\n      }\n    }\n    function hasContextChanged() {\n      {\n        return didPerformWorkStackCursor.current;\n      }\n    }\n    function isContextProvider(type) {\n      {\n        var childContextTypes = type.childContextTypes;\n        return childContextTypes !== null && childContextTypes !== undefined;\n      }\n    }\n    function popContext(fiber) {\n      {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor, fiber);\n      }\n    }\n    function popTopLevelContextObject(fiber) {\n      {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor, fiber);\n      }\n    }\n    function pushTopLevelContextObject(fiber, context, didChange) {\n      {\n        if (contextStackCursor.current !== emptyContextObject) {\n          throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n        push(contextStackCursor, context, fiber);\n        push(didPerformWorkStackCursor, didChange, fiber);\n      }\n    }\n    function processChildContext(fiber, type, parentContext) {\n      {\n        var instance = fiber.stateNode;\n        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n        // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n        if (typeof instance.getChildContext !== 'function') {\n          {\n            var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n            if (!warnedAboutMissingGetChildContext[componentName]) {\n              warnedAboutMissingGetChildContext[componentName] = true;\n              error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n            }\n          }\n          return parentContext;\n        }\n        var childContext = instance.getChildContext();\n        for (var contextKey in childContext) {\n          if (!(contextKey in childContextTypes)) {\n            throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n          }\n        }\n        {\n          var name = getComponentNameFromFiber(fiber) || 'Unknown';\n          checkPropTypes(childContextTypes, childContext, 'child context', name);\n        }\n        return assign({}, parentContext, childContext);\n      }\n    }\n    function pushContextProvider(workInProgress) {\n      {\n        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n        // If the instance does not exist yet, we will push null at first,\n        // and replace it on the stack later when invalidating the context.\n\n        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n        previousContext = contextStackCursor.current;\n        push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n        return true;\n      }\n    }\n    function invalidateContextProvider(workInProgress, type, didChange) {\n      {\n        var instance = workInProgress.stateNode;\n        if (!instance) {\n          throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n        if (didChange) {\n          // Merge parent and own context.\n          // Skip this if we're not updating due to sCU.\n          // This avoids unnecessarily recomputing memoized values.\n          var mergedContext = processChildContext(workInProgress, type, previousContext);\n          instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n          // It is important to unwind the context in the reverse order.\n\n          pop(didPerformWorkStackCursor, workInProgress);\n          pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n          push(contextStackCursor, mergedContext, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        } else {\n          pop(didPerformWorkStackCursor, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        }\n      }\n    }\n    function findCurrentUnmaskedContext(fiber) {\n      {\n        // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n        // makes sense elsewhere\n        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n          throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n        var node = fiber;\n        do {\n          switch (node.tag) {\n            case HostRoot:\n              return node.stateNode.context;\n            case ClassComponent:\n              {\n                var Component = node.type;\n                if (isContextProvider(Component)) {\n                  return node.stateNode.__reactInternalMemoizedMergedChildContext;\n                }\n                break;\n              }\n          }\n          node = node.return;\n        } while (node !== null);\n        throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n    }\n    var LegacyRoot = 0;\n    var ConcurrentRoot = 1;\n    var NoMode = /*                         */\n    0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\n    var ConcurrentMode = /*                 */\n    1;\n    var ProfileMode = /*                    */\n    2;\n    var StrictLegacyMode = /*               */\n    8;\n    var StrictEffectsMode = /*              */\n    16;\n\n    // TODO: This is pretty well supported by browsers. Maybe we can drop it.\n    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n    // Based on:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n    var log = Math.log;\n    var LN2 = Math.LN2;\n    function clz32Fallback(x) {\n      var asUint = x >>> 0;\n      if (asUint === 0) {\n        return 32;\n      }\n      return 31 - (log(asUint) / LN2 | 0) | 0;\n    }\n\n    // If those values are changed that package should be rebuilt and redeployed.\n\n    var TotalLanes = 31;\n    var NoLanes = /*                        */\n    0;\n    var NoLane = /*                          */\n    0;\n    var SyncLane = /*                        */\n    1;\n    var InputContinuousHydrationLane = /*    */\n    2;\n    var InputContinuousLane = /*             */\n    4;\n    var DefaultHydrationLane = /*            */\n    8;\n    var DefaultLane = /*                     */\n    16;\n    var TransitionHydrationLane = /*                */\n    32;\n    var TransitionLanes = /*                       */\n    4194240;\n    var TransitionLane1 = /*                        */\n    64;\n    var TransitionLane2 = /*                        */\n    128;\n    var TransitionLane3 = /*                        */\n    256;\n    var TransitionLane4 = /*                        */\n    512;\n    var TransitionLane5 = /*                        */\n    1024;\n    var TransitionLane6 = /*                        */\n    2048;\n    var TransitionLane7 = /*                        */\n    4096;\n    var TransitionLane8 = /*                        */\n    8192;\n    var TransitionLane9 = /*                        */\n    16384;\n    var TransitionLane10 = /*                       */\n    32768;\n    var TransitionLane11 = /*                       */\n    65536;\n    var TransitionLane12 = /*                       */\n    131072;\n    var TransitionLane13 = /*                       */\n    262144;\n    var TransitionLane14 = /*                       */\n    524288;\n    var TransitionLane15 = /*                       */\n    1048576;\n    var TransitionLane16 = /*                       */\n    2097152;\n    var RetryLanes = /*                            */\n    130023424;\n    var RetryLane1 = /*                             */\n    4194304;\n    var RetryLane2 = /*                             */\n    8388608;\n    var RetryLane3 = /*                             */\n    16777216;\n    var RetryLane4 = /*                             */\n    33554432;\n    var RetryLane5 = /*                             */\n    67108864;\n    var SomeRetryLane = RetryLane1;\n    var SelectiveHydrationLane = /*          */\n    134217728;\n    var NonIdleLanes = /*                          */\n    268435455;\n    var IdleHydrationLane = /*               */\n    268435456;\n    var IdleLane = /*                        */\n    536870912;\n    var OffscreenLane = /*                   */\n    1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n    // It should be kept in sync with the Lanes values above.\n\n    function getLabelForLane(lane) {\n      {\n        if (lane & SyncLane) {\n          return 'Sync';\n        }\n        if (lane & InputContinuousHydrationLane) {\n          return 'InputContinuousHydration';\n        }\n        if (lane & InputContinuousLane) {\n          return 'InputContinuous';\n        }\n        if (lane & DefaultHydrationLane) {\n          return 'DefaultHydration';\n        }\n        if (lane & DefaultLane) {\n          return 'Default';\n        }\n        if (lane & TransitionHydrationLane) {\n          return 'TransitionHydration';\n        }\n        if (lane & TransitionLanes) {\n          return 'Transition';\n        }\n        if (lane & RetryLanes) {\n          return 'Retry';\n        }\n        if (lane & SelectiveHydrationLane) {\n          return 'SelectiveHydration';\n        }\n        if (lane & IdleHydrationLane) {\n          return 'IdleHydration';\n        }\n        if (lane & IdleLane) {\n          return 'Idle';\n        }\n        if (lane & OffscreenLane) {\n          return 'Offscreen';\n        }\n      }\n    }\n    var NoTimestamp = -1;\n    var nextTransitionLane = TransitionLane1;\n    var nextRetryLane = RetryLane1;\n    function getHighestPriorityLanes(lanes) {\n      switch (getHighestPriorityLane(lanes)) {\n        case SyncLane:\n          return SyncLane;\n        case InputContinuousHydrationLane:\n          return InputContinuousHydrationLane;\n        case InputContinuousLane:\n          return InputContinuousLane;\n        case DefaultHydrationLane:\n          return DefaultHydrationLane;\n        case DefaultLane:\n          return DefaultLane;\n        case TransitionHydrationLane:\n          return TransitionHydrationLane;\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n        case TransitionLane16:\n          return lanes & TransitionLanes;\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n        case RetryLane5:\n          return lanes & RetryLanes;\n        case SelectiveHydrationLane:\n          return SelectiveHydrationLane;\n        case IdleHydrationLane:\n          return IdleHydrationLane;\n        case IdleLane:\n          return IdleLane;\n        case OffscreenLane:\n          return OffscreenLane;\n        default:\n          {\n            error('Should have found matching lanes. This is a bug in React.');\n          } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n          return lanes;\n      }\n    }\n    function getNextLanes(root, wipLanes) {\n      // Early bailout if there's no pending work left.\n      var pendingLanes = root.pendingLanes;\n      if (pendingLanes === NoLanes) {\n        return NoLanes;\n      }\n      var nextLanes = NoLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n      // even if the work is suspended.\n\n      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n      if (nonIdlePendingLanes !== NoLanes) {\n        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n        if (nonIdleUnblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        } else {\n          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n          if (nonIdlePingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          }\n        }\n      } else {\n        // The only remaining work is Idle.\n        var unblockedLanes = pendingLanes & ~suspendedLanes;\n        if (unblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(unblockedLanes);\n        } else {\n          if (pingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(pingedLanes);\n          }\n        }\n      }\n      if (nextLanes === NoLanes) {\n        // This should only be reachable if we're suspended\n        // TODO: Consider warning in this path if a fallback timer is not scheduled.\n        return NoLanes;\n      } // If we're already in the middle of a render, switching lanes will interrupt\n      // it and we'll lose our progress. We should only do this if the new lanes are\n      // higher priority.\n\n      if (wipLanes !== NoLanes && wipLanes !== nextLanes &&\n      // If we already suspended with a delay, then interrupting is fine. Don't\n      // bother waiting until the root is complete.\n      (wipLanes & suspendedLanes) === NoLanes) {\n        var nextLane = getHighestPriorityLane(nextLanes);\n        var wipLane = getHighestPriorityLane(wipLanes);\n        if (\n        // Tests whether the next lane is equal or lower priority than the wip\n        // one. This works because the bits decrease in priority as you go left.\n        nextLane >= wipLane ||\n        // Default priority updates should not interrupt transition updates. The\n        // only difference between default updates and transition updates is that\n        // default updates do not support refresh transitions.\n        nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n          // Keep working on the existing in-progress tree. Do not interrupt.\n          return wipLanes;\n        }\n      }\n      if ((nextLanes & InputContinuousLane) !== NoLanes) {\n        // When updates are sync by default, we entangle continuous priority updates\n        // and default updates, so they render in the same batch. The only reason\n        // they use separate lanes is because continuous updates should interrupt\n        // transitions, but default updates should not.\n        nextLanes |= pendingLanes & DefaultLane;\n      } // Check for entangled lanes and add them to the batch.\n      //\n      // A lane is said to be entangled with another when it's not allowed to render\n      // in a batch that does not also include the other lane. Typically we do this\n      // when multiple updates have the same source, and we only want to respond to\n      // the most recent event from that source.\n      //\n      // Note that we apply entanglements *after* checking for partial work above.\n      // This means that if a lane is entangled during an interleaved event while\n      // it's already rendering, we won't interrupt it. This is intentional, since\n      // entanglement is usually \"best effort\": we'll try our best to render the\n      // lanes in the same batch, but it's not worth throwing out partially\n      // completed work in order to do it.\n      // TODO: Reconsider this. The counter-argument is that the partial work\n      // represents an intermediate state, which we don't want to show to the user.\n      // And by spending extra time finishing it, we're increasing the amount of\n      // time it takes to show the final state, which is what they are actually\n      // waiting for.\n      //\n      // For those exceptions where entanglement is semantically important, like\n      // useMutableSource, we should ensure that there is no partial work at the\n      // time we apply the entanglement.\n\n      var entangledLanes = root.entangledLanes;\n      if (entangledLanes !== NoLanes) {\n        var entanglements = root.entanglements;\n        var lanes = nextLanes & entangledLanes;\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          nextLanes |= entanglements[index];\n          lanes &= ~lane;\n        }\n      }\n      return nextLanes;\n    }\n    function getMostRecentEventTime(root, lanes) {\n      var eventTimes = root.eventTimes;\n      var mostRecentEventTime = NoTimestamp;\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        var eventTime = eventTimes[index];\n        if (eventTime > mostRecentEventTime) {\n          mostRecentEventTime = eventTime;\n        }\n        lanes &= ~lane;\n      }\n      return mostRecentEventTime;\n    }\n    function computeExpirationTime(lane, currentTime) {\n      switch (lane) {\n        case SyncLane:\n        case InputContinuousHydrationLane:\n        case InputContinuousLane:\n          // User interactions should expire slightly more quickly.\n          //\n          // NOTE: This is set to the corresponding constant as in Scheduler.js.\n          // When we made it larger, a product metric in www regressed, suggesting\n          // there's a user interaction that's being starved by a series of\n          // synchronous updates. If that theory is correct, the proper solution is\n          // to fix the starvation. However, this scenario supports the idea that\n          // expiration times are an important safeguard when starvation\n          // does happen.\n          return currentTime + 250;\n        case DefaultHydrationLane:\n        case DefaultLane:\n        case TransitionHydrationLane:\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n        case TransitionLane16:\n          return currentTime + 5000;\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n        case RetryLane5:\n          // TODO: Retries should be allowed to expire if they are CPU bound for\n          // too long, but when I made this change it caused a spike in browser\n          // crashes. There must be some other underlying bug; not super urgent but\n          // ideally should figure out why and fix it. Unfortunately we don't have\n          // a repro for the crashes, only detected via production metrics.\n          return NoTimestamp;\n        case SelectiveHydrationLane:\n        case IdleHydrationLane:\n        case IdleLane:\n        case OffscreenLane:\n          // Anything idle priority or lower should never expire.\n          return NoTimestamp;\n        default:\n          {\n            error('Should have found matching lanes. This is a bug in React.');\n          }\n          return NoTimestamp;\n      }\n    }\n    function markStarvedLanesAsExpired(root, currentTime) {\n      // TODO: This gets called every time we yield. We can optimize by storing\n      // the earliest expiration time on the root. Then use that to quickly bail out\n      // of this function.\n      var pendingLanes = root.pendingLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes;\n      var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n      // expiration time. If so, we'll assume the update is being starved and mark\n      // it as expired to force it to finish.\n\n      var lanes = pendingLanes;\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        var expirationTime = expirationTimes[index];\n        if (expirationTime === NoTimestamp) {\n          // Found a pending lane with no expiration time. If it's not suspended, or\n          // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n          // using the current time.\n          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n            // Assumes timestamps are monotonically increasing.\n            expirationTimes[index] = computeExpirationTime(lane, currentTime);\n          }\n        } else if (expirationTime <= currentTime) {\n          // This lane expired\n          root.expiredLanes |= lane;\n        }\n        lanes &= ~lane;\n      }\n    } // This returns the highest priority pending lanes regardless of whether they\n    // are suspended.\n\n    function getHighestPriorityPendingLanes(root) {\n      return getHighestPriorityLanes(root.pendingLanes);\n    }\n    function getLanesToRetrySynchronouslyOnError(root) {\n      var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n      if (everythingButOffscreen !== NoLanes) {\n        return everythingButOffscreen;\n      }\n      if (everythingButOffscreen & OffscreenLane) {\n        return OffscreenLane;\n      }\n      return NoLanes;\n    }\n    function includesSyncLane(lanes) {\n      return (lanes & SyncLane) !== NoLanes;\n    }\n    function includesNonIdleWork(lanes) {\n      return (lanes & NonIdleLanes) !== NoLanes;\n    }\n    function includesOnlyRetries(lanes) {\n      return (lanes & RetryLanes) === lanes;\n    }\n    function includesOnlyNonUrgentLanes(lanes) {\n      var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n      return (lanes & UrgentLanes) === NoLanes;\n    }\n    function includesOnlyTransitions(lanes) {\n      return (lanes & TransitionLanes) === lanes;\n    }\n    function includesBlockingLane(root, lanes) {\n      var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n      return (lanes & SyncDefaultLanes) !== NoLanes;\n    }\n    function includesExpiredLane(root, lanes) {\n      // This is a separate check from includesBlockingLane because a lane can\n      // expire after a render has already started.\n      return (lanes & root.expiredLanes) !== NoLanes;\n    }\n    function isTransitionLane(lane) {\n      return (lane & TransitionLanes) !== NoLanes;\n    }\n    function claimNextTransitionLane() {\n      // Cycle through the lanes, assigning each new transition to the next lane.\n      // In most cases, this means every transition gets its own lane, until we\n      // run out of lanes and cycle back to the beginning.\n      var lane = nextTransitionLane;\n      nextTransitionLane <<= 1;\n      if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n        nextTransitionLane = TransitionLane1;\n      }\n      return lane;\n    }\n    function claimNextRetryLane() {\n      var lane = nextRetryLane;\n      nextRetryLane <<= 1;\n      if ((nextRetryLane & RetryLanes) === NoLanes) {\n        nextRetryLane = RetryLane1;\n      }\n      return lane;\n    }\n    function getHighestPriorityLane(lanes) {\n      return lanes & -lanes;\n    }\n    function pickArbitraryLane(lanes) {\n      // This wrapper function gets inlined. Only exists so to communicate that it\n      // doesn't matter which bit is selected; you can pick any bit without\n      // affecting the algorithms where its used. Here I'm using\n      // getHighestPriorityLane because it requires the fewest operations.\n      return getHighestPriorityLane(lanes);\n    }\n    function pickArbitraryLaneIndex(lanes) {\n      return 31 - clz32(lanes);\n    }\n    function laneToIndex(lane) {\n      return pickArbitraryLaneIndex(lane);\n    }\n    function includesSomeLane(a, b) {\n      return (a & b) !== NoLanes;\n    }\n    function isSubsetOfLanes(set, subset) {\n      return (set & subset) === subset;\n    }\n    function mergeLanes(a, b) {\n      return a | b;\n    }\n    function removeLanes(set, subset) {\n      return set & ~subset;\n    }\n    function intersectLanes(a, b) {\n      return a & b;\n    } // Seems redundant, but it changes the type from a single lane (used for\n    // updates) to a group of lanes (used for flushing work).\n\n    function laneToLanes(lane) {\n      return lane;\n    }\n    function higherPriorityLane(a, b) {\n      // This works because the bit ranges decrease in priority as you go left.\n      return a !== NoLane && a < b ? a : b;\n    }\n    function createLaneMap(initial) {\n      // Intentionally pushing one by one.\n      // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n      var laneMap = [];\n      for (var i = 0; i < TotalLanes; i++) {\n        laneMap.push(initial);\n      }\n      return laneMap;\n    }\n    function markRootUpdated(root, updateLane, eventTime) {\n      root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n      // could unblock them. Clear the suspended lanes so that we can try rendering\n      // them again.\n      //\n      // TODO: We really only need to unsuspend only lanes that are in the\n      // `subtreeLanes` of the updated fiber, or the update lanes of the return\n      // path. This would exclude suspended updates in an unrelated sibling tree,\n      // since there's no way for this update to unblock it.\n      //\n      // We don't do this if the incoming update is idle, because we never process\n      // idle updates until after all the regular updates have finished; there's no\n      // way it could unblock a transition.\n\n      if (updateLane !== IdleLane) {\n        root.suspendedLanes = NoLanes;\n        root.pingedLanes = NoLanes;\n      }\n      var eventTimes = root.eventTimes;\n      var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n      // recent event, and we assume time is monotonically increasing.\n\n      eventTimes[index] = eventTime;\n    }\n    function markRootSuspended(root, suspendedLanes) {\n      root.suspendedLanes |= suspendedLanes;\n      root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n      var expirationTimes = root.expirationTimes;\n      var lanes = suspendedLanes;\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        expirationTimes[index] = NoTimestamp;\n        lanes &= ~lane;\n      }\n    }\n    function markRootPinged(root, pingedLanes, eventTime) {\n      root.pingedLanes |= root.suspendedLanes & pingedLanes;\n    }\n    function markRootFinished(root, remainingLanes) {\n      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n      root.pendingLanes = remainingLanes; // Let's try everything again\n\n      root.suspendedLanes = NoLanes;\n      root.pingedLanes = NoLanes;\n      root.expiredLanes &= remainingLanes;\n      root.mutableReadLanes &= remainingLanes;\n      root.entangledLanes &= remainingLanes;\n      var entanglements = root.entanglements;\n      var eventTimes = root.eventTimes;\n      var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n      var lanes = noLongerPendingLanes;\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        entanglements[index] = NoLanes;\n        eventTimes[index] = NoTimestamp;\n        expirationTimes[index] = NoTimestamp;\n        lanes &= ~lane;\n      }\n    }\n    function markRootEntangled(root, entangledLanes) {\n      // In addition to entangling each of the given lanes with each other, we also\n      // have to consider _transitive_ entanglements. For each lane that is already\n      // entangled with *any* of the given lanes, that lane is now transitively\n      // entangled with *all* the given lanes.\n      //\n      // Translated: If C is entangled with A, then entangling A with B also\n      // entangles C with B.\n      //\n      // If this is hard to grasp, it might help to intentionally break this\n      // function and look at the tests that fail in ReactTransition-test.js. Try\n      // commenting out one of the conditions below.\n      var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n      var entanglements = root.entanglements;\n      var lanes = rootEntangledLanes;\n      while (lanes) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        if (\n        // Is this one of the newly entangled lanes?\n        lane & entangledLanes |\n        // Is this lane transitively entangled with the newly entangled lanes?\n        entanglements[index] & entangledLanes) {\n          entanglements[index] |= entangledLanes;\n        }\n        lanes &= ~lane;\n      }\n    }\n    function getBumpedLaneForHydration(root, renderLanes) {\n      var renderLane = getHighestPriorityLane(renderLanes);\n      var lane;\n      switch (renderLane) {\n        case InputContinuousLane:\n          lane = InputContinuousHydrationLane;\n          break;\n        case DefaultLane:\n          lane = DefaultHydrationLane;\n          break;\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n        case TransitionLane16:\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n        case RetryLane5:\n          lane = TransitionHydrationLane;\n          break;\n        case IdleLane:\n          lane = IdleHydrationLane;\n          break;\n        default:\n          // Everything else is already either a hydration lane, or shouldn't\n          // be retried at a hydration lane.\n          lane = NoLane;\n          break;\n      } // Check if the lane we chose is suspended. If so, that indicates that we\n      // already attempted and failed to hydrate at that level. Also check if we're\n      // already rendering that lane, which is rare but could happen.\n\n      if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n        // Give up trying to hydrate and fall back to client render.\n        return NoLane;\n      }\n      return lane;\n    }\n    function addFiberToLanesMap(root, fiber, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n        updaters.add(fiber);\n        lanes &= ~lane;\n      }\n    }\n    function movePendingFibersToMemoized(root, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n      var memoizedUpdaters = root.memoizedUpdaters;\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n        if (updaters.size > 0) {\n          updaters.forEach(function (fiber) {\n            var alternate = fiber.alternate;\n            if (alternate === null || !memoizedUpdaters.has(alternate)) {\n              memoizedUpdaters.add(fiber);\n            }\n          });\n          updaters.clear();\n        }\n        lanes &= ~lane;\n      }\n    }\n    function getTransitionsForLanes(root, lanes) {\n      {\n        return null;\n      }\n    }\n    var DiscreteEventPriority = SyncLane;\n    var ContinuousEventPriority = InputContinuousLane;\n    var DefaultEventPriority = DefaultLane;\n    var IdleEventPriority = IdleLane;\n    var currentUpdatePriority = NoLane;\n    function getCurrentUpdatePriority() {\n      return currentUpdatePriority;\n    }\n    function setCurrentUpdatePriority(newPriority) {\n      currentUpdatePriority = newPriority;\n    }\n    function runWithPriority(priority, fn) {\n      var previousPriority = currentUpdatePriority;\n      try {\n        currentUpdatePriority = priority;\n        return fn();\n      } finally {\n        currentUpdatePriority = previousPriority;\n      }\n    }\n    function higherEventPriority(a, b) {\n      return a !== 0 && a < b ? a : b;\n    }\n    function lowerEventPriority(a, b) {\n      return a === 0 || a > b ? a : b;\n    }\n    function isHigherEventPriority(a, b) {\n      return a !== 0 && a < b;\n    }\n    function lanesToEventPriority(lanes) {\n      var lane = getHighestPriorityLane(lanes);\n      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n        return DiscreteEventPriority;\n      }\n      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n        return ContinuousEventPriority;\n      }\n      if (includesNonIdleWork(lane)) {\n        return DefaultEventPriority;\n      }\n      return IdleEventPriority;\n    }\n\n    // This module only exists as an ESM wrapper around the external CommonJS\n    var scheduleCallback = Scheduler.unstable_scheduleCallback;\n    var cancelCallback = Scheduler.unstable_cancelCallback;\n    var shouldYield = Scheduler.unstable_shouldYield;\n    var requestPaint = Scheduler.unstable_requestPaint;\n    var now = Scheduler.unstable_now;\n    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n    var NormalPriority = Scheduler.unstable_NormalPriority;\n    var IdlePriority = Scheduler.unstable_IdlePriority;\n    // this doesn't actually exist on the scheduler, but it *does*\n    // on scheduler/unstable_mock, which we'll need for internal testing\n    var unstable_yieldValue = Scheduler.unstable_yieldValue;\n    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n    var rendererID = null;\n    var injectedHook = null;\n    var injectedProfilingHooks = null;\n    var hasLoggedError = false;\n    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n    function injectInternals(internals) {\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n        // No DevTools\n        return false;\n      }\n      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n      if (hook.isDisabled) {\n        // This isn't a real property on the hook, but it can be set to opt out\n        // of DevTools integration and associated warnings and logs.\n        // https://github.com/facebook/react/issues/3877\n        return true;\n      }\n      if (!hook.supportsFiber) {\n        {\n          error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n        } // DevTools exists, even though it doesn't support Fiber.\n\n        return true;\n      }\n      try {\n        if (enableSchedulingProfiler) {\n          // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n          // This gives DevTools a way to feature detect that isn't tied to version number\n          // (since profiling and timeline are controlled by different feature flags).\n          internals = assign({}, internals, {\n            getLaneLabelMap: getLaneLabelMap,\n            injectProfilingHooks: injectProfilingHooks\n          });\n        }\n        rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n        injectedHook = hook;\n      } catch (err) {\n        // Catch all errors because it is unsafe to throw during initialization.\n        {\n          error('React instrumentation encountered an error: %s.', err);\n        }\n      }\n      if (hook.checkDCE) {\n        // This is the real DevTools.\n        return true;\n      } else {\n        // This is likely a hook installed by Fast Refresh runtime.\n        return false;\n      }\n    }\n    function onScheduleRoot(root, children) {\n      {\n        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n          try {\n            injectedHook.onScheduleFiberRoot(rendererID, root, children);\n          } catch (err) {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n    function onCommitRoot(root, eventPriority) {\n      if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n        try {\n          var didError = (root.current.flags & DidCapture) === DidCapture;\n          if (enableProfilerTimer) {\n            var schedulerPriority;\n            switch (eventPriority) {\n              case DiscreteEventPriority:\n                schedulerPriority = ImmediatePriority;\n                break;\n              case ContinuousEventPriority:\n                schedulerPriority = UserBlockingPriority;\n                break;\n              case DefaultEventPriority:\n                schedulerPriority = NormalPriority;\n                break;\n              case IdleEventPriority:\n                schedulerPriority = IdlePriority;\n                break;\n              default:\n                schedulerPriority = NormalPriority;\n                break;\n            }\n            injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n          } else {\n            injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n          }\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n    function onPostCommitRoot(root) {\n      if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n        try {\n          injectedHook.onPostCommitFiberRoot(rendererID, root);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n    function onCommitUnmount(fiber) {\n      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n        try {\n          injectedHook.onCommitFiberUnmount(rendererID, fiber);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n    function setIsStrictModeForDevtools(newIsStrictMode) {\n      {\n        if (typeof unstable_yieldValue === 'function') {\n          // We're in a test because Scheduler.unstable_yieldValue only exists\n          // in SchedulerMock. To reduce the noise in strict mode tests,\n          // suppress warnings and disable scheduler yielding during the double render\n          unstable_setDisableYieldValue(newIsStrictMode);\n          setSuppressWarning(newIsStrictMode);\n        }\n        if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n          try {\n            injectedHook.setStrictMode(rendererID, newIsStrictMode);\n          } catch (err) {\n            {\n              if (!hasLoggedError) {\n                hasLoggedError = true;\n                error('React instrumentation encountered an error: %s', err);\n              }\n            }\n          }\n        }\n      }\n    } // Profiler API hooks\n\n    function injectProfilingHooks(profilingHooks) {\n      injectedProfilingHooks = profilingHooks;\n    }\n    function getLaneLabelMap() {\n      {\n        var map = new Map();\n        var lane = 1;\n        for (var index = 0; index < TotalLanes; index++) {\n          var label = getLabelForLane(lane);\n          map.set(lane, label);\n          lane *= 2;\n        }\n        return map;\n      }\n    }\n    function markCommitStarted(lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\n          injectedProfilingHooks.markCommitStarted(lanes);\n        }\n      }\n    }\n    function markCommitStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\n          injectedProfilingHooks.markCommitStopped();\n        }\n      }\n    }\n    function markComponentRenderStarted(fiber) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\n          injectedProfilingHooks.markComponentRenderStarted(fiber);\n        }\n      }\n    }\n    function markComponentRenderStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\n          injectedProfilingHooks.markComponentRenderStopped();\n        }\n      }\n    }\n    function markComponentPassiveEffectMountStarted(fiber) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\n          injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n        }\n      }\n    }\n    function markComponentPassiveEffectMountStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\n          injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n        }\n      }\n    }\n    function markComponentPassiveEffectUnmountStarted(fiber) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\n          injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n        }\n      }\n    }\n    function markComponentPassiveEffectUnmountStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\n          injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n        }\n      }\n    }\n    function markComponentLayoutEffectMountStarted(fiber) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\n          injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n        }\n      }\n    }\n    function markComponentLayoutEffectMountStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\n          injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n        }\n      }\n    }\n    function markComponentLayoutEffectUnmountStarted(fiber) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\n          injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n        }\n      }\n    }\n    function markComponentLayoutEffectUnmountStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\n          injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n        }\n      }\n    }\n    function markComponentErrored(fiber, thrownValue, lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\n          injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n        }\n      }\n    }\n    function markComponentSuspended(fiber, wakeable, lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\n          injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n        }\n      }\n    }\n    function markLayoutEffectsStarted(lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\n          injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n        }\n      }\n    }\n    function markLayoutEffectsStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\n          injectedProfilingHooks.markLayoutEffectsStopped();\n        }\n      }\n    }\n    function markPassiveEffectsStarted(lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\n          injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n        }\n      }\n    }\n    function markPassiveEffectsStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\n          injectedProfilingHooks.markPassiveEffectsStopped();\n        }\n      }\n    }\n    function markRenderStarted(lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\n          injectedProfilingHooks.markRenderStarted(lanes);\n        }\n      }\n    }\n    function markRenderYielded() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\n          injectedProfilingHooks.markRenderYielded();\n        }\n      }\n    }\n    function markRenderStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\n          injectedProfilingHooks.markRenderStopped();\n        }\n      }\n    }\n    function markRenderScheduled(lane) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\n          injectedProfilingHooks.markRenderScheduled(lane);\n        }\n      }\n    }\n    function markForceUpdateScheduled(fiber, lane) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\n          injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n        }\n      }\n    }\n    function markStateUpdateScheduled(fiber, lane) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\n          injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n        }\n      }\n    }\n\n    /**\n     * inlined Object.is polyfill to avoid requiring consumers ship their own\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n     */\n    function is(x, y) {\n      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n      ;\n    }\n\n    var objectIs = typeof Object.is === 'function' ? Object.is : is;\n    var syncQueue = null;\n    var includesLegacySyncCallbacks = false;\n    var isFlushingSyncQueue = false;\n    function scheduleSyncCallback(callback) {\n      // Push this callback into an internal queue. We'll flush these either in\n      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n      if (syncQueue === null) {\n        syncQueue = [callback];\n      } else {\n        // Push onto existing queue. Don't need to schedule a callback because\n        // we already scheduled one when we created the queue.\n        syncQueue.push(callback);\n      }\n    }\n    function scheduleLegacySyncCallback(callback) {\n      includesLegacySyncCallbacks = true;\n      scheduleSyncCallback(callback);\n    }\n    function flushSyncCallbacksOnlyInLegacyMode() {\n      // Only flushes the queue if there's a legacy sync callback scheduled.\n      // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n      // it might make more sense for the queue to be a list of roots instead of a\n      // list of generic callbacks. Then we can have two: one for legacy roots, one\n      // for concurrent roots. And this method would only flush the legacy ones.\n      if (includesLegacySyncCallbacks) {\n        flushSyncCallbacks();\n      }\n    }\n    function flushSyncCallbacks() {\n      if (!isFlushingSyncQueue && syncQueue !== null) {\n        // Prevent re-entrance.\n        isFlushingSyncQueue = true;\n        var i = 0;\n        var previousUpdatePriority = getCurrentUpdatePriority();\n        try {\n          var isSync = true;\n          var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n          // queue is in the render or commit phases.\n\n          setCurrentUpdatePriority(DiscreteEventPriority);\n          for (; i < queue.length; i++) {\n            var callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n          syncQueue = null;\n          includesLegacySyncCallbacks = false;\n        } catch (error) {\n          // If something throws, leave the remaining callbacks on the queue.\n          if (syncQueue !== null) {\n            syncQueue = syncQueue.slice(i + 1);\n          } // Resume flushing in the next tick\n\n          scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n          throw error;\n        } finally {\n          setCurrentUpdatePriority(previousUpdatePriority);\n          isFlushingSyncQueue = false;\n        }\n      }\n      return null;\n    }\n\n    // This is imported by the event replaying implementation in React DOM. It's\n    // in a separate file to break a circular dependency between the renderer and\n    // the reconciler.\n    function isRootDehydrated(root) {\n      var currentState = root.current.memoizedState;\n      return currentState.isDehydrated;\n    }\n\n    // TODO: Use the unified fiber stack module instead of this local one?\n    // Intentionally not using it yet to derisk the initial implementation, because\n    // the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n    // rather the ids be wrong than crash the whole reconciler.\n    var forkStack = [];\n    var forkStackIndex = 0;\n    var treeForkProvider = null;\n    var treeForkCount = 0;\n    var idStack = [];\n    var idStackIndex = 0;\n    var treeContextProvider = null;\n    var treeContextId = 1;\n    var treeContextOverflow = '';\n    function isForkedChild(workInProgress) {\n      warnIfNotHydrating();\n      return (workInProgress.flags & Forked) !== NoFlags;\n    }\n    function getForksAtLevel(workInProgress) {\n      warnIfNotHydrating();\n      return treeForkCount;\n    }\n    function getTreeId() {\n      var overflow = treeContextOverflow;\n      var idWithLeadingBit = treeContextId;\n      var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n      return id.toString(32) + overflow;\n    }\n    function pushTreeFork(workInProgress, totalChildren) {\n      // This is called right after we reconcile an array (or iterator) of child\n      // fibers, because that's the only place where we know how many children in\n      // the whole set without doing extra work later, or storing addtional\n      // information on the fiber.\n      //\n      // That's why this function is separate from pushTreeId — it's called during\n      // the render phase of the fork parent, not the child, which is where we push\n      // the other context values.\n      //\n      // In the Fizz implementation this is much simpler because the child is\n      // rendered in the same callstack as the parent.\n      //\n      // It might be better to just add a `forks` field to the Fiber type. It would\n      // make this module simpler.\n      warnIfNotHydrating();\n      forkStack[forkStackIndex++] = treeForkCount;\n      forkStack[forkStackIndex++] = treeForkProvider;\n      treeForkProvider = workInProgress;\n      treeForkCount = totalChildren;\n    }\n    function pushTreeId(workInProgress, totalChildren, index) {\n      warnIfNotHydrating();\n      idStack[idStackIndex++] = treeContextId;\n      idStack[idStackIndex++] = treeContextOverflow;\n      idStack[idStackIndex++] = treeContextProvider;\n      treeContextProvider = workInProgress;\n      var baseIdWithLeadingBit = treeContextId;\n      var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n      // of the id; we use it to account for leading 0s.\n\n      var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n      var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n      var slot = index + 1;\n      var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n      // consideration the leading 1 we use to mark the end of the sequence.\n\n      if (length > 30) {\n        // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n        // This branch assumes the length of the base id is greater than 5; it won't\n        // work for smaller ids, because you need 5 bits per character.\n        //\n        // We encode the id in multiple steps: first the base id, then the\n        // remaining digits.\n        //\n        // Each 5 bit sequence corresponds to a single base 32 character. So for\n        // example, if the current id is 23 bits long, we can convert 20 of those\n        // bits into a string of 4 characters, with 3 bits left over.\n        //\n        // First calculate how many bits in the base id represent a complete\n        // sequence of characters.\n        var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n        var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n        var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n        var restOfBaseId = baseId >> numberOfOverflowBits;\n        var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n        // we made more room, this time it won't overflow.\n\n        var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n        var restOfNewBits = slot << restOfBaseLength;\n        var id = restOfNewBits | restOfBaseId;\n        var overflow = newOverflow + baseOverflow;\n        treeContextId = 1 << restOfLength | id;\n        treeContextOverflow = overflow;\n      } else {\n        // Normal path\n        var newBits = slot << baseLength;\n        var _id = newBits | baseId;\n        var _overflow = baseOverflow;\n        treeContextId = 1 << length | _id;\n        treeContextOverflow = _overflow;\n      }\n    }\n    function pushMaterializedTreeId(workInProgress) {\n      warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n      // in its children.\n\n      var returnFiber = workInProgress.return;\n      if (returnFiber !== null) {\n        var numberOfForks = 1;\n        var slotIndex = 0;\n        pushTreeFork(workInProgress, numberOfForks);\n        pushTreeId(workInProgress, numberOfForks, slotIndex);\n      }\n    }\n    function getBitLength(number) {\n      return 32 - clz32(number);\n    }\n    function getLeadingBit(id) {\n      return 1 << getBitLength(id) - 1;\n    }\n    function popTreeContext(workInProgress) {\n      // Restore the previous values.\n      // This is a bit more complicated than other context-like modules in Fiber\n      // because the same Fiber may appear on the stack multiple times and for\n      // different reasons. We have to keep popping until the work-in-progress is\n      // no longer at the top of the stack.\n      while (workInProgress === treeForkProvider) {\n        treeForkProvider = forkStack[--forkStackIndex];\n        forkStack[forkStackIndex] = null;\n        treeForkCount = forkStack[--forkStackIndex];\n        forkStack[forkStackIndex] = null;\n      }\n      while (workInProgress === treeContextProvider) {\n        treeContextProvider = idStack[--idStackIndex];\n        idStack[idStackIndex] = null;\n        treeContextOverflow = idStack[--idStackIndex];\n        idStack[idStackIndex] = null;\n        treeContextId = idStack[--idStackIndex];\n        idStack[idStackIndex] = null;\n      }\n    }\n    function getSuspendedTreeContext() {\n      warnIfNotHydrating();\n      if (treeContextProvider !== null) {\n        return {\n          id: treeContextId,\n          overflow: treeContextOverflow\n        };\n      } else {\n        return null;\n      }\n    }\n    function restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n      warnIfNotHydrating();\n      idStack[idStackIndex++] = treeContextId;\n      idStack[idStackIndex++] = treeContextOverflow;\n      idStack[idStackIndex++] = treeContextProvider;\n      treeContextId = suspendedContext.id;\n      treeContextOverflow = suspendedContext.overflow;\n      treeContextProvider = workInProgress;\n    }\n    function warnIfNotHydrating() {\n      {\n        if (!getIsHydrating()) {\n          error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\n        }\n      }\n    }\n\n    // This may have been an insertion or a hydration.\n\n    var hydrationParentFiber = null;\n    var nextHydratableInstance = null;\n    var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n    // due to earlier mismatches or a suspended fiber.\n\n    var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary\n\n    var hydrationErrors = null;\n    function warnIfHydrating() {\n      {\n        if (isHydrating) {\n          error('We should not be hydrating here. This is a bug in React. Please file a bug.');\n        }\n      }\n    }\n    function markDidThrowWhileHydratingDEV() {\n      {\n        didSuspendOrErrorDEV = true;\n      }\n    }\n    function didSuspendOrErrorWhileHydratingDEV() {\n      {\n        return didSuspendOrErrorDEV;\n      }\n    }\n    function enterHydrationState(fiber) {\n      if (!supportsHydration) {\n        return false;\n      }\n      var parentInstance = fiber.stateNode.containerInfo;\n      nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n      hydrationParentFiber = fiber;\n      isHydrating = true;\n      hydrationErrors = null;\n      didSuspendOrErrorDEV = false;\n      return true;\n    }\n    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n      if (!supportsHydration) {\n        return false;\n      }\n      nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n      hydrationParentFiber = fiber;\n      isHydrating = true;\n      hydrationErrors = null;\n      didSuspendOrErrorDEV = false;\n      if (treeContext !== null) {\n        restoreSuspendedTreeContext(fiber, treeContext);\n      }\n      return true;\n    }\n    function warnUnhydratedInstance(returnFiber, instance) {\n      {\n        switch (returnFiber.tag) {\n          case HostRoot:\n            {\n              didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\n              break;\n            }\n          case HostComponent:\n            {\n              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode);\n              break;\n            }\n          case SuspenseComponent:\n            {\n              var suspenseState = returnFiber.memoizedState;\n              if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\n              break;\n            }\n        }\n      }\n    }\n    function deleteHydratableInstance(returnFiber, instance) {\n      warnUnhydratedInstance(returnFiber, instance);\n      var childToDelete = createFiberFromHostInstanceForDeletion();\n      childToDelete.stateNode = instance;\n      childToDelete.return = returnFiber;\n      var deletions = returnFiber.deletions;\n      if (deletions === null) {\n        returnFiber.deletions = [childToDelete];\n        returnFiber.flags |= ChildDeletion;\n      } else {\n        deletions.push(childToDelete);\n      }\n    }\n    function warnNonhydratedInstance(returnFiber, fiber) {\n      {\n        if (didSuspendOrErrorDEV) {\n          // Inside a boundary that already suspended. We're currently rendering the\n          // siblings of a suspended node. The mismatch may be due to the missing\n          // data, so it's probably a false positive.\n          return;\n        }\n        switch (returnFiber.tag) {\n          case HostRoot:\n            {\n              var parentContainer = returnFiber.stateNode.containerInfo;\n              switch (fiber.tag) {\n                case HostComponent:\n                  var type = fiber.type;\n                  var props = fiber.pendingProps;\n                  didNotFindHydratableInstanceWithinContainer(parentContainer, type, props);\n                  break;\n                case HostText:\n                  var text = fiber.pendingProps;\n                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\n                  break;\n                case SuspenseComponent:\n                  didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);\n                  break;\n              }\n              break;\n            }\n          case HostComponent:\n            {\n              var parentType = returnFiber.type;\n              var parentProps = returnFiber.memoizedProps;\n              var parentInstance = returnFiber.stateNode;\n              switch (fiber.tag) {\n                case HostComponent:\n                  {\n                    var _type = fiber.type;\n                    var _props = fiber.pendingProps;\n                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props,\n                    // TODO: Delete this argument when we remove the legacy root API.\n                    isConcurrentMode);\n                    break;\n                  }\n                case HostText:\n                  {\n                    var _text = fiber.pendingProps;\n                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text,\n                    // TODO: Delete this argument when we remove the legacy root API.\n                    _isConcurrentMode);\n                    break;\n                  }\n                case SuspenseComponent:\n                  {\n                    didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);\n                    break;\n                  }\n              }\n              break;\n            }\n          case SuspenseComponent:\n            {\n              var suspenseState = returnFiber.memoizedState;\n              var _parentInstance = suspenseState.dehydrated;\n              if (_parentInstance !== null) switch (fiber.tag) {\n                case HostComponent:\n                  var _type2 = fiber.type;\n                  var _props2 = fiber.pendingProps;\n                  didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);\n                  break;\n                case HostText:\n                  var _text2 = fiber.pendingProps;\n                  didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\n                  break;\n                case SuspenseComponent:\n                  didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);\n                  break;\n              }\n              break;\n            }\n          default:\n            return;\n        }\n      }\n    }\n    function insertNonHydratedInstance(returnFiber, fiber) {\n      fiber.flags = fiber.flags & ~Hydrating | Placement;\n      warnNonhydratedInstance(returnFiber, fiber);\n    }\n    function tryHydrate(fiber, nextInstance) {\n      switch (fiber.tag) {\n        case HostComponent:\n          {\n            var type = fiber.type;\n            var props = fiber.pendingProps;\n            var instance = canHydrateInstance(nextInstance, type, props);\n            if (instance !== null) {\n              fiber.stateNode = instance;\n              hydrationParentFiber = fiber;\n              nextHydratableInstance = getFirstHydratableChild(instance);\n              return true;\n            }\n            return false;\n          }\n        case HostText:\n          {\n            var text = fiber.pendingProps;\n            var textInstance = canHydrateTextInstance(nextInstance, text);\n            if (textInstance !== null) {\n              fiber.stateNode = textInstance;\n              hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n\n              nextHydratableInstance = null;\n              return true;\n            }\n            return false;\n          }\n        case SuspenseComponent:\n          {\n            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\n            if (suspenseInstance !== null) {\n              var suspenseState = {\n                dehydrated: suspenseInstance,\n                treeContext: getSuspendedTreeContext(),\n                retryLane: OffscreenLane\n              };\n              fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n              // This simplifies the code for getHostSibling and deleting nodes,\n              // since it doesn't have to consider all Suspense boundaries and\n              // check if they're dehydrated ones or not.\n\n              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n              dehydratedFragment.return = fiber;\n              fiber.child = dehydratedFragment;\n              hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n              // it during the first pass. Instead, we'll reenter it later.\n\n              nextHydratableInstance = null;\n              return true;\n            }\n            return false;\n          }\n        default:\n          return false;\n      }\n    }\n    function shouldClientRenderOnMismatch(fiber) {\n      return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\n    }\n    function throwOnHydrationMismatch(fiber) {\n      throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');\n    }\n    function tryToClaimNextHydratableInstance(fiber) {\n      if (!isHydrating) {\n        return;\n      }\n      var nextInstance = nextHydratableInstance;\n      if (!nextInstance) {\n        if (shouldClientRenderOnMismatch(fiber)) {\n          warnNonhydratedInstance(hydrationParentFiber, fiber);\n          throwOnHydrationMismatch();\n        } // Nothing to hydrate. Make it an insertion.\n\n        insertNonHydratedInstance(hydrationParentFiber, fiber);\n        isHydrating = false;\n        hydrationParentFiber = fiber;\n        return;\n      }\n      var firstAttemptedInstance = nextInstance;\n      if (!tryHydrate(fiber, nextInstance)) {\n        if (shouldClientRenderOnMismatch(fiber)) {\n          warnNonhydratedInstance(hydrationParentFiber, fiber);\n          throwOnHydrationMismatch();\n        } // If we can't hydrate this instance let's try the next one.\n        // We use this as a heuristic. It's based on intuition and not data so it\n        // might be flawed or unnecessary.\n\n        nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n        var prevHydrationParentFiber = hydrationParentFiber;\n        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n          // Nothing to hydrate. Make it an insertion.\n          insertNonHydratedInstance(hydrationParentFiber, fiber);\n          isHydrating = false;\n          hydrationParentFiber = fiber;\n          return;\n        } // We matched the next one, we'll now assume that the first one was\n        // superfluous and we'll delete it. Since we can't eagerly delete it\n        // we'll have to schedule a deletion. To do that, this node needs a dummy\n        // fiber associated with it.\n\n        deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n      }\n    }\n    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n      if (!supportsHydration) {\n        throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n      var instance = fiber.stateNode;\n      var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\n\n      fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n      // is a new ref we mark this as an update.\n\n      if (updatePayload !== null) {\n        return true;\n      }\n      return false;\n    }\n    function prepareToHydrateHostTextInstance(fiber) {\n      if (!supportsHydration) {\n        throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n      var textInstance = fiber.stateNode;\n      var textContent = fiber.memoizedProps;\n      var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);\n      if (shouldUpdate) {\n        // We assume that prepareToHydrateHostTextInstance is called in a context where the\n        // hydration parent is the parent host component of this host text.\n        var returnFiber = hydrationParentFiber;\n        if (returnFiber !== null) {\n          switch (returnFiber.tag) {\n            case HostRoot:\n              {\n                var parentContainer = returnFiber.stateNode.containerInfo;\n                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent,\n                // TODO: Delete this argument when we remove the legacy root API.\n                isConcurrentMode);\n                break;\n              }\n            case HostComponent:\n              {\n                var parentType = returnFiber.type;\n                var parentProps = returnFiber.memoizedProps;\n                var parentInstance = returnFiber.stateNode;\n                var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent,\n                // TODO: Delete this argument when we remove the legacy root API.\n                _isConcurrentMode2);\n                break;\n              }\n          }\n        }\n      }\n      return shouldUpdate;\n    }\n    function prepareToHydrateHostSuspenseInstance(fiber) {\n      if (!supportsHydration) {\n        throw new Error('Expected prepareToHydrateHostSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n      var suspenseState = fiber.memoizedState;\n      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n      if (!suspenseInstance) {\n        throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n      hydrateSuspenseInstance(suspenseInstance, fiber);\n    }\n    function skipPastDehydratedSuspenseInstance(fiber) {\n      if (!supportsHydration) {\n        throw new Error('Expected skipPastDehydratedSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n      var suspenseState = fiber.memoizedState;\n      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n      if (!suspenseInstance) {\n        throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n      return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n    }\n    function popToNextHostParent(fiber) {\n      var parent = fiber.return;\n      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\n        parent = parent.return;\n      }\n      hydrationParentFiber = parent;\n    }\n    function popHydrationState(fiber) {\n      if (!supportsHydration) {\n        return false;\n      }\n      if (fiber !== hydrationParentFiber) {\n        // We're deeper than the current hydration context, inside an inserted\n        // tree.\n        return false;\n      }\n      if (!isHydrating) {\n        // If we're not currently hydrating but we're in a hydration context, then\n        // we were an insertion and now need to pop up reenter hydration of our\n        // siblings.\n        popToNextHostParent(fiber);\n        isHydrating = true;\n        return false;\n      } // If we have any remaining hydratable nodes, we need to delete them now.\n      // We only do this deeper than head and body since they tend to have random\n      // other nodes in them. We also ignore components with pure text content in\n      // side of them. We also don't delete anything inside the root container.\n\n      if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n        var nextInstance = nextHydratableInstance;\n        if (nextInstance) {\n          if (shouldClientRenderOnMismatch(fiber)) {\n            warnIfUnhydratedTailNodes(fiber);\n            throwOnHydrationMismatch();\n          } else {\n            while (nextInstance) {\n              deleteHydratableInstance(fiber, nextInstance);\n              nextInstance = getNextHydratableSibling(nextInstance);\n            }\n          }\n        }\n      }\n      popToNextHostParent(fiber);\n      if (fiber.tag === SuspenseComponent) {\n        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n      } else {\n        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n      }\n      return true;\n    }\n    function hasUnhydratedTailNodes() {\n      return isHydrating && nextHydratableInstance !== null;\n    }\n    function warnIfUnhydratedTailNodes(fiber) {\n      var nextInstance = nextHydratableInstance;\n      while (nextInstance) {\n        warnUnhydratedInstance(fiber, nextInstance);\n        nextInstance = getNextHydratableSibling(nextInstance);\n      }\n    }\n    function resetHydrationState() {\n      if (!supportsHydration) {\n        return;\n      }\n      hydrationParentFiber = null;\n      nextHydratableInstance = null;\n      isHydrating = false;\n      didSuspendOrErrorDEV = false;\n    }\n    function upgradeHydrationErrorsToRecoverable() {\n      if (hydrationErrors !== null) {\n        // Successfully completed a forced client render. The errors that occurred\n        // during the hydration attempt are now recovered. We will log them in\n        // commit phase, once the entire tree has finished.\n        queueRecoverableErrors(hydrationErrors);\n        hydrationErrors = null;\n      }\n    }\n    function getIsHydrating() {\n      return isHydrating;\n    }\n    function queueHydrationError(error) {\n      if (hydrationErrors === null) {\n        hydrationErrors = [error];\n      } else {\n        hydrationErrors.push(error);\n      }\n    }\n    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\n    var NoTransition = null;\n    function requestCurrentTransition() {\n      return ReactCurrentBatchConfig.transition;\n    }\n\n    /**\n     * Performs equality by iterating through keys on an object and returning false\n     * when any key has values which are not strictly equal between the arguments.\n     * Returns true when the values of all keys are strictly equal.\n     */\n\n    function shallowEqual(objA, objB) {\n      if (objectIs(objA, objB)) {\n        return true;\n      }\n      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n        return false;\n      }\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n      if (keysA.length !== keysB.length) {\n        return false;\n      } // Test for A's keys different from B.\n\n      for (var i = 0; i < keysA.length; i++) {\n        var currentKey = keysA[i];\n        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    function describeFiber(fiber) {\n      var owner = fiber._debugOwner ? fiber._debugOwner.type : null;\n      var source = fiber._debugSource;\n      switch (fiber.tag) {\n        case HostComponent:\n          return describeBuiltInComponentFrame(fiber.type);\n        case LazyComponent:\n          return describeBuiltInComponentFrame('Lazy');\n        case SuspenseComponent:\n          return describeBuiltInComponentFrame('Suspense');\n        case SuspenseListComponent:\n          return describeBuiltInComponentFrame('SuspenseList');\n        case FunctionComponent:\n        case IndeterminateComponent:\n        case SimpleMemoComponent:\n          return describeFunctionComponentFrame(fiber.type);\n        case ForwardRef:\n          return describeFunctionComponentFrame(fiber.type.render);\n        case ClassComponent:\n          return describeClassComponentFrame(fiber.type);\n        default:\n          return '';\n      }\n    }\n    function getStackByFiberInDevAndProd(workInProgress) {\n      try {\n        var info = '';\n        var node = workInProgress;\n        do {\n          info += describeFiber(node);\n          node = node.return;\n        } while (node);\n        return info;\n      } catch (x) {\n        return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n      }\n    }\n    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n    var current = null;\n    var isRendering = false;\n    function getCurrentFiberOwnerNameInDevOrNull() {\n      {\n        if (current === null) {\n          return null;\n        }\n        var owner = current._debugOwner;\n        if (owner !== null && typeof owner !== 'undefined') {\n          return getComponentNameFromFiber(owner);\n        }\n      }\n      return null;\n    }\n    function getCurrentFiberStackInDev() {\n      {\n        if (current === null) {\n          return '';\n        } // Safe because if current fiber exists, we are reconciling,\n        // and it is guaranteed to be the work-in-progress version.\n\n        return getStackByFiberInDevAndProd(current);\n      }\n    }\n    function resetCurrentFiber() {\n      {\n        ReactDebugCurrentFrame$1.getCurrentStack = null;\n        current = null;\n        isRendering = false;\n      }\n    }\n    function setCurrentFiber(fiber) {\n      {\n        ReactDebugCurrentFrame$1.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n        current = fiber;\n        isRendering = false;\n      }\n    }\n    function getCurrentFiber() {\n      {\n        return current;\n      }\n    }\n    function setIsRendering(rendering) {\n      {\n        isRendering = rendering;\n      }\n    }\n    var ReactStrictModeWarnings = {\n      recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n      flushPendingUnsafeLifecycleWarnings: function () {},\n      recordLegacyContextWarning: function (fiber, instance) {},\n      flushLegacyContextWarning: function () {},\n      discardPendingWarnings: function () {}\n    };\n    {\n      var findStrictRoot = function (fiber) {\n        var maybeStrictRoot = null;\n        var node = fiber;\n        while (node !== null) {\n          if (node.mode & StrictLegacyMode) {\n            maybeStrictRoot = node;\n          }\n          node = node.return;\n        }\n        return maybeStrictRoot;\n      };\n      var setToSortedString = function (set) {\n        var array = [];\n        set.forEach(function (value) {\n          array.push(value);\n        });\n        return array.sort().join(', ');\n      };\n      var pendingComponentWillMountWarnings = [];\n      var pendingUNSAFE_ComponentWillMountWarnings = [];\n      var pendingComponentWillReceivePropsWarnings = [];\n      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n      var pendingComponentWillUpdateWarnings = [];\n      var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n      var didWarnAboutUnsafeLifecycles = new Set();\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n        // Dedupe strategy: Warn once per component.\n        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n          return;\n        }\n        if (typeof instance.componentWillMount === 'function' &&\n        // Don't warn about react-lifecycles-compat polyfilled components.\n        instance.componentWillMount.__suppressDeprecationWarning !== true) {\n          pendingComponentWillMountWarnings.push(fiber);\n        }\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n        }\n        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n          pendingComponentWillReceivePropsWarnings.push(fiber);\n        }\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n        }\n        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n          pendingComponentWillUpdateWarnings.push(fiber);\n        }\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n        }\n      };\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n        // We do an initial pass to gather component names\n        var componentWillMountUniqueNames = new Set();\n        if (pendingComponentWillMountWarnings.length > 0) {\n          pendingComponentWillMountWarnings.forEach(function (fiber) {\n            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillMountWarnings = [];\n        }\n        var UNSAFE_componentWillMountUniqueNames = new Set();\n        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillMountWarnings = [];\n        }\n        var componentWillReceivePropsUniqueNames = new Set();\n        if (pendingComponentWillReceivePropsWarnings.length > 0) {\n          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillReceivePropsWarnings = [];\n        }\n        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        }\n        var componentWillUpdateUniqueNames = new Set();\n        if (pendingComponentWillUpdateWarnings.length > 0) {\n          pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillUpdateWarnings = [];\n        }\n        var UNSAFE_componentWillUpdateUniqueNames = new Set();\n        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        } // Finally, we flush all the warnings\n        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n        if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n          error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n        }\n        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n          error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n        }\n        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n          error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n        }\n        if (componentWillMountUniqueNames.size > 0) {\n          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n          warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n        }\n        if (componentWillReceivePropsUniqueNames.size > 0) {\n          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n          warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n        }\n        if (componentWillUpdateUniqueNames.size > 0) {\n          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n          warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n        }\n      };\n      var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n      var didWarnAboutLegacyContext = new Set();\n      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n        var strictRoot = findStrictRoot(fiber);\n        if (strictRoot === null) {\n          error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n          return;\n        } // Dedup strategy: Warn once per component.\n\n        if (didWarnAboutLegacyContext.has(fiber.type)) {\n          return;\n        }\n        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n          if (warningsForRoot === undefined) {\n            warningsForRoot = [];\n            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n          }\n          warningsForRoot.push(fiber);\n        }\n      };\n      ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n          if (fiberArray.length === 0) {\n            return;\n          }\n          var firstFiber = fiberArray[0];\n          var uniqueNames = new Set();\n          fiberArray.forEach(function (fiber) {\n            uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutLegacyContext.add(fiber.type);\n          });\n          var sortedNames = setToSortedString(uniqueNames);\n          try {\n            setCurrentFiber(firstFiber);\n            error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n          } finally {\n            resetCurrentFiber();\n          }\n        });\n      };\n      ReactStrictModeWarnings.discardPendingWarnings = function () {\n        pendingComponentWillMountWarnings = [];\n        pendingUNSAFE_ComponentWillMountWarnings = [];\n        pendingComponentWillReceivePropsWarnings = [];\n        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        pendingComponentWillUpdateWarnings = [];\n        pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        pendingLegacyContextWarning = new Map();\n      };\n    }\n\n    /*\n     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n     *\n     * The functions in this module will throw an easier-to-understand,\n     * easier-to-debug exception with a clear errors message message explaining the\n     * problem. (Instead of a confusing exception thrown inside the implementation\n     * of the `value` object).\n     */\n    // $FlowFixMe only called in DEV, so void return is not possible.\n    function typeName(value) {\n      {\n        // toStringTag is needed for namespaced types like Temporal.Instant\n        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n        return type;\n      }\n    } // $FlowFixMe only called in DEV, so void return is not possible.\n\n    function willCoercionThrow(value) {\n      {\n        try {\n          testStringCoercion(value);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      }\n    }\n    function testStringCoercion(value) {\n      // If you ended up here by following an exception call stack, here's what's\n      // happened: you supplied an object or symbol value to React (as a prop, key,\n      // DOM attribute, CSS property, string ref, etc.) and when React tried to\n      // coerce it to a string using `'' + value`, an exception was thrown.\n      //\n      // The most common types that will cause this exception are `Symbol` instances\n      // and Temporal objects like `Temporal.Instant`. But any object that has a\n      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n      // exception. (Library authors do this to prevent users from using built-in\n      // numeric operators like `+` or comparison operators like `>=` because custom\n      // methods are needed to perform accurate arithmetic or comparison.)\n      //\n      // To fix the problem, coerce this object or symbol value to a string before\n      // passing it to React. The most reliable way is usually `String(value)`.\n      //\n      // To find which value is throwing, check the browser or debugger console.\n      // Before this exception was thrown, there should be `console.error` output\n      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n      // problem and how that type was used: key, atrribute, input value prop, etc.\n      // In most cases, this console output also shows the component and its\n      // ancestor components where the exception happened.\n      //\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      return '' + value;\n    }\n    function checkKeyStringCoercion(value) {\n      {\n        if (willCoercionThrow(value)) {\n          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n\n    function checkPropStringCoercion(value, propName) {\n      {\n        if (willCoercionThrow(value)) {\n          error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n\n    function resolveDefaultProps(Component, baseProps) {\n      if (Component && Component.defaultProps) {\n        // Resolve default props. Taken from ReactElement\n        var props = assign({}, baseProps);\n        var defaultProps = Component.defaultProps;\n        for (var propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n        return props;\n      }\n      return baseProps;\n    }\n    var valueCursor = createCursor(null);\n    var rendererSigil;\n    {\n      // Use this to detect multiple renderers using the same context\n      rendererSigil = {};\n    }\n    var currentlyRenderingFiber = null;\n    var lastContextDependency = null;\n    var lastFullyObservedContext = null;\n    var isDisallowedContextReadInDEV = false;\n    function resetContextDependencies() {\n      // This is called right before React yields execution, to ensure `readContext`\n      // cannot be called outside the render phase.\n      currentlyRenderingFiber = null;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n    function enterDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = true;\n      }\n    }\n    function exitDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n    function pushProvider(providerFiber, context, nextValue) {\n      if (isPrimaryRenderer) {\n        push(valueCursor, context._currentValue, providerFiber);\n        context._currentValue = nextValue;\n        {\n          if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n            error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n          }\n          context._currentRenderer = rendererSigil;\n        }\n      } else {\n        push(valueCursor, context._currentValue2, providerFiber);\n        context._currentValue2 = nextValue;\n        {\n          if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n            error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n          }\n          context._currentRenderer2 = rendererSigil;\n        }\n      }\n    }\n    function popProvider(context, providerFiber) {\n      var currentValue = valueCursor.current;\n      pop(valueCursor, providerFiber);\n      if (isPrimaryRenderer) {\n        {\n          context._currentValue = currentValue;\n        }\n      } else {\n        {\n          context._currentValue2 = currentValue;\n        }\n      }\n    }\n    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n      // Update the child lanes of all the ancestors, including the alternates.\n      var node = parent;\n      while (node !== null) {\n        var alternate = node.alternate;\n        if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n          node.childLanes = mergeLanes(node.childLanes, renderLanes);\n          if (alternate !== null) {\n            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n          }\n        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n        }\n        if (node === propagationRoot) {\n          break;\n        }\n        node = node.return;\n      }\n      {\n        if (node !== propagationRoot) {\n          error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n      }\n    }\n    function propagateContextChange(workInProgress, context, renderLanes) {\n      {\n        propagateContextChange_eager(workInProgress, context, renderLanes);\n      }\n    }\n    function propagateContextChange_eager(workInProgress, context, renderLanes) {\n      var fiber = workInProgress.child;\n      if (fiber !== null) {\n        // Set the return pointer of the child to the work-in-progress fiber.\n        fiber.return = workInProgress;\n      }\n      while (fiber !== null) {\n        var nextFiber = void 0; // Visit this fiber.\n\n        var list = fiber.dependencies;\n        if (list !== null) {\n          nextFiber = fiber.child;\n          var dependency = list.firstContext;\n          while (dependency !== null) {\n            // Check if the context matches.\n            if (dependency.context === context) {\n              // Match! Schedule an update on this fiber.\n              if (fiber.tag === ClassComponent) {\n                // Schedule a force update on the work-in-progress.\n                var lane = pickArbitraryLane(renderLanes);\n                var update = createUpdate(NoTimestamp, lane);\n                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n                // update to the current fiber, too, which means it will persist even if\n                // this render is thrown away. Since it's a race condition, not sure it's\n                // worth fixing.\n                // Inlined `enqueueUpdate` to remove interleaved update check\n\n                var updateQueue = fiber.updateQueue;\n                if (updateQueue === null) ;else {\n                  var sharedQueue = updateQueue.shared;\n                  var pending = sharedQueue.pending;\n                  if (pending === null) {\n                    // This is the first update. Create a circular list.\n                    update.next = update;\n                  } else {\n                    update.next = pending.next;\n                    pending.next = update;\n                  }\n                  sharedQueue.pending = update;\n                }\n              }\n              fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n              var alternate = fiber.alternate;\n              if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n              }\n              scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n              list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n              // dependency list.\n\n              break;\n            }\n            dependency = dependency.next;\n          }\n        } else if (fiber.tag === ContextProvider) {\n          // Don't scan deeper if this is a matching provider\n          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n        } else if (fiber.tag === DehydratedFragment) {\n          // If a dehydrated suspense boundary is in this subtree, we don't know\n          // if it will have any context consumers in it. The best we can do is\n          // mark it as having updates.\n          var parentSuspense = fiber.return;\n          if (parentSuspense === null) {\n            throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n          }\n          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n          var _alternate = parentSuspense.alternate;\n          if (_alternate !== null) {\n            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n          } // This is intentionally passing this fiber as the parent\n          // because we want to schedule this fiber as having work\n          // on its children. We'll use the childLanes on\n          // this fiber to indicate that a context has changed.\n\n          scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n          nextFiber = fiber.sibling;\n        } else {\n          // Traverse down.\n          nextFiber = fiber.child;\n        }\n        if (nextFiber !== null) {\n          // Set the return pointer of the child to the work-in-progress fiber.\n          nextFiber.return = fiber;\n        } else {\n          // No child. Traverse to next sibling.\n          nextFiber = fiber;\n          while (nextFiber !== null) {\n            if (nextFiber === workInProgress) {\n              // We're back to the root of this subtree. Exit.\n              nextFiber = null;\n              break;\n            }\n            var sibling = nextFiber.sibling;\n            if (sibling !== null) {\n              // Set the return pointer of the sibling to the work-in-progress fiber.\n              sibling.return = nextFiber.return;\n              nextFiber = sibling;\n              break;\n            } // No more siblings. Traverse up.\n\n            nextFiber = nextFiber.return;\n          }\n        }\n        fiber = nextFiber;\n      }\n    }\n    function prepareToReadContext(workInProgress, renderLanes) {\n      currentlyRenderingFiber = workInProgress;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      var dependencies = workInProgress.dependencies;\n      if (dependencies !== null) {\n        {\n          var firstContext = dependencies.firstContext;\n          if (firstContext !== null) {\n            if (includesSomeLane(dependencies.lanes, renderLanes)) {\n              // Context list has a pending update. Mark that this fiber performed work.\n              markWorkInProgressReceivedUpdate();\n            } // Reset the work-in-progress list\n\n            dependencies.firstContext = null;\n          }\n        }\n      }\n    }\n    function readContext(context) {\n      {\n        // This warning would fire if you read context inside a Hook like useMemo.\n        // Unlike the class check below, it's not enforced in production for perf.\n        if (isDisallowedContextReadInDEV) {\n          error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n        }\n      }\n      var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n      if (lastFullyObservedContext === context) ;else {\n        var contextItem = {\n          context: context,\n          memoizedValue: value,\n          next: null\n        };\n        if (lastContextDependency === null) {\n          if (currentlyRenderingFiber === null) {\n            throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n          } // This is the first dependency for this component. Create a new list.\n\n          lastContextDependency = contextItem;\n          currentlyRenderingFiber.dependencies = {\n            lanes: NoLanes,\n            firstContext: contextItem\n          };\n        } else {\n          // Append a new context item.\n          lastContextDependency = lastContextDependency.next = contextItem;\n        }\n      }\n      return value;\n    }\n\n    // render. When this render exits, either because it finishes or because it is\n    // interrupted, the interleaved updates will be transferred onto the main part\n    // of the queue.\n\n    var concurrentQueues = null;\n    function pushConcurrentUpdateQueue(queue) {\n      if (concurrentQueues === null) {\n        concurrentQueues = [queue];\n      } else {\n        concurrentQueues.push(queue);\n      }\n    }\n    function finishQueueingConcurrentUpdates() {\n      // Transfer the interleaved updates onto the main queue. Each queue has a\n      // `pending` field and an `interleaved` field. When they are not null, they\n      // point to the last node in a circular linked list. We need to append the\n      // interleaved list to the end of the pending list by joining them into a\n      // single, circular list.\n      if (concurrentQueues !== null) {\n        for (var i = 0; i < concurrentQueues.length; i++) {\n          var queue = concurrentQueues[i];\n          var lastInterleavedUpdate = queue.interleaved;\n          if (lastInterleavedUpdate !== null) {\n            queue.interleaved = null;\n            var firstInterleavedUpdate = lastInterleavedUpdate.next;\n            var lastPendingUpdate = queue.pending;\n            if (lastPendingUpdate !== null) {\n              var firstPendingUpdate = lastPendingUpdate.next;\n              lastPendingUpdate.next = firstInterleavedUpdate;\n              lastInterleavedUpdate.next = firstPendingUpdate;\n            }\n            queue.pending = lastInterleavedUpdate;\n          }\n        }\n        concurrentQueues = null;\n      }\n    }\n    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n      var interleaved = queue.interleaved;\n      if (interleaved === null) {\n        // This is the first update. Create a circular list.\n        update.next = update; // At the end of the current render, this queue's interleaved updates will\n        // be transferred to the pending queue.\n\n        pushConcurrentUpdateQueue(queue);\n      } else {\n        update.next = interleaved.next;\n        interleaved.next = update;\n      }\n      queue.interleaved = update;\n      return markUpdateLaneFromFiberToRoot(fiber, lane);\n    }\n    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {\n      var interleaved = queue.interleaved;\n      if (interleaved === null) {\n        // This is the first update. Create a circular list.\n        update.next = update; // At the end of the current render, this queue's interleaved updates will\n        // be transferred to the pending queue.\n\n        pushConcurrentUpdateQueue(queue);\n      } else {\n        update.next = interleaved.next;\n        interleaved.next = update;\n      }\n      queue.interleaved = update;\n    }\n    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n      var interleaved = queue.interleaved;\n      if (interleaved === null) {\n        // This is the first update. Create a circular list.\n        update.next = update; // At the end of the current render, this queue's interleaved updates will\n        // be transferred to the pending queue.\n\n        pushConcurrentUpdateQueue(queue);\n      } else {\n        update.next = interleaved.next;\n        interleaved.next = update;\n      }\n      queue.interleaved = update;\n      return markUpdateLaneFromFiberToRoot(fiber, lane);\n    }\n    function enqueueConcurrentRenderForLane(fiber, lane) {\n      return markUpdateLaneFromFiberToRoot(fiber, lane);\n    } // Calling this function outside this module should only be done for backwards\n    // compatibility and should always be accompanied by a warning.\n\n    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\n    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n      // Update the source fiber's lanes\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n      var alternate = sourceFiber.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      }\n      {\n        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      } // Walk the parent path to the root and update the child lanes.\n\n      var node = sourceFiber;\n      var parent = sourceFiber.return;\n      while (parent !== null) {\n        parent.childLanes = mergeLanes(parent.childLanes, lane);\n        alternate = parent.alternate;\n        if (alternate !== null) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n        } else {\n          {\n            if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n            }\n          }\n        }\n        node = parent;\n        parent = parent.return;\n      }\n      if (node.tag === HostRoot) {\n        var root = node.stateNode;\n        return root;\n      } else {\n        return null;\n      }\n    }\n    var UpdateState = 0;\n    var ReplaceState = 1;\n    var ForceUpdate = 2;\n    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n    // It should only be read right after calling `processUpdateQueue`, via\n    // `checkHasForceUpdateAfterProcessing`.\n\n    var hasForceUpdate = false;\n    var didWarnUpdateInsideUpdate;\n    var currentlyProcessingQueue;\n    {\n      didWarnUpdateInsideUpdate = false;\n      currentlyProcessingQueue = null;\n    }\n    function initializeUpdateQueue(fiber) {\n      var queue = {\n        baseState: fiber.memoizedState,\n        firstBaseUpdate: null,\n        lastBaseUpdate: null,\n        shared: {\n          pending: null,\n          interleaved: null,\n          lanes: NoLanes\n        },\n        effects: null\n      };\n      fiber.updateQueue = queue;\n    }\n    function cloneUpdateQueue(current, workInProgress) {\n      // Clone the update queue from current. Unless it's already a clone.\n      var queue = workInProgress.updateQueue;\n      var currentQueue = current.updateQueue;\n      if (queue === currentQueue) {\n        var clone = {\n          baseState: currentQueue.baseState,\n          firstBaseUpdate: currentQueue.firstBaseUpdate,\n          lastBaseUpdate: currentQueue.lastBaseUpdate,\n          shared: currentQueue.shared,\n          effects: currentQueue.effects\n        };\n        workInProgress.updateQueue = clone;\n      }\n    }\n    function createUpdate(eventTime, lane) {\n      var update = {\n        eventTime: eventTime,\n        lane: lane,\n        tag: UpdateState,\n        payload: null,\n        callback: null,\n        next: null\n      };\n      return update;\n    }\n    function enqueueUpdate(fiber, update, lane) {\n      var updateQueue = fiber.updateQueue;\n      if (updateQueue === null) {\n        // Only occurs if the fiber has been unmounted.\n        return null;\n      }\n      var sharedQueue = updateQueue.shared;\n      {\n        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n          error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n          didWarnUpdateInsideUpdate = true;\n        }\n      }\n      if (isUnsafeClassRenderPhaseUpdate()) {\n        // This is an unsafe render phase update. Add directly to the update\n        // queue so we can process it immediately during the current render.\n        var pending = sharedQueue.pending;\n        if (pending === null) {\n          // This is the first update. Create a circular list.\n          update.next = update;\n        } else {\n          update.next = pending.next;\n          pending.next = update;\n        }\n        sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n        // this fiber. This is for backwards compatibility in the case where you\n        // update a different component during render phase than the one that is\n        // currently renderings (a pattern that is accompanied by a warning).\n\n        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n      } else {\n        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n      }\n    }\n    function entangleTransitions(root, fiber, lane) {\n      var updateQueue = fiber.updateQueue;\n      if (updateQueue === null) {\n        // Only occurs if the fiber has been unmounted.\n        return;\n      }\n      var sharedQueue = updateQueue.shared;\n      if (isTransitionLane(lane)) {\n        var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n        // have finished. We can remove them from the shared queue, which represents\n        // a superset of the actually pending lanes. In some cases we may entangle\n        // more than we need to, but that's OK. In fact it's worse if we *don't*\n        // entangle when we should.\n\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n        // the lane finished since the last time we entangled it. So we need to\n        // entangle it again, just to be sure.\n\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n      // Captured updates are updates that are thrown by a child during the render\n      // phase. They should be discarded if the render is aborted. Therefore,\n      // we should only put them on the work-in-progress queue, not the current one.\n      var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n      var current = workInProgress.alternate;\n      if (current !== null) {\n        var currentQueue = current.updateQueue;\n        if (queue === currentQueue) {\n          // The work-in-progress queue is the same as current. This happens when\n          // we bail out on a parent fiber that then captures an error thrown by\n          // a child. Since we want to append the update only to the work-in\n          // -progress queue, we need to clone the updates. We usually clone during\n          // processUpdateQueue, but that didn't happen in this case because we\n          // skipped over the parent when we bailed out.\n          var newFirst = null;\n          var newLast = null;\n          var firstBaseUpdate = queue.firstBaseUpdate;\n          if (firstBaseUpdate !== null) {\n            // Loop through the updates and clone them.\n            var update = firstBaseUpdate;\n            do {\n              var clone = {\n                eventTime: update.eventTime,\n                lane: update.lane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: update.callback,\n                next: null\n              };\n              if (newLast === null) {\n                newFirst = newLast = clone;\n              } else {\n                newLast.next = clone;\n                newLast = clone;\n              }\n              update = update.next;\n            } while (update !== null); // Append the captured update the end of the cloned list.\n\n            if (newLast === null) {\n              newFirst = newLast = capturedUpdate;\n            } else {\n              newLast.next = capturedUpdate;\n              newLast = capturedUpdate;\n            }\n          } else {\n            // There are no base updates.\n            newFirst = newLast = capturedUpdate;\n          }\n          queue = {\n            baseState: currentQueue.baseState,\n            firstBaseUpdate: newFirst,\n            lastBaseUpdate: newLast,\n            shared: currentQueue.shared,\n            effects: currentQueue.effects\n          };\n          workInProgress.updateQueue = queue;\n          return;\n        }\n      } // Append the update to the end of the list.\n\n      var lastBaseUpdate = queue.lastBaseUpdate;\n      if (lastBaseUpdate === null) {\n        queue.firstBaseUpdate = capturedUpdate;\n      } else {\n        lastBaseUpdate.next = capturedUpdate;\n      }\n      queue.lastBaseUpdate = capturedUpdate;\n    }\n    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n      switch (update.tag) {\n        case ReplaceState:\n          {\n            var payload = update.payload;\n            if (typeof payload === 'function') {\n              // Updater function\n              {\n                enterDisallowedContextReadInDEV();\n              }\n              var nextState = payload.call(instance, prevState, nextProps);\n              {\n                if (workInProgress.mode & StrictLegacyMode) {\n                  setIsStrictModeForDevtools(true);\n                  try {\n                    payload.call(instance, prevState, nextProps);\n                  } finally {\n                    setIsStrictModeForDevtools(false);\n                  }\n                }\n                exitDisallowedContextReadInDEV();\n              }\n              return nextState;\n            } // State object\n\n            return payload;\n          }\n        case CaptureUpdate:\n          {\n            workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n          }\n        // Intentional fallthrough\n\n        case UpdateState:\n          {\n            var _payload = update.payload;\n            var partialState;\n            if (typeof _payload === 'function') {\n              // Updater function\n              {\n                enterDisallowedContextReadInDEV();\n              }\n              partialState = _payload.call(instance, prevState, nextProps);\n              {\n                if (workInProgress.mode & StrictLegacyMode) {\n                  setIsStrictModeForDevtools(true);\n                  try {\n                    _payload.call(instance, prevState, nextProps);\n                  } finally {\n                    setIsStrictModeForDevtools(false);\n                  }\n                }\n                exitDisallowedContextReadInDEV();\n              }\n            } else {\n              // Partial state object\n              partialState = _payload;\n            }\n            if (partialState === null || partialState === undefined) {\n              // Null and undefined are treated as no-ops.\n              return prevState;\n            } // Merge the partial state and the previous state.\n\n            return assign({}, prevState, partialState);\n          }\n        case ForceUpdate:\n          {\n            hasForceUpdate = true;\n            return prevState;\n          }\n      }\n      return prevState;\n    }\n    function processUpdateQueue(workInProgress, props, instance, renderLanes) {\n      // This is always non-null on a ClassComponent or HostRoot\n      var queue = workInProgress.updateQueue;\n      hasForceUpdate = false;\n      {\n        currentlyProcessingQueue = queue.shared;\n      }\n      var firstBaseUpdate = queue.firstBaseUpdate;\n      var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n      var pendingQueue = queue.shared.pending;\n      if (pendingQueue !== null) {\n        queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n        // and last so that it's non-circular.\n\n        var lastPendingUpdate = pendingQueue;\n        var firstPendingUpdate = lastPendingUpdate.next;\n        lastPendingUpdate.next = null; // Append pending updates to base queue\n\n        if (lastBaseUpdate === null) {\n          firstBaseUpdate = firstPendingUpdate;\n        } else {\n          lastBaseUpdate.next = firstPendingUpdate;\n        }\n        lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n        // we need to transfer the updates to that queue, too. Because the base\n        // queue is a singly-linked list with no cycles, we can append to both\n        // lists and take advantage of structural sharing.\n        // TODO: Pass `current` as argument\n\n        var current = workInProgress.alternate;\n        if (current !== null) {\n          // This is always non-null on a ClassComponent or HostRoot\n          var currentQueue = current.updateQueue;\n          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n          if (currentLastBaseUpdate !== lastBaseUpdate) {\n            if (currentLastBaseUpdate === null) {\n              currentQueue.firstBaseUpdate = firstPendingUpdate;\n            } else {\n              currentLastBaseUpdate.next = firstPendingUpdate;\n            }\n            currentQueue.lastBaseUpdate = lastPendingUpdate;\n          }\n        }\n      } // These values may change as we process the queue.\n\n      if (firstBaseUpdate !== null) {\n        // Iterate through the list of updates to compute the result.\n        var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n        // from the original lanes.\n\n        var newLanes = NoLanes;\n        var newBaseState = null;\n        var newFirstBaseUpdate = null;\n        var newLastBaseUpdate = null;\n        var update = firstBaseUpdate;\n        do {\n          var updateLane = update.lane;\n          var updateEventTime = update.eventTime;\n          if (!isSubsetOfLanes(renderLanes, updateLane)) {\n            // Priority is insufficient. Skip this update. If this is the first\n            // skipped update, the previous update/state is the new base\n            // update/state.\n            var clone = {\n              eventTime: updateEventTime,\n              lane: updateLane,\n              tag: update.tag,\n              payload: update.payload,\n              callback: update.callback,\n              next: null\n            };\n            if (newLastBaseUpdate === null) {\n              newFirstBaseUpdate = newLastBaseUpdate = clone;\n              newBaseState = newState;\n            } else {\n              newLastBaseUpdate = newLastBaseUpdate.next = clone;\n            } // Update the remaining priority in the queue.\n\n            newLanes = mergeLanes(newLanes, updateLane);\n          } else {\n            // This update does have sufficient priority.\n            if (newLastBaseUpdate !== null) {\n              var _clone = {\n                eventTime: updateEventTime,\n                // This update is going to be committed so we never want uncommit\n                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                // this will never be skipped by the check above.\n                lane: NoLane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: update.callback,\n                next: null\n              };\n              newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n            } // Process this update.\n\n            newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n            var callback = update.callback;\n            if (callback !== null &&\n            // If the update was already committed, we should not queue its\n            // callback again.\n            update.lane !== NoLane) {\n              workInProgress.flags |= Callback;\n              var effects = queue.effects;\n              if (effects === null) {\n                queue.effects = [update];\n              } else {\n                effects.push(update);\n              }\n            }\n          }\n          update = update.next;\n          if (update === null) {\n            pendingQueue = queue.shared.pending;\n            if (pendingQueue === null) {\n              break;\n            } else {\n              // An update was scheduled from inside a reducer. Add the new\n              // pending updates to the end of the list and keep processing.\n              var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n              // unravel them when transferring them to the base queue.\n\n              var _firstPendingUpdate = _lastPendingUpdate.next;\n              _lastPendingUpdate.next = null;\n              update = _firstPendingUpdate;\n              queue.lastBaseUpdate = _lastPendingUpdate;\n              queue.shared.pending = null;\n            }\n          }\n        } while (true);\n        if (newLastBaseUpdate === null) {\n          newBaseState = newState;\n        }\n        queue.baseState = newBaseState;\n        queue.firstBaseUpdate = newFirstBaseUpdate;\n        queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n        // process them during this render, but we do need to track which lanes\n        // are remaining.\n\n        var lastInterleaved = queue.shared.interleaved;\n        if (lastInterleaved !== null) {\n          var interleaved = lastInterleaved;\n          do {\n            newLanes = mergeLanes(newLanes, interleaved.lane);\n            interleaved = interleaved.next;\n          } while (interleaved !== lastInterleaved);\n        } else if (firstBaseUpdate === null) {\n          // `queue.lanes` is used for entangling transitions. We can set it back to\n          // zero once the queue is empty.\n          queue.shared.lanes = NoLanes;\n        } // Set the remaining expiration time to be whatever is remaining in the queue.\n        // This should be fine because the only two other things that contribute to\n        // expiration time are props and context. We're already in the middle of the\n        // begin phase by the time we start processing the queue, so we've already\n        // dealt with the props. Context in components that specify\n        // shouldComponentUpdate is tricky; but we'll have to account for\n        // that regardless.\n\n        markSkippedUpdateLanes(newLanes);\n        workInProgress.lanes = newLanes;\n        workInProgress.memoizedState = newState;\n      }\n      {\n        currentlyProcessingQueue = null;\n      }\n    }\n    function callCallback(callback, context) {\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n      }\n      callback.call(context);\n    }\n    function resetHasForceUpdateBeforeProcessing() {\n      hasForceUpdate = false;\n    }\n    function checkHasForceUpdateAfterProcessing() {\n      return hasForceUpdate;\n    }\n    function commitUpdateQueue(finishedWork, finishedQueue, instance) {\n      // Commit the effects\n      var effects = finishedQueue.effects;\n      finishedQueue.effects = null;\n      if (effects !== null) {\n        for (var i = 0; i < effects.length; i++) {\n          var effect = effects[i];\n          var callback = effect.callback;\n          if (callback !== null) {\n            effect.callback = null;\n            callCallback(callback, instance);\n          }\n        }\n      }\n    }\n    var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n    // We'll use it to determine whether we need to initialize legacy refs.\n\n    var emptyRefsObject = new React.Component().refs;\n    var didWarnAboutStateAssignmentForComponent;\n    var didWarnAboutUninitializedState;\n    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n    var didWarnAboutLegacyLifecyclesAndDerivedState;\n    var didWarnAboutUndefinedDerivedState;\n    var warnOnUndefinedDerivedState;\n    var warnOnInvalidCallback;\n    var didWarnAboutDirectlyAssigningPropsToState;\n    var didWarnAboutContextTypeAndContextTypes;\n    var didWarnAboutInvalidateContextType;\n    {\n      didWarnAboutStateAssignmentForComponent = new Set();\n      didWarnAboutUninitializedState = new Set();\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n      didWarnAboutDirectlyAssigningPropsToState = new Set();\n      didWarnAboutUndefinedDerivedState = new Set();\n      didWarnAboutContextTypeAndContextTypes = new Set();\n      didWarnAboutInvalidateContextType = new Set();\n      var didWarnOnInvalidCallback = new Set();\n      warnOnInvalidCallback = function (callback, callerName) {\n        if (callback === null || typeof callback === 'function') {\n          return;\n        }\n        var key = callerName + '_' + callback;\n        if (!didWarnOnInvalidCallback.has(key)) {\n          didWarnOnInvalidCallback.add(key);\n          error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n        }\n      };\n      warnOnUndefinedDerivedState = function (type, partialState) {\n        if (partialState === undefined) {\n          var componentName = getComponentNameFromType(type) || 'Component';\n          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n            didWarnAboutUndefinedDerivedState.add(componentName);\n            error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n          }\n        }\n      }; // This is so gross but it's at least non-critical and can be removed if\n      // it causes problems. This is meant to give a nicer error message for\n      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n      // ...)) which otherwise throws a \"_processChildContext is not a function\"\n      // exception.\n\n      Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n        enumerable: false,\n        value: function () {\n          throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n        }\n      });\n      Object.freeze(fakeInternalInstance);\n    }\n    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n      var prevState = workInProgress.memoizedState;\n      var partialState = getDerivedStateFromProps(nextProps, prevState);\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n          try {\n            // Invoke the function an extra time to help detect side-effects.\n            partialState = getDerivedStateFromProps(nextProps, prevState);\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n        warnOnUndefinedDerivedState(ctor, partialState);\n      } // Merge the partial state and the previous state.\n\n      var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n      workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n      // base state.\n\n      if (workInProgress.lanes === NoLanes) {\n        // Queue is always non-null for classes\n        var updateQueue = workInProgress.updateQueue;\n        updateQueue.baseState = memoizedState;\n      }\n    }\n    var classComponentUpdater = {\n      isMounted: isMounted,\n      enqueueSetState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(eventTime, lane);\n        update.payload = payload;\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, 'setState');\n          }\n          update.callback = callback;\n        }\n        var root = enqueueUpdate(fiber, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n          entangleTransitions(root, fiber, lane);\n        }\n        {\n          markStateUpdateScheduled(fiber, lane);\n        }\n      },\n      enqueueReplaceState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(eventTime, lane);\n        update.tag = ReplaceState;\n        update.payload = payload;\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, 'replaceState');\n          }\n          update.callback = callback;\n        }\n        var root = enqueueUpdate(fiber, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n          entangleTransitions(root, fiber, lane);\n        }\n        {\n          markStateUpdateScheduled(fiber, lane);\n        }\n      },\n      enqueueForceUpdate: function (inst, callback) {\n        var fiber = get(inst);\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(eventTime, lane);\n        update.tag = ForceUpdate;\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, 'forceUpdate');\n          }\n          update.callback = callback;\n        }\n        var root = enqueueUpdate(fiber, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n          entangleTransitions(root, fiber, lane);\n        }\n        {\n          markForceUpdateScheduled(fiber, lane);\n        }\n      }\n    };\n    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n      var instance = workInProgress.stateNode;\n      if (typeof instance.shouldComponentUpdate === 'function') {\n        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n        {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              // Invoke the function an extra time to help detect side-effects.\n              shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          if (shouldUpdate === undefined) {\n            error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n          }\n        }\n        return shouldUpdate;\n      }\n      if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n      }\n      return true;\n    }\n    function checkClassInstance(workInProgress, ctor, newProps) {\n      var instance = workInProgress.stateNode;\n      {\n        var name = getComponentNameFromType(ctor) || 'Component';\n        var renderPresent = instance.render;\n        if (!renderPresent) {\n          if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n            error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n          } else {\n            error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n          }\n        }\n        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n          error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n        }\n        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n          error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n        }\n        if (instance.propTypes) {\n          error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n        }\n        if (instance.contextType) {\n          error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n        }\n        {\n          if (instance.contextTypes) {\n            error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n          }\n          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n            didWarnAboutContextTypeAndContextTypes.add(ctor);\n            error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n          }\n        }\n        if (typeof instance.componentShouldUpdate === 'function') {\n          error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n        }\n        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n          error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n        }\n        if (typeof instance.componentDidUnmount === 'function') {\n          error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n        }\n        if (typeof instance.componentDidReceiveProps === 'function') {\n          error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n        }\n        if (typeof instance.componentWillRecieveProps === 'function') {\n          error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n        }\n        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n          error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n        }\n        var hasMutatedProps = instance.props !== newProps;\n        if (instance.props !== undefined && hasMutatedProps) {\n          error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n        }\n        if (instance.defaultProps) {\n          error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n          error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n        }\n        if (typeof instance.getDerivedStateFromProps === 'function') {\n          error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n        }\n        if (typeof instance.getDerivedStateFromError === 'function') {\n          error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n        }\n        if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n          error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n        }\n        var _state = instance.state;\n        if (_state && (typeof _state !== 'object' || isArray(_state))) {\n          error('%s.state: must be set to an object or null', name);\n        }\n        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n          error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n        }\n      }\n    }\n    function adoptClassInstance(workInProgress, instance) {\n      instance.updater = classComponentUpdater;\n      workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n      set(instance, workInProgress);\n      {\n        instance._reactInternalInstance = fakeInternalInstance;\n      }\n    }\n    function constructClassInstance(workInProgress, ctor, props) {\n      var isLegacyContextConsumer = false;\n      var unmaskedContext = emptyContextObject;\n      var context = emptyContextObject;\n      var contextType = ctor.contextType;\n      {\n        if ('contextType' in ctor) {\n          var isValid =\n          // Allow null for conditional declaration\n          contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n            didWarnAboutInvalidateContextType.add(ctor);\n            var addendum = '';\n            if (contextType === undefined) {\n              addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n            } else if (typeof contextType !== 'object') {\n              addendum = ' However, it is set to a ' + typeof contextType + '.';\n            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n              addendum = ' Did you accidentally pass the Context.Provider instead?';\n            } else if (contextType._context !== undefined) {\n              // <Context.Consumer>\n              addendum = ' Did you accidentally pass the Context.Consumer instead?';\n            } else {\n              addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n            }\n            error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n          }\n        }\n      }\n      if (typeof contextType === 'object' && contextType !== null) {\n        context = readContext(contextType);\n      } else {\n        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        var contextTypes = ctor.contextTypes;\n        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n      }\n      var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n          try {\n            instance = new ctor(props, context); // eslint-disable-line no-new\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n      }\n      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n      adoptClassInstance(workInProgress, instance);\n      {\n        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n          var componentName = getComponentNameFromType(ctor) || 'Component';\n          if (!didWarnAboutUninitializedState.has(componentName)) {\n            didWarnAboutUninitializedState.add(componentName);\n            error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n          }\n        } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n        // Warn about these lifecycles if they are present.\n        // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n          var foundWillMountName = null;\n          var foundWillReceivePropsName = null;\n          var foundWillUpdateName = null;\n          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n            foundWillMountName = 'componentWillMount';\n          } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n            foundWillMountName = 'UNSAFE_componentWillMount';\n          }\n          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n            foundWillReceivePropsName = 'componentWillReceiveProps';\n          } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n          }\n          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n            foundWillUpdateName = 'componentWillUpdate';\n          } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n            foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n          }\n          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n            var _componentName = getComponentNameFromType(ctor) || 'Component';\n            var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n              error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n            }\n          }\n        }\n      } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n      // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n      if (isLegacyContextConsumer) {\n        cacheContext(workInProgress, unmaskedContext, context);\n      }\n      return instance;\n    }\n    function callComponentWillMount(workInProgress, instance) {\n      var oldState = instance.state;\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n      if (oldState !== instance.state) {\n        {\n          error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n        }\n        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n      }\n    }\n    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n      var oldState = instance.state;\n      if (typeof instance.componentWillReceiveProps === 'function') {\n        instance.componentWillReceiveProps(newProps, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n      }\n      if (instance.state !== oldState) {\n        {\n          var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n            didWarnAboutStateAssignmentForComponent.add(componentName);\n            error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n          }\n        }\n        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n      }\n    } // Invokes the mount life-cycles on a previously never rendered instance.\n\n    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      {\n        checkClassInstance(workInProgress, ctor, newProps);\n      }\n      var instance = workInProgress.stateNode;\n      instance.props = newProps;\n      instance.state = workInProgress.memoizedState;\n      instance.refs = emptyRefsObject;\n      initializeUpdateQueue(workInProgress);\n      var contextType = ctor.contextType;\n      if (typeof contextType === 'object' && contextType !== null) {\n        instance.context = readContext(contextType);\n      } else {\n        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        instance.context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n      {\n        if (instance.state === newProps) {\n          var componentName = getComponentNameFromType(ctor) || 'Component';\n          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n            didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n            error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n          }\n        }\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n        }\n        {\n          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n        }\n      }\n      instance.state = workInProgress.memoizedState;\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      if (typeof getDerivedStateFromProps === 'function') {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        instance.state = workInProgress.memoizedState;\n      } // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n        callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n        // process them now.\n\n        processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n        instance.state = workInProgress.memoizedState;\n      }\n      if (typeof instance.componentDidMount === 'function') {\n        var fiberFlags = Update;\n        {\n          fiberFlags |= LayoutStatic;\n        }\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          fiberFlags |= MountLayoutDev;\n        }\n        workInProgress.flags |= fiberFlags;\n      }\n    }\n    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      var instance = workInProgress.stateNode;\n      var oldProps = workInProgress.memoizedProps;\n      instance.props = oldProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n      if (typeof contextType === 'object' && contextType !== null) {\n        nextContext = readContext(contextType);\n      } else {\n        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n      }\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n      // ever the previously attempted to render - not the \"current\". However,\n      // during componentDidUpdate we pass the \"current\" props.\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n        if (oldProps !== newProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n        }\n      }\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = instance.state = oldState;\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      newState = workInProgress.memoizedState;\n      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidMount === 'function') {\n          var fiberFlags = Update;\n          {\n            fiberFlags |= LayoutStatic;\n          }\n          if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n            fiberFlags |= MountLayoutDev;\n          }\n          workInProgress.flags |= fiberFlags;\n        }\n        return false;\n      }\n      if (typeof getDerivedStateFromProps === 'function') {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        newState = workInProgress.memoizedState;\n      }\n      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n      if (shouldUpdate) {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n          if (typeof instance.componentWillMount === 'function') {\n            instance.componentWillMount();\n          }\n          if (typeof instance.UNSAFE_componentWillMount === 'function') {\n            instance.UNSAFE_componentWillMount();\n          }\n        }\n        if (typeof instance.componentDidMount === 'function') {\n          var _fiberFlags = Update;\n          {\n            _fiberFlags |= LayoutStatic;\n          }\n          if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n            _fiberFlags |= MountLayoutDev;\n          }\n          workInProgress.flags |= _fiberFlags;\n        }\n      } else {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidMount === 'function') {\n          var _fiberFlags2 = Update;\n          {\n            _fiberFlags2 |= LayoutStatic;\n          }\n          if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n            _fiberFlags2 |= MountLayoutDev;\n          }\n          workInProgress.flags |= _fiberFlags2;\n        } // If shouldComponentUpdate returned false, we should still update the\n        // memoized state to indicate that this work can be reused.\n\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      } // Update the existing instance's state, props, and context pointers even\n      // if shouldComponentUpdate returns false.\n\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    } // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n      var instance = workInProgress.stateNode;\n      cloneUpdateQueue(current, workInProgress);\n      var unresolvedOldProps = workInProgress.memoizedProps;\n      var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n      instance.props = oldProps;\n      var unresolvedNewProps = workInProgress.pendingProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n      if (typeof contextType === 'object' && contextType !== null) {\n        nextContext = readContext(contextType);\n      } else {\n        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n      }\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n      // ever the previously attempted to render - not the \"current\". However,\n      // during componentDidUpdate we pass the \"current\" props.\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n        }\n      }\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = instance.state = oldState;\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      newState = workInProgress.memoizedState;\n      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Update;\n          }\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Snapshot;\n          }\n        }\n        return false;\n      }\n      if (typeof getDerivedStateFromProps === 'function') {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        newState = workInProgress.memoizedState;\n      }\n      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) ||\n      // TODO: In some cases, we'll end up checking if context has changed twice,\n      // both before and after `shouldComponentUpdate` has been called. Not ideal,\n      // but I'm loath to refactor this function. This only happens for memoized\n      // components so it's not that common.\n      enableLazyContextPropagation;\n      if (shouldUpdate) {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n          if (typeof instance.componentWillUpdate === 'function') {\n            instance.componentWillUpdate(newProps, newState, nextContext);\n          }\n          if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n          }\n        }\n        if (typeof instance.componentDidUpdate === 'function') {\n          workInProgress.flags |= Update;\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n          workInProgress.flags |= Snapshot;\n        }\n      } else {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Update;\n          }\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Snapshot;\n          }\n        } // If shouldComponentUpdate returned false, we should still update the\n        // memoized props/state to indicate that this work can be reused.\n\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      } // Update the existing instance's state, props, and context pointers even\n      // if shouldComponentUpdate returns false.\n\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    }\n    var didWarnAboutMaps;\n    var didWarnAboutGenerators;\n    var didWarnAboutStringRefs;\n    var ownerHasKeyUseWarning;\n    var ownerHasFunctionTypeWarning;\n    var warnForMissingKey = function (child, returnFiber) {};\n    {\n      didWarnAboutMaps = false;\n      didWarnAboutGenerators = false;\n      didWarnAboutStringRefs = {};\n      /**\n       * Warn if there's no key explicitly set on dynamic arrays of children or\n       * object keys are not valid. This allows us to keep track of children between\n       * updates.\n       */\n\n      ownerHasKeyUseWarning = {};\n      ownerHasFunctionTypeWarning = {};\n      warnForMissingKey = function (child, returnFiber) {\n        if (child === null || typeof child !== 'object') {\n          return;\n        }\n        if (!child._store || child._store.validated || child.key != null) {\n          return;\n        }\n        if (typeof child._store !== 'object') {\n          throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n        child._store.validated = true;\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n        if (ownerHasKeyUseWarning[componentName]) {\n          return;\n        }\n        ownerHasKeyUseWarning[componentName] = true;\n        error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n      };\n    }\n    function coerceRef(returnFiber, current, element) {\n      var mixedRef = element.ref;\n      if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n        {\n          // TODO: Clean this up once we turn on the string ref warning for\n          // everyone, because the strict mode case will no longer be relevant\n          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\n          // We warn in ReactElement.js if owner and self are equal for string refs\n          // because these cannot be automatically converted to an arrow function\n          // using a codemod. Therefore, we don't have to warn about string refs again.\n          !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n            var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n            if (!didWarnAboutStringRefs[componentName]) {\n              {\n                error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n              }\n              didWarnAboutStringRefs[componentName] = true;\n            }\n          }\n        }\n        if (element._owner) {\n          var owner = element._owner;\n          var inst;\n          if (owner) {\n            var ownerFiber = owner;\n            if (ownerFiber.tag !== ClassComponent) {\n              throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n            }\n            inst = ownerFiber.stateNode;\n          }\n          if (!inst) {\n            throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n          } // Assigning this to a const so Flow knows it won't change in the closure\n\n          var resolvedInst = inst;\n          {\n            checkPropStringCoercion(mixedRef, 'ref');\n          }\n          var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n          if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n            return current.ref;\n          }\n          var ref = function (value) {\n            var refs = resolvedInst.refs;\n            if (refs === emptyRefsObject) {\n              // This is a lazy pooled frozen object, so we need to initialize.\n              refs = resolvedInst.refs = {};\n            }\n            if (value === null) {\n              delete refs[stringRef];\n            } else {\n              refs[stringRef] = value;\n            }\n          };\n          ref._stringRef = stringRef;\n          return ref;\n        } else {\n          if (typeof mixedRef !== 'string') {\n            throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n          }\n          if (!element._owner) {\n            throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n          }\n        }\n      }\n      return mixedRef;\n    }\n    function throwOnInvalidObjectType(returnFiber, newChild) {\n      var childString = Object.prototype.toString.call(newChild);\n      throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n    }\n    function warnOnFunctionType(returnFiber) {\n      {\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n        if (ownerHasFunctionTypeWarning[componentName]) {\n          return;\n        }\n        ownerHasFunctionTypeWarning[componentName] = true;\n        error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n      }\n    }\n    function resolveLazy(lazyType) {\n      var payload = lazyType._payload;\n      var init = lazyType._init;\n      return init(payload);\n    } // This wrapper function exists because I expect to clone the code in each path\n    // to be able to optimize each path individually by branching early. This needs\n    // a compiler or we can do it manually. Helpers that don't need this branching\n    // live outside of this function.\n\n    function ChildReconciler(shouldTrackSideEffects) {\n      function deleteChild(returnFiber, childToDelete) {\n        if (!shouldTrackSideEffects) {\n          // Noop.\n          return;\n        }\n        var deletions = returnFiber.deletions;\n        if (deletions === null) {\n          returnFiber.deletions = [childToDelete];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(childToDelete);\n        }\n      }\n      function deleteRemainingChildren(returnFiber, currentFirstChild) {\n        if (!shouldTrackSideEffects) {\n          // Noop.\n          return null;\n        } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n        // assuming that after the first child we've already added everything.\n\n        var childToDelete = currentFirstChild;\n        while (childToDelete !== null) {\n          deleteChild(returnFiber, childToDelete);\n          childToDelete = childToDelete.sibling;\n        }\n        return null;\n      }\n      function mapRemainingChildren(returnFiber, currentFirstChild) {\n        // Add the remaining children to a temporary map so that we can find them by\n        // keys quickly. Implicit (null) keys get added to this set with their index\n        // instead.\n        var existingChildren = new Map();\n        var existingChild = currentFirstChild;\n        while (existingChild !== null) {\n          if (existingChild.key !== null) {\n            existingChildren.set(existingChild.key, existingChild);\n          } else {\n            existingChildren.set(existingChild.index, existingChild);\n          }\n          existingChild = existingChild.sibling;\n        }\n        return existingChildren;\n      }\n      function useFiber(fiber, pendingProps) {\n        // We currently set sibling to null and index to 0 here because it is easy\n        // to forget to do before returning it. E.g. for the single child case.\n        var clone = createWorkInProgress(fiber, pendingProps);\n        clone.index = 0;\n        clone.sibling = null;\n        return clone;\n      }\n      function placeChild(newFiber, lastPlacedIndex, newIndex) {\n        newFiber.index = newIndex;\n        if (!shouldTrackSideEffects) {\n          // During hydration, the useId algorithm needs to know which fibers are\n          // part of a list of children (arrays, iterators).\n          newFiber.flags |= Forked;\n          return lastPlacedIndex;\n        }\n        var current = newFiber.alternate;\n        if (current !== null) {\n          var oldIndex = current.index;\n          if (oldIndex < lastPlacedIndex) {\n            // This is a move.\n            newFiber.flags |= Placement;\n            return lastPlacedIndex;\n          } else {\n            // This item can stay in place.\n            return oldIndex;\n          }\n        } else {\n          // This is an insertion.\n          newFiber.flags |= Placement;\n          return lastPlacedIndex;\n        }\n      }\n      function placeSingleChild(newFiber) {\n        // This is simpler for the single child case. We only need to do a\n        // placement for inserting new children.\n        if (shouldTrackSideEffects && newFiber.alternate === null) {\n          newFiber.flags |= Placement;\n        }\n        return newFiber;\n      }\n      function updateTextNode(returnFiber, current, textContent, lanes) {\n        if (current === null || current.tag !== HostText) {\n          // Insert\n          var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, textContent);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n      function updateElement(returnFiber, current, element, lanes) {\n        var elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n        }\n        if (current !== null) {\n          if (current.elementType === elementType ||\n          // Keep this check inline so it only runs on the false path:\n          isCompatibleFamilyForHotReloading(current, element) ||\n          // Lazy types should reconcile their resolved type.\n          // We need to do this after the Hot Reloading check above,\n          // because hot reloading has different semantics than prod because\n          // it doesn't resuspend. So we can't let the call below suspend.\n          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n            // Move based on index\n            var existing = useFiber(current, element.props);\n            existing.ref = coerceRef(returnFiber, current, element);\n            existing.return = returnFiber;\n            {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } // Insert\n\n        var created = createFiberFromElement(element, returnFiber.mode, lanes);\n        created.ref = coerceRef(returnFiber, current, element);\n        created.return = returnFiber;\n        return created;\n      }\n      function updatePortal(returnFiber, current, portal, lanes) {\n        if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n          // Insert\n          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n      function updateFragment(returnFiber, current, fragment, lanes, key) {\n        if (current === null || current.tag !== Fragment) {\n          // Insert\n          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, fragment);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n      function createChild(returnFiber, newChild, lanes) {\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          // Text nodes don't have keys. If the previous node is implicitly keyed\n          // we can continue to replace it without aborting even if it is not a text\n          // node.\n          var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        }\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n                _created.ref = coerceRef(returnFiber, null, newChild);\n                _created.return = returnFiber;\n                return _created;\n              }\n            case REACT_PORTAL_TYPE:\n              {\n                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n                _created2.return = returnFiber;\n                return _created2;\n              }\n            case REACT_LAZY_TYPE:\n              {\n                var payload = newChild._payload;\n                var init = newChild._init;\n                return createChild(returnFiber, init(payload), lanes);\n              }\n          }\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n            _created3.return = returnFiber;\n            return _created3;\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n      function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n        // Update the fiber if the keys match, otherwise return null.\n        var key = oldFiber !== null ? oldFiber.key : null;\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          // Text nodes don't have keys. If the previous node is implicitly keyed\n          // we can continue to replace it without aborting even if it is not a text\n          // node.\n          if (key !== null) {\n            return null;\n          }\n          return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n        }\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                if (newChild.key === key) {\n                  return updateElement(returnFiber, oldFiber, newChild, lanes);\n                } else {\n                  return null;\n                }\n              }\n            case REACT_PORTAL_TYPE:\n              {\n                if (newChild.key === key) {\n                  return updatePortal(returnFiber, oldFiber, newChild, lanes);\n                } else {\n                  return null;\n                }\n              }\n            case REACT_LAZY_TYPE:\n              {\n                var payload = newChild._payload;\n                var init = newChild._init;\n                return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n              }\n          }\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            if (key !== null) {\n              return null;\n            }\n            return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          // Text nodes don't have keys, so we neither have to check the old nor\n          // new node for the key. If both are text nodes, they match.\n          var matchedFiber = existingChildren.get(newIdx) || null;\n          return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n        }\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n              }\n            case REACT_PORTAL_TYPE:\n              {\n                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n              }\n            case REACT_LAZY_TYPE:\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n          }\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _matchedFiber3 = existingChildren.get(newIdx) || null;\n            return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n      /**\n       * Warns if there is a duplicate or missing key\n       */\n\n      function warnOnInvalidKey(child, knownKeys, returnFiber) {\n        {\n          if (typeof child !== 'object' || child === null) {\n            return knownKeys;\n          }\n          switch (child.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n            case REACT_PORTAL_TYPE:\n              warnForMissingKey(child, returnFiber);\n              var key = child.key;\n              if (typeof key !== 'string') {\n                break;\n              }\n              if (knownKeys === null) {\n                knownKeys = new Set();\n                knownKeys.add(key);\n                break;\n              }\n              if (!knownKeys.has(key)) {\n                knownKeys.add(key);\n                break;\n              }\n              error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n              break;\n            case REACT_LAZY_TYPE:\n              var payload = child._payload;\n              var init = child._init;\n              warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n              break;\n          }\n        }\n        return knownKeys;\n      }\n      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n        // This algorithm can't optimize by searching from both ends since we\n        // don't have backpointers on fibers. I'm trying to see how far we can get\n        // with that model. If it ends up not being worth the tradeoffs, we can\n        // add it later.\n        // Even with a two ended optimization, we'd want to optimize for the case\n        // where there are few changes and brute force the comparison instead of\n        // going for the Map. It'd like to explore hitting that path first in\n        // forward-only mode and only go for the Map once we notice that we need\n        // lots of look ahead. This doesn't handle reversal as well as two ended\n        // search but that's unusual. Besides, for the two ended optimization to\n        // work on Iterables, we'd need to copy the whole set.\n        // In this first iteration, we'll just live with hitting the bad case\n        // (adding everything to a Map) in for every insert/move.\n        // If you change this code, also update reconcileChildrenIterator() which\n        // uses the same algorithm.\n        {\n          // First, validate keys.\n          var knownKeys = null;\n          for (var i = 0; i < newChildren.length; i++) {\n            var child = newChildren[i];\n            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n          }\n        }\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n          if (newFiber === null) {\n            // TODO: This breaks on empty slots like null children. That's\n            // unfortunate because it triggers the slow path all the time. We need\n            // a better way to communicate whether this was a miss or null,\n            // boolean, undefined, etc.\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n            break;\n          }\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              // We matched the slot, but we didn't reuse the existing fiber, so we\n              // need to delete the existing child.\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n          if (previousNewFiber === null) {\n            // TODO: Move out of the loop. This only happens for the first run.\n            resultingFirstChild = newFiber;\n          } else {\n            // TODO: Defer siblings if we're not at the right index for this slot.\n            // I.e. if we had null values before, then we want to defer this\n            // for each null value. However, we also don't want to call updateSlot\n            // with the previous one.\n            previousNewFiber.sibling = newFiber;\n          }\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n        if (newIdx === newChildren.length) {\n          // We've reached the end of the new children. We can delete the rest.\n          deleteRemainingChildren(returnFiber, oldFiber);\n          if (getIsHydrating()) {\n            var numberOfForks = newIdx;\n            pushTreeFork(returnFiber, numberOfForks);\n          }\n          return resultingFirstChild;\n        }\n        if (oldFiber === null) {\n          // If we don't have any more existing children we can choose a fast path\n          // since the rest will all be insertions.\n          for (; newIdx < newChildren.length; newIdx++) {\n            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n            if (_newFiber === null) {\n              continue;\n            }\n            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = _newFiber;\n            } else {\n              previousNewFiber.sibling = _newFiber;\n            }\n            previousNewFiber = _newFiber;\n          }\n          if (getIsHydrating()) {\n            var _numberOfForks = newIdx;\n            pushTreeFork(returnFiber, _numberOfForks);\n          }\n          return resultingFirstChild;\n        } // Add all children to a key map for quick lookups.\n\n        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n        for (; newIdx < newChildren.length; newIdx++) {\n          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n          if (_newFiber2 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber2.alternate !== null) {\n                // The new fiber is a work in progress, but if there exists a\n                // current, that means that we reused the fiber. We need to delete\n                // it from the child list so that we don't add it to the deletion\n                // list.\n                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n              }\n            }\n            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber2;\n            } else {\n              previousNewFiber.sibling = _newFiber2;\n            }\n            previousNewFiber = _newFiber2;\n          }\n        }\n        if (shouldTrackSideEffects) {\n          // Any existing children that weren't consumed above were deleted. We need\n          // to add them to the deletion list.\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n        if (getIsHydrating()) {\n          var _numberOfForks2 = newIdx;\n          pushTreeFork(returnFiber, _numberOfForks2);\n        }\n        return resultingFirstChild;\n      }\n      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n        // This is the same implementation as reconcileChildrenArray(),\n        // but using the iterator instead.\n        var iteratorFn = getIteratorFn(newChildrenIterable);\n        if (typeof iteratorFn !== 'function') {\n          throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n        }\n        {\n          // We don't support rendering Generators because it's a mutation.\n          // See https://github.com/facebook/react/issues/12995\n          if (typeof Symbol === 'function' &&\n          // $FlowFixMe Flow doesn't know about toStringTag\n          newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n            if (!didWarnAboutGenerators) {\n              error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n            }\n            didWarnAboutGenerators = true;\n          } // Warn about using Maps as children\n\n          if (newChildrenIterable.entries === iteratorFn) {\n            if (!didWarnAboutMaps) {\n              error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n            }\n            didWarnAboutMaps = true;\n          } // First, validate keys.\n          // We'll get a different iterator later for the main pass.\n\n          var _newChildren = iteratorFn.call(newChildrenIterable);\n          if (_newChildren) {\n            var knownKeys = null;\n            var _step = _newChildren.next();\n            for (; !_step.done; _step = _newChildren.next()) {\n              var child = _step.value;\n              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n            }\n          }\n        }\n        var newChildren = iteratorFn.call(newChildrenIterable);\n        if (newChildren == null) {\n          throw new Error('An iterable object provided no iterator.');\n        }\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n        var step = newChildren.next();\n        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n          if (newFiber === null) {\n            // TODO: This breaks on empty slots like null children. That's\n            // unfortunate because it triggers the slow path all the time. We need\n            // a better way to communicate whether this was a miss or null,\n            // boolean, undefined, etc.\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n            break;\n          }\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              // We matched the slot, but we didn't reuse the existing fiber, so we\n              // need to delete the existing child.\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n          if (previousNewFiber === null) {\n            // TODO: Move out of the loop. This only happens for the first run.\n            resultingFirstChild = newFiber;\n          } else {\n            // TODO: Defer siblings if we're not at the right index for this slot.\n            // I.e. if we had null values before, then we want to defer this\n            // for each null value. However, we also don't want to call updateSlot\n            // with the previous one.\n            previousNewFiber.sibling = newFiber;\n          }\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n        if (step.done) {\n          // We've reached the end of the new children. We can delete the rest.\n          deleteRemainingChildren(returnFiber, oldFiber);\n          if (getIsHydrating()) {\n            var numberOfForks = newIdx;\n            pushTreeFork(returnFiber, numberOfForks);\n          }\n          return resultingFirstChild;\n        }\n        if (oldFiber === null) {\n          // If we don't have any more existing children we can choose a fast path\n          // since the rest will all be insertions.\n          for (; !step.done; newIdx++, step = newChildren.next()) {\n            var _newFiber3 = createChild(returnFiber, step.value, lanes);\n            if (_newFiber3 === null) {\n              continue;\n            }\n            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = _newFiber3;\n            } else {\n              previousNewFiber.sibling = _newFiber3;\n            }\n            previousNewFiber = _newFiber3;\n          }\n          if (getIsHydrating()) {\n            var _numberOfForks3 = newIdx;\n            pushTreeFork(returnFiber, _numberOfForks3);\n          }\n          return resultingFirstChild;\n        } // Add all children to a key map for quick lookups.\n\n        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n        for (; !step.done; newIdx++, step = newChildren.next()) {\n          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n          if (_newFiber4 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber4.alternate !== null) {\n                // The new fiber is a work in progress, but if there exists a\n                // current, that means that we reused the fiber. We need to delete\n                // it from the child list so that we don't add it to the deletion\n                // list.\n                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n              }\n            }\n            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber4;\n            } else {\n              previousNewFiber.sibling = _newFiber4;\n            }\n            previousNewFiber = _newFiber4;\n          }\n        }\n        if (shouldTrackSideEffects) {\n          // Any existing children that weren't consumed above were deleted. We need\n          // to add them to the deletion list.\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n        if (getIsHydrating()) {\n          var _numberOfForks4 = newIdx;\n          pushTreeFork(returnFiber, _numberOfForks4);\n        }\n        return resultingFirstChild;\n      }\n      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n        // There's no need to check for keys on text nodes since we don't have a\n        // way to define them.\n        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n          // We already have an existing node so let's just update it and delete\n          // the rest.\n          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n          var existing = useFiber(currentFirstChild, textContent);\n          existing.return = returnFiber;\n          return existing;\n        } // The existing first child is not a text node so we need to create one\n        // and delete the existing ones.\n\n        deleteRemainingChildren(returnFiber, currentFirstChild);\n        var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      }\n      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n        var key = element.key;\n        var child = currentFirstChild;\n        while (child !== null) {\n          // TODO: If key === null and child.key === null, then this only applies to\n          // the first item in the list.\n          if (child.key === key) {\n            var elementType = element.type;\n            if (elementType === REACT_FRAGMENT_TYPE) {\n              if (child.tag === Fragment) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, element.props.children);\n                existing.return = returnFiber;\n                {\n                  existing._debugSource = element._source;\n                  existing._debugOwner = element._owner;\n                }\n                return existing;\n              }\n            } else {\n              if (child.elementType === elementType ||\n              // Keep this check inline so it only runs on the false path:\n              isCompatibleFamilyForHotReloading(child, element) ||\n              // Lazy types should reconcile their resolved type.\n              // We need to do this after the Hot Reloading check above,\n              // because hot reloading has different semantics than prod because\n              // it doesn't resuspend. So we can't let the call below suspend.\n              typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var _existing = useFiber(child, element.props);\n                _existing.ref = coerceRef(returnFiber, child, element);\n                _existing.return = returnFiber;\n                {\n                  _existing._debugSource = element._source;\n                  _existing._debugOwner = element._owner;\n                }\n                return _existing;\n              }\n            } // Didn't match.\n\n            deleteRemainingChildren(returnFiber, child);\n            break;\n          } else {\n            deleteChild(returnFiber, child);\n          }\n          child = child.sibling;\n        }\n        if (element.type === REACT_FRAGMENT_TYPE) {\n          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n          created.return = returnFiber;\n          return created;\n        } else {\n          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n          _created4.return = returnFiber;\n          return _created4;\n        }\n      }\n      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n        var key = portal.key;\n        var child = currentFirstChild;\n        while (child !== null) {\n          // TODO: If key === null and child.key === null, then this only applies to\n          // the first item in the list.\n          if (child.key === key) {\n            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              var existing = useFiber(child, portal.children || []);\n              existing.return = returnFiber;\n              return existing;\n            } else {\n              deleteRemainingChildren(returnFiber, child);\n              break;\n            }\n          } else {\n            deleteChild(returnFiber, child);\n          }\n          child = child.sibling;\n        }\n        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      } // This API will tag the children with the side-effect of the reconciliation\n      // itself. They will be added to the side-effect list as we pass through the\n      // children and the parent.\n\n      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n        // This function is not recursive.\n        // If the top level item is an array, we treat it as a set of children,\n        // not as a fragment. Nested arrays on the other hand will be treated as\n        // fragment nodes. Recursion happens at the normal flow.\n        // Handle top level unkeyed fragments as if they were arrays.\n        // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n        // We treat the ambiguous cases above the same.\n        var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n        if (isUnkeyedTopLevelFragment) {\n          newChild = newChild.props.children;\n        } // Handle object types\n\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n            case REACT_PORTAL_TYPE:\n              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n            case REACT_LAZY_TYPE:\n              var payload = newChild._payload;\n              var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n              return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n          }\n          if (isArray(newChild)) {\n            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n          }\n          if (getIteratorFn(newChild)) {\n            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n        }\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        } // Remaining cases are all treated as empty.\n\n        return deleteRemainingChildren(returnFiber, currentFirstChild);\n      }\n      return reconcileChildFibers;\n    }\n    var reconcileChildFibers = ChildReconciler(true);\n    var mountChildFibers = ChildReconciler(false);\n    function cloneChildFibers(current, workInProgress) {\n      if (current !== null && workInProgress.child !== current.child) {\n        throw new Error('Resuming work not yet implemented.');\n      }\n      if (workInProgress.child === null) {\n        return;\n      }\n      var currentChild = workInProgress.child;\n      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n      workInProgress.child = newChild;\n      newChild.return = workInProgress;\n      while (currentChild.sibling !== null) {\n        currentChild = currentChild.sibling;\n        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n        newChild.return = workInProgress;\n      }\n      newChild.sibling = null;\n    } // Reset a workInProgress child set to prepare it for a second pass.\n\n    function resetChildFibers(workInProgress, lanes) {\n      var child = workInProgress.child;\n      while (child !== null) {\n        resetWorkInProgress(child, lanes);\n        child = child.sibling;\n      }\n    }\n    var NO_CONTEXT = {};\n    var contextStackCursor$1 = createCursor(NO_CONTEXT);\n    var contextFiberStackCursor = createCursor(NO_CONTEXT);\n    var rootInstanceStackCursor = createCursor(NO_CONTEXT);\n    function requiredContext(c) {\n      if (c === NO_CONTEXT) {\n        throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n      }\n      return c;\n    }\n    function getRootHostContainer() {\n      var rootInstance = requiredContext(rootInstanceStackCursor.current);\n      return rootInstance;\n    }\n    function pushHostContainer(fiber, nextRootInstance) {\n      // Push current root instance onto the stack;\n      // This allows us to reset root when portals are popped.\n      push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n      // This enables us to pop only Fibers that provide unique contexts.\n\n      push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n      // However, we can't just call getRootHostContext() and push it because\n      // we'd have a different number of entries on the stack depending on\n      // whether getRootHostContext() throws somewhere in renderer code or not.\n      // So we push an empty value first. This lets us safely unwind on errors.\n\n      push(contextStackCursor$1, NO_CONTEXT, fiber);\n      var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n      pop(contextStackCursor$1, fiber);\n      push(contextStackCursor$1, nextRootContext, fiber);\n    }\n    function popHostContainer(fiber) {\n      pop(contextStackCursor$1, fiber);\n      pop(contextFiberStackCursor, fiber);\n      pop(rootInstanceStackCursor, fiber);\n    }\n    function getHostContext() {\n      var context = requiredContext(contextStackCursor$1.current);\n      return context;\n    }\n    function pushHostContext(fiber) {\n      var rootInstance = requiredContext(rootInstanceStackCursor.current);\n      var context = requiredContext(contextStackCursor$1.current);\n      var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n\n      if (context === nextContext) {\n        return;\n      } // Track the context and the Fiber that provided it.\n      // This enables us to pop only Fibers that provide unique contexts.\n\n      push(contextFiberStackCursor, fiber, fiber);\n      push(contextStackCursor$1, nextContext, fiber);\n    }\n    function popHostContext(fiber) {\n      // Do not pop unless this Fiber provided the current context.\n      // pushHostContext() only pushes Fibers that provide unique contexts.\n      if (contextFiberStackCursor.current !== fiber) {\n        return;\n      }\n      pop(contextStackCursor$1, fiber);\n      pop(contextFiberStackCursor, fiber);\n    }\n    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n    // inherited deeply down the subtree. The upper bits only affect\n    // this immediate suspense boundary and gets reset each new\n    // boundary or suspense list.\n\n    var SubtreeSuspenseContextMask = 1; // Subtree Flags:\n    // InvisibleParentSuspenseContext indicates that one of our parent Suspense\n    // boundaries is not currently showing visible main content.\n    // Either because it is already showing a fallback or is not mounted at all.\n    // We can use this to determine if it is desirable to trigger a fallback at\n    // the parent. If not, then we might need to trigger undesirable boundaries\n    // and/or suspend the commit to avoid hiding the parent content.\n\n    var InvisibleParentSuspenseContext = 1; // Shallow Flags:\n    // ForceSuspenseFallback can be used by SuspenseList to force newly added\n    // items into their fallback state during one of the render passes.\n\n    var ForceSuspenseFallback = 2;\n    var suspenseStackCursor = createCursor(DefaultSuspenseContext);\n    function hasSuspenseContext(parentContext, flag) {\n      return (parentContext & flag) !== 0;\n    }\n    function setDefaultShallowSuspenseContext(parentContext) {\n      return parentContext & SubtreeSuspenseContextMask;\n    }\n    function setShallowSuspenseContext(parentContext, shallowContext) {\n      return parentContext & SubtreeSuspenseContextMask | shallowContext;\n    }\n    function addSubtreeSuspenseContext(parentContext, subtreeContext) {\n      return parentContext | subtreeContext;\n    }\n    function pushSuspenseContext(fiber, newContext) {\n      push(suspenseStackCursor, newContext, fiber);\n    }\n    function popSuspenseContext(fiber) {\n      pop(suspenseStackCursor, fiber);\n    }\n    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n      // If it was the primary children that just suspended, capture and render the\n      // fallback. Otherwise, don't capture and bubble to the next boundary.\n      var nextState = workInProgress.memoizedState;\n      if (nextState !== null) {\n        if (nextState.dehydrated !== null) {\n          // A dehydrated boundary always captures.\n          return true;\n        }\n        return false;\n      }\n      var props = workInProgress.memoizedProps; // Regular boundaries always capture.\n\n      {\n        return true;\n      } // If it's a boundary we should avoid, then we prefer to bubble up to the\n    }\n\n    function findFirstSuspended(row) {\n      var node = row;\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n          if (state !== null) {\n            var dehydrated = state.dehydrated;\n            if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n              return node;\n            }\n          }\n        } else if (node.tag === SuspenseListComponent &&\n        // revealOrder undefined can't be trusted because it don't\n        // keep track of whether it suspended or not.\n        node.memoizedProps.revealOrder !== undefined) {\n          var didSuspend = (node.flags & DidCapture) !== NoFlags;\n          if (didSuspend) {\n            return node;\n          }\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n        if (node === row) {\n          return null;\n        }\n        while (node.sibling === null) {\n          if (node.return === null || node.return === row) {\n            return null;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n      return null;\n    }\n    var NoFlags$1 = /*   */\n    0; // Represents whether effect should fire.\n\n    var HasEffect = /* */\n    1; // Represents the phase in which the effect (not the clean-up) fires.\n\n    var Insertion = /*  */\n    2;\n    var Layout = /*    */\n    4;\n    var Passive$1 = /*   */\n    8;\n\n    // and should be reset before starting a new render.\n    // This tracks which mutable sources need to be reset after a render.\n\n    var workInProgressSources = [];\n    function resetWorkInProgressVersions() {\n      for (var i = 0; i < workInProgressSources.length; i++) {\n        var mutableSource = workInProgressSources[i];\n        if (isPrimaryRenderer) {\n          mutableSource._workInProgressVersionPrimary = null;\n        } else {\n          mutableSource._workInProgressVersionSecondary = null;\n        }\n      }\n      workInProgressSources.length = 0;\n    }\n    // This ensures that the version used for server rendering matches the one\n    // that is eventually read during hydration.\n    // If they don't match there's a potential tear and a full deopt render is required.\n\n    function registerMutableSourceForHydration(root, mutableSource) {\n      var getVersion = mutableSource._getVersion;\n      var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n      // Retaining it forever may interfere with GC.\n\n      if (root.mutableSourceEagerHydrationData == null) {\n        root.mutableSourceEagerHydrationData = [mutableSource, version];\n      } else {\n        root.mutableSourceEagerHydrationData.push(mutableSource, version);\n      }\n    }\n    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\n    var didWarnAboutMismatchedHooksForComponent;\n    var didWarnUncachedGetSnapshot;\n    {\n      didWarnAboutMismatchedHooksForComponent = new Set();\n    }\n\n    // These are set right before calling the component.\n    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n    // the work-in-progress hook.\n\n    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n    // current hook list is the list that belongs to the current fiber. The\n    // work-in-progress hook list is a new list that will be added to the\n    // work-in-progress fiber.\n\n    var currentHook = null;\n    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n    // does not get reset if we do another render pass; only when we're completely\n    // finished evaluating this component. This is an optimization so we know\n    // whether we need to clear render phase updates after a throw.\n\n    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n    // gets reset after each attempt.\n    // TODO: Maybe there's some way to consolidate this with\n    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\n    var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n\n    var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\n    // hydration). This counter is global, so client ids are not stable across\n    // render attempts.\n\n    var globalClientIdCounter = 0;\n    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\n    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n    // The list stores the order of hooks used during the initial render (mount).\n    // Subsequent renders (updates) reference this list.\n\n    var hookTypesDev = null;\n    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n    // When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\n    var ignorePreviousDependencies = false;\n    function mountHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n        if (hookTypesDev === null) {\n          hookTypesDev = [hookName];\n        } else {\n          hookTypesDev.push(hookName);\n        }\n      }\n    }\n    function updateHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n        if (hookTypesDev !== null) {\n          hookTypesUpdateIndexDev++;\n          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n            warnOnHookMismatchInDev(hookName);\n          }\n        }\n      }\n    }\n    function checkDepsAreArrayDev(deps) {\n      {\n        if (deps !== undefined && deps !== null && !isArray(deps)) {\n          // Verify deps, but only on mount to avoid extra checks.\n          // It's unlikely their type would change as usually you define them inline.\n          error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n        }\n      }\n    }\n    function warnOnHookMismatchInDev(currentHookName) {\n      {\n        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n          didWarnAboutMismatchedHooksForComponent.add(componentName);\n          if (hookTypesDev !== null) {\n            var table = '';\n            var secondColumnStart = 30;\n            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n              var oldHookName = hookTypesDev[i];\n              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n              var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n              // lol @ IE not supporting String#repeat\n\n              while (row.length < secondColumnStart) {\n                row += ' ';\n              }\n              row += newHookName + '\\n';\n              table += row;\n            }\n            error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n          }\n        }\n      }\n    }\n    function throwInvalidHookError() {\n      throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n    }\n    function areHookInputsEqual(nextDeps, prevDeps) {\n      {\n        if (ignorePreviousDependencies) {\n          // Only true when this component is being hot reloaded.\n          return false;\n        }\n      }\n      if (prevDeps === null) {\n        {\n          error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n        }\n        return false;\n      }\n      {\n        // Don't bother comparing lengths in prod because these arrays should be\n        // passed inline.\n        if (nextDeps.length !== prevDeps.length) {\n          error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n        }\n      }\n      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n        if (objectIs(nextDeps[i], prevDeps[i])) {\n          continue;\n        }\n        return false;\n      }\n      return true;\n    }\n    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n      renderLanes = nextRenderLanes;\n      currentlyRenderingFiber$1 = workInProgress;\n      {\n        hookTypesDev = current !== null ? current._debugHookTypes : null;\n        hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n      }\n      workInProgress.memoizedState = null;\n      workInProgress.updateQueue = null;\n      workInProgress.lanes = NoLanes; // The following should have already been reset\n      // currentHook = null;\n      // workInProgressHook = null;\n      // didScheduleRenderPhaseUpdate = false;\n      // localIdCounter = 0;\n      // TODO Warn if no hooks are used at all during mount, then some are used during update.\n      // Currently we will identify the update render as a mount because memoizedState === null.\n      // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n      // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n      // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n      // so memoizedState would be null during updates and mounts.\n\n      {\n        if (current !== null && current.memoizedState !== null) {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n        } else if (hookTypesDev !== null) {\n          // This dispatcher handles an edge case where a component is updating,\n          // but no stateful hooks have been used.\n          // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n          // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n          // This dispatcher does that.\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n        } else {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      }\n      var children = Component(props, secondArg); // Check if there was a render phase update\n\n      if (didScheduleRenderPhaseUpdateDuringThisPass) {\n        // Keep rendering in a loop for as long as render phase updates continue to\n        // be scheduled. Use a counter to prevent infinite loops.\n        var numberOfReRenders = 0;\n        do {\n          didScheduleRenderPhaseUpdateDuringThisPass = false;\n          localIdCounter = 0;\n          if (numberOfReRenders >= RE_RENDER_LIMIT) {\n            throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n          }\n          numberOfReRenders += 1;\n          {\n            // Even when hot reloading, allow dependencies to stabilize\n            // after first render to prevent infinite render phase updates.\n            ignorePreviousDependencies = false;\n          } // Start over from the beginning of the list\n\n          currentHook = null;\n          workInProgressHook = null;\n          workInProgress.updateQueue = null;\n          {\n            // Also validate hook order for cascading updates.\n            hookTypesUpdateIndexDev = -1;\n          }\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;\n          children = Component(props, secondArg);\n        } while (didScheduleRenderPhaseUpdateDuringThisPass);\n      } // We can assume the previous dispatcher is always this one, since we set it\n      // at the beginning of the render phase and there's no re-entrance.\n\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n      {\n        workInProgress._debugHookTypes = hookTypesDev;\n      } // This check uses currentHook so that it works the same in DEV and prod bundles.\n      // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n      {\n        currentHookNameInDev = null;\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n        // render. If this fires, it suggests that we incorrectly reset the static\n        // flags in some other part of the codebase. This has happened before, for\n        // example, in the SuspenseList implementation.\n\n        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) &&\n        // Disable this warning in legacy mode, because legacy Suspense is weird\n        // and creates false positives. To make this work in legacy mode, we'd\n        // need to mark fibers that commit in an incomplete state, somehow. For\n        // now I'll disable the warning that most of the bugs that would trigger\n        // it are either exclusive to concurrent mode or exist in both.\n        (current.mode & ConcurrentMode) !== NoMode) {\n          error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n        }\n      }\n      didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n      // localIdCounter = 0;\n\n      if (didRenderTooFewHooks) {\n        throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n      }\n      return children;\n    }\n    function checkDidRenderIdHook() {\n      // This should be called immediately after every renderWithHooks call.\n      // Conceptually, it's part of the return value of renderWithHooks; it's only a\n      // separate function to avoid using an array tuple.\n      var didRenderIdHook = localIdCounter !== 0;\n      localIdCounter = 0;\n      return didRenderIdHook;\n    }\n    function bailoutHooks(current, workInProgress, lanes) {\n      workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n      // complete phase (bubbleProperties).\n\n      if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\n      } else {\n        workInProgress.flags &= ~(Passive | Update);\n      }\n      current.lanes = removeLanes(current.lanes, lanes);\n    }\n    function resetHooksAfterThrow() {\n      // We can assume the previous dispatcher is always this one, since we set it\n      // at the beginning of the render phase and there's no re-entrance.\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n      if (didScheduleRenderPhaseUpdate) {\n        // There were render phase updates. These are only valid for this render\n        // phase, which we are now aborting. Remove the updates from the queues so\n        // they do not persist to the next render. Do not remove updates from hooks\n        // that weren't processed.\n        //\n        // Only reset the updates from the queue if it has a clone. If it does\n        // not have a clone, that means it wasn't processed, and the updates were\n        // scheduled before we entered the render phase.\n        var hook = currentlyRenderingFiber$1.memoizedState;\n        while (hook !== null) {\n          var queue = hook.queue;\n          if (queue !== null) {\n            queue.pending = null;\n          }\n          hook = hook.next;\n        }\n        didScheduleRenderPhaseUpdate = false;\n      }\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n      {\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1;\n        currentHookNameInDev = null;\n        isUpdatingOpaqueValueInRenderPhase = false;\n      }\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n    }\n    function mountWorkInProgressHook() {\n      var hook = {\n        memoizedState: null,\n        baseState: null,\n        baseQueue: null,\n        queue: null,\n        next: null\n      };\n      if (workInProgressHook === null) {\n        // This is the first hook in the list\n        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n      } else {\n        // Append to the end of the list\n        workInProgressHook = workInProgressHook.next = hook;\n      }\n      return workInProgressHook;\n    }\n    function updateWorkInProgressHook() {\n      // This function is used both for updates and for re-renders triggered by a\n      // render phase update. It assumes there is either a current hook we can\n      // clone, or a work-in-progress hook from a previous render pass that we can\n      // use as a base. When we reach the end of the base list, we must switch to\n      // the dispatcher used for mounts.\n      var nextCurrentHook;\n      if (currentHook === null) {\n        var current = currentlyRenderingFiber$1.alternate;\n        if (current !== null) {\n          nextCurrentHook = current.memoizedState;\n        } else {\n          nextCurrentHook = null;\n        }\n      } else {\n        nextCurrentHook = currentHook.next;\n      }\n      var nextWorkInProgressHook;\n      if (workInProgressHook === null) {\n        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n      } else {\n        nextWorkInProgressHook = workInProgressHook.next;\n      }\n      if (nextWorkInProgressHook !== null) {\n        // There's already a work-in-progress. Reuse it.\n        workInProgressHook = nextWorkInProgressHook;\n        nextWorkInProgressHook = workInProgressHook.next;\n        currentHook = nextCurrentHook;\n      } else {\n        // Clone from the current hook.\n        if (nextCurrentHook === null) {\n          throw new Error('Rendered more hooks than during the previous render.');\n        }\n        currentHook = nextCurrentHook;\n        var newHook = {\n          memoizedState: currentHook.memoizedState,\n          baseState: currentHook.baseState,\n          baseQueue: currentHook.baseQueue,\n          queue: currentHook.queue,\n          next: null\n        };\n        if (workInProgressHook === null) {\n          // This is the first hook in the list.\n          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n        } else {\n          // Append to the end of the list.\n          workInProgressHook = workInProgressHook.next = newHook;\n        }\n      }\n      return workInProgressHook;\n    }\n    function createFunctionComponentUpdateQueue() {\n      return {\n        lastEffect: null,\n        stores: null\n      };\n    }\n    function basicStateReducer(state, action) {\n      // $FlowFixMe: Flow doesn't like mixed types\n      return typeof action === 'function' ? action(state) : action;\n    }\n    function mountReducer(reducer, initialArg, init) {\n      var hook = mountWorkInProgressHook();\n      var initialState;\n      if (init !== undefined) {\n        initialState = init(initialArg);\n      } else {\n        initialState = initialArg;\n      }\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        interleaved: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: reducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n      return [hook.memoizedState, dispatch];\n    }\n    function updateReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      var queue = hook.queue;\n      if (queue === null) {\n        throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n      }\n      queue.lastRenderedReducer = reducer;\n      var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n      var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n      var pendingQueue = queue.pending;\n      if (pendingQueue !== null) {\n        // We have new updates that haven't been processed yet.\n        // We'll add them to the base queue.\n        if (baseQueue !== null) {\n          // Merge the pending queue and the base queue.\n          var baseFirst = baseQueue.next;\n          var pendingFirst = pendingQueue.next;\n          baseQueue.next = pendingFirst;\n          pendingQueue.next = baseFirst;\n        }\n        {\n          if (current.baseQueue !== baseQueue) {\n            // Internal invariant that should never happen, but feasibly could in\n            // the future if we implement resuming, or some form of that.\n            error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n          }\n        }\n        current.baseQueue = baseQueue = pendingQueue;\n        queue.pending = null;\n      }\n      if (baseQueue !== null) {\n        // We have a queue to process.\n        var first = baseQueue.next;\n        var newState = current.baseState;\n        var newBaseState = null;\n        var newBaseQueueFirst = null;\n        var newBaseQueueLast = null;\n        var update = first;\n        do {\n          var updateLane = update.lane;\n          if (!isSubsetOfLanes(renderLanes, updateLane)) {\n            // Priority is insufficient. Skip this update. If this is the first\n            // skipped update, the previous update/state is the new base\n            // update/state.\n            var clone = {\n              lane: updateLane,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: null\n            };\n            if (newBaseQueueLast === null) {\n              newBaseQueueFirst = newBaseQueueLast = clone;\n              newBaseState = newState;\n            } else {\n              newBaseQueueLast = newBaseQueueLast.next = clone;\n            } // Update the remaining priority in the queue.\n            // TODO: Don't need to accumulate this. Instead, we can remove\n            // renderLanes from the original lanes.\n\n            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n            markSkippedUpdateLanes(updateLane);\n          } else {\n            // This update does have sufficient priority.\n            if (newBaseQueueLast !== null) {\n              var _clone = {\n                // This update is going to be committed so we never want uncommit\n                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                // this will never be skipped by the check above.\n                lane: NoLane,\n                action: update.action,\n                hasEagerState: update.hasEagerState,\n                eagerState: update.eagerState,\n                next: null\n              };\n              newBaseQueueLast = newBaseQueueLast.next = _clone;\n            } // Process this update.\n\n            if (update.hasEagerState) {\n              // If this update is a state update (not a reducer) and was processed eagerly,\n              // we can use the eagerly computed state\n              newState = update.eagerState;\n            } else {\n              var action = update.action;\n              newState = reducer(newState, action);\n            }\n          }\n          update = update.next;\n        } while (update !== null && update !== first);\n        if (newBaseQueueLast === null) {\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast.next = newBaseQueueFirst;\n        } // Mark that the fiber performed work, but only if the new state is\n        // different from the current state.\n\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n        }\n        hook.memoizedState = newState;\n        hook.baseState = newBaseState;\n        hook.baseQueue = newBaseQueueLast;\n        queue.lastRenderedState = newState;\n      } // Interleaved updates are stored on a separate queue. We aren't going to\n      // process them during this render, but we do need to track which lanes\n      // are remaining.\n\n      var lastInterleaved = queue.interleaved;\n      if (lastInterleaved !== null) {\n        var interleaved = lastInterleaved;\n        do {\n          var interleavedLane = interleaved.lane;\n          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n          markSkippedUpdateLanes(interleavedLane);\n          interleaved = interleaved.next;\n        } while (interleaved !== lastInterleaved);\n      } else if (baseQueue === null) {\n        // `queue.lanes` is used for entangling transitions. We can set it back to\n        // zero once the queue is empty.\n        queue.lanes = NoLanes;\n      }\n      var dispatch = queue.dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n    function rerenderReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      var queue = hook.queue;\n      if (queue === null) {\n        throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n      }\n      queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n      // work-in-progress hook.\n\n      var dispatch = queue.dispatch;\n      var lastRenderPhaseUpdate = queue.pending;\n      var newState = hook.memoizedState;\n      if (lastRenderPhaseUpdate !== null) {\n        // The queue doesn't persist past this render pass.\n        queue.pending = null;\n        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n        var update = firstRenderPhaseUpdate;\n        do {\n          // Process this render phase update. We don't have to check the\n          // priority because it will always be the same as the current\n          // render's.\n          var action = update.action;\n          newState = reducer(newState, action);\n          update = update.next;\n        } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n        // different from the current state.\n\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n        }\n        hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n        // the base state unless the queue is empty.\n        // TODO: Not sure if this is the desired semantics, but it's what we\n        // do for gDSFP. I can't remember why.\n\n        if (hook.baseQueue === null) {\n          hook.baseState = newState;\n        }\n        queue.lastRenderedState = newState;\n      }\n      return [newState, dispatch];\n    }\n    function mountMutableSource(source, getSnapshot, subscribe) {\n      {\n        return undefined;\n      }\n    }\n    function updateMutableSource(source, getSnapshot, subscribe) {\n      {\n        return undefined;\n      }\n    }\n    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = mountWorkInProgressHook();\n      var nextSnapshot;\n      var isHydrating = getIsHydrating();\n      if (isHydrating) {\n        if (getServerSnapshot === undefined) {\n          throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n        }\n        nextSnapshot = getServerSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            if (nextSnapshot !== getServerSnapshot()) {\n              error('The result of getServerSnapshot should be cached to avoid an infinite loop');\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        }\n      } else {\n        nextSnapshot = getSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error('The result of getSnapshot should be cached to avoid an infinite loop');\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        } // Unless we're rendering a blocking lane, schedule a consistency check.\n        // Right before committing, we will walk the tree and check if any of the\n        // stores were mutated.\n        //\n        // We won't do this if we're hydrating server-rendered content, because if\n        // the content is stale, it's already visible anyway. Instead we'll patch\n        // it up in a passive effect.\n\n        var root = getWorkInProgressRoot();\n        if (root === null) {\n          throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n        }\n        if (!includesBlockingLane(root, renderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      } // Read the current snapshot from the store on every render. This breaks the\n      // normal rules of React, and only works because store updates are\n      // always synchronous.\n\n      hook.memoizedState = nextSnapshot;\n      var inst = {\n        value: nextSnapshot,\n        getSnapshot: getSnapshot\n      };\n      hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n      // this whenever subscribe, getSnapshot, or value changes. Because there's no\n      // clean-up function, and we track the deps correctly, we can call pushEffect\n      // directly, without storing any additional state. For the same reason, we\n      // don't need to set a static flag, either.\n      // TODO: We can move this to the passive phase once we add a pre-commit\n      // consistency check. See the next comment.\n\n      fiber.flags |= Passive;\n      pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n      return nextSnapshot;\n    }\n    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n      // normal rules of React, and only works because store updates are\n      // always synchronous.\n\n      var nextSnapshot = getSnapshot();\n      {\n        if (!didWarnUncachedGetSnapshot) {\n          var cachedSnapshot = getSnapshot();\n          if (!objectIs(nextSnapshot, cachedSnapshot)) {\n            error('The result of getSnapshot should be cached to avoid an infinite loop');\n            didWarnUncachedGetSnapshot = true;\n          }\n        }\n      }\n      var prevSnapshot = hook.memoizedState;\n      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n      if (snapshotChanged) {\n        hook.memoizedState = nextSnapshot;\n        markWorkInProgressReceivedUpdate();\n      }\n      var inst = hook.queue;\n      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n\n      if (inst.getSnapshot !== getSnapshot || snapshotChanged ||\n      // Check if the susbcribe function changed. We can save some memory by\n      // checking whether we scheduled a subscription effect above.\n      workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n        fiber.flags |= Passive;\n        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n        // Right before committing, we will walk the tree and check if any of the\n        // stores were mutated.\n\n        var root = getWorkInProgressRoot();\n        if (root === null) {\n          throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n        }\n        if (!includesBlockingLane(root, renderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      }\n      return nextSnapshot;\n    }\n    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n      fiber.flags |= StoreConsistency;\n      var check = {\n        getSnapshot: getSnapshot,\n        value: renderedSnapshot\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.stores = [check];\n      } else {\n        var stores = componentUpdateQueue.stores;\n        if (stores === null) {\n          componentUpdateQueue.stores = [check];\n        } else {\n          stores.push(check);\n        }\n      }\n    }\n    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n      // These are updated in the passive phase\n      inst.value = nextSnapshot;\n      inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n      // have been in an event that fired before the passive effects, or it could\n      // have been in a layout effect. In that case, we would have used the old\n      // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceStoreRerender(fiber);\n      }\n    }\n    function subscribeToStore(fiber, inst, subscribe) {\n      var handleStoreChange = function () {\n        // The store changed. Check if the snapshot changed since the last time we\n        // read from the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceStoreRerender(fiber);\n        }\n      }; // Subscribe to the store and return a clean-up function.\n\n      return subscribe(handleStoreChange);\n    }\n    function checkIfSnapshotChanged(inst) {\n      var latestGetSnapshot = inst.getSnapshot;\n      var prevValue = inst.value;\n      try {\n        var nextValue = latestGetSnapshot();\n        return !objectIs(prevValue, nextValue);\n      } catch (error) {\n        return true;\n      }\n    }\n    function forceStoreRerender(fiber) {\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n    function mountState(initialState) {\n      var hook = mountWorkInProgressHook();\n      if (typeof initialState === 'function') {\n        // $FlowFixMe: Flow doesn't like mixed types\n        initialState = initialState();\n      }\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        interleaved: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: basicStateReducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n      return [hook.memoizedState, dispatch];\n    }\n    function updateState(initialState) {\n      return updateReducer(basicStateReducer);\n    }\n    function rerenderState(initialState) {\n      return rerenderReducer(basicStateReducer);\n    }\n    function pushEffect(tag, create, destroy, deps) {\n      var effect = {\n        tag: tag,\n        create: create,\n        destroy: destroy,\n        deps: deps,\n        // Circular\n        next: null\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.lastEffect = effect.next = effect;\n      } else {\n        var lastEffect = componentUpdateQueue.lastEffect;\n        if (lastEffect === null) {\n          componentUpdateQueue.lastEffect = effect.next = effect;\n        } else {\n          var firstEffect = lastEffect.next;\n          lastEffect.next = effect;\n          effect.next = firstEffect;\n          componentUpdateQueue.lastEffect = effect;\n        }\n      }\n      return effect;\n    }\n    function mountRef(initialValue) {\n      var hook = mountWorkInProgressHook();\n      {\n        var _ref2 = {\n          current: initialValue\n        };\n        hook.memoizedState = _ref2;\n        return _ref2;\n      }\n    }\n    function updateRef(initialValue) {\n      var hook = updateWorkInProgressHook();\n      return hook.memoizedState;\n    }\n    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n    }\n    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var destroy = undefined;\n      if (currentHook !== null) {\n        var prevEffect = currentHook.memoizedState;\n        destroy = prevEffect.destroy;\n        if (nextDeps !== null) {\n          var prevDeps = prevEffect.deps;\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n            return;\n          }\n        }\n      }\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n    }\n    function mountEffect(create, deps) {\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\n      } else {\n        return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n      }\n    }\n    function updateEffect(create, deps) {\n      return updateEffectImpl(Passive, Passive$1, create, deps);\n    }\n    function mountInsertionEffect(create, deps) {\n      return mountEffectImpl(Update, Insertion, create, deps);\n    }\n    function updateInsertionEffect(create, deps) {\n      return updateEffectImpl(Update, Insertion, create, deps);\n    }\n    function mountLayoutEffect(create, deps) {\n      var fiberFlags = Update;\n      {\n        fiberFlags |= LayoutStatic;\n      }\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n      return mountEffectImpl(fiberFlags, Layout, create, deps);\n    }\n    function updateLayoutEffect(create, deps) {\n      return updateEffectImpl(Update, Layout, create, deps);\n    }\n    function imperativeHandleEffect(create, ref) {\n      if (typeof ref === 'function') {\n        var refCallback = ref;\n        var _inst = create();\n        refCallback(_inst);\n        return function () {\n          refCallback(null);\n        };\n      } else if (ref !== null && ref !== undefined) {\n        var refObject = ref;\n        {\n          if (!refObject.hasOwnProperty('current')) {\n            error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n          }\n        }\n        var _inst2 = create();\n        refObject.current = _inst2;\n        return function () {\n          refObject.current = null;\n        };\n      }\n    }\n    function mountImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== 'function') {\n          error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n        }\n      } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      var fiberFlags = Update;\n      {\n        fiberFlags |= LayoutStatic;\n      }\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n      return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n    }\n    function updateImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== 'function') {\n          error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n        }\n      } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n    }\n    function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n      // The react-debug-hooks package injects its own implementation\n      // so that e.g. DevTools can display custom hook values.\n    }\n    var updateDebugValue = mountDebugValue;\n    function mountCallback(callback, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n    function updateCallback(callback, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n      if (prevState !== null) {\n        if (nextDeps !== null) {\n          var prevDeps = prevState[1];\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            return prevState[0];\n          }\n        }\n      }\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n    function mountMemo(nextCreate, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var nextValue = nextCreate();\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n    function updateMemo(nextCreate, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n      if (prevState !== null) {\n        // Assume these are defined. If they're not, areHookInputsEqual will warn.\n        if (nextDeps !== null) {\n          var prevDeps = prevState[1];\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            return prevState[0];\n          }\n        }\n      }\n      var nextValue = nextCreate();\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n    function mountDeferredValue(value) {\n      var hook = mountWorkInProgressHook();\n      hook.memoizedState = value;\n      return value;\n    }\n    function updateDeferredValue(value) {\n      var hook = updateWorkInProgressHook();\n      var resolvedCurrentHook = currentHook;\n      var prevValue = resolvedCurrentHook.memoizedState;\n      return updateDeferredValueImpl(hook, prevValue, value);\n    }\n    function rerenderDeferredValue(value) {\n      var hook = updateWorkInProgressHook();\n      if (currentHook === null) {\n        // This is a rerender during a mount.\n        hook.memoizedState = value;\n        return value;\n      } else {\n        // This is a rerender during an update.\n        var prevValue = currentHook.memoizedState;\n        return updateDeferredValueImpl(hook, prevValue, value);\n      }\n    }\n    function updateDeferredValueImpl(hook, prevValue, value) {\n      var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n      if (shouldDeferValue) {\n        // This is an urgent update. If the value has changed, keep using the\n        // previous value and spawn a deferred render to update it later.\n        if (!objectIs(value, prevValue)) {\n          // Schedule a deferred render\n          var deferredLane = claimNextTransitionLane();\n          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n          markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent\n          // from the latest value. The name \"baseState\" doesn't really match how we\n          // use it because we're reusing a state hook field instead of creating a\n          // new one.\n\n          hook.baseState = true;\n        } // Reuse the previous value\n\n        return prevValue;\n      } else {\n        // This is not an urgent update, so we can use the latest value regardless\n        // of what it is. No need to defer it.\n        // However, if we're currently inside a spawned render, then we need to mark\n        // this as an update to prevent the fiber from bailing out.\n        //\n        // `baseState` is true when the current value is different from the rendered\n        // value. The name doesn't really match how we use it because we're reusing\n        // a state hook field instead of creating a new one.\n        if (hook.baseState) {\n          // Flip this back to false.\n          hook.baseState = false;\n          markWorkInProgressReceivedUpdate();\n        }\n        hook.memoizedState = value;\n        return value;\n      }\n    }\n    function startTransition(setPending, callback, options) {\n      var previousPriority = getCurrentUpdatePriority();\n      setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n      setPending(true);\n      var prevTransition = ReactCurrentBatchConfig$1.transition;\n      ReactCurrentBatchConfig$1.transition = {};\n      var currentTransition = ReactCurrentBatchConfig$1.transition;\n      {\n        ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n      }\n      try {\n        setPending(false);\n        callback();\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$1.transition = prevTransition;\n        {\n          if (prevTransition === null && currentTransition._updatedFibers) {\n            var updatedFibersCount = currentTransition._updatedFibers.size;\n            if (updatedFibersCount > 10) {\n              warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n            }\n            currentTransition._updatedFibers.clear();\n          }\n        }\n      }\n    }\n    function mountTransition() {\n      var _mountState = mountState(false),\n        isPending = _mountState[0],\n        setPending = _mountState[1]; // The `start` method never changes.\n\n      var start = startTransition.bind(null, setPending);\n      var hook = mountWorkInProgressHook();\n      hook.memoizedState = start;\n      return [isPending, start];\n    }\n    function updateTransition() {\n      var _updateState = updateState(),\n        isPending = _updateState[0];\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      return [isPending, start];\n    }\n    function rerenderTransition() {\n      var _rerenderState = rerenderState(),\n        isPending = _rerenderState[0];\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      return [isPending, start];\n    }\n    var isUpdatingOpaqueValueInRenderPhase = false;\n    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n      {\n        return isUpdatingOpaqueValueInRenderPhase;\n      }\n    }\n    function mountId() {\n      var hook = mountWorkInProgressHook();\n      var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n      // should do this in Fiber, too? Deferring this decision for now because\n      // there's no other place to store the prefix except for an internal field on\n      // the public createRoot object, which the fiber tree does not currently have\n      // a reference to.\n\n      var identifierPrefix = root.identifierPrefix;\n      var id;\n      if (getIsHydrating()) {\n        var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n\n        id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n        // that represents the position of this useId hook among all the useId\n        // hooks for this fiber.\n\n        var localId = localIdCounter++;\n        if (localId > 0) {\n          id += 'H' + localId.toString(32);\n        }\n        id += ':';\n      } else {\n        // Use a lowercase r prefix for client-generated ids.\n        var globalClientId = globalClientIdCounter++;\n        id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n      }\n      hook.memoizedState = id;\n      return id;\n    }\n    function updateId() {\n      var hook = updateWorkInProgressHook();\n      var id = hook.memoizedState;\n      return id;\n    }\n    function dispatchReducerAction(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === 'function') {\n          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n        }\n      }\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n        if (root !== null) {\n          var eventTime = requestEventTime();\n          scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n      markUpdateInDevTools(fiber, lane);\n    }\n    function dispatchSetState(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === 'function') {\n          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n        }\n      }\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        var alternate = fiber.alternate;\n        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n          // The queue is currently empty, which means we can eagerly compute the\n          // next state before entering the render phase. If the new state is the\n          // same as the current state, we may be able to bail out entirely.\n          var lastRenderedReducer = queue.lastRenderedReducer;\n          if (lastRenderedReducer !== null) {\n            var prevDispatcher;\n            {\n              prevDispatcher = ReactCurrentDispatcher$1.current;\n              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            }\n            try {\n              var currentState = queue.lastRenderedState;\n              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n              // it, on the update object. If the reducer hasn't changed by the\n              // time we enter the render phase, then the eager state can be used\n              // without calling the reducer again.\n\n              update.hasEagerState = true;\n              update.eagerState = eagerState;\n              if (objectIs(eagerState, currentState)) {\n                // Fast path. We can bail out without scheduling React to re-render.\n                // It's still possible that we'll need to rebase this update later,\n                // if the component re-renders for a different reason and by that\n                // time the reducer has changed.\n                // TODO: Do we still need to entangle transitions in this case?\n                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);\n                return;\n              }\n            } catch (error) {// Suppress the error. It will throw again in the render phase.\n            } finally {\n              {\n                ReactCurrentDispatcher$1.current = prevDispatcher;\n              }\n            }\n          }\n        }\n        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n        if (root !== null) {\n          var eventTime = requestEventTime();\n          scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n      markUpdateInDevTools(fiber, lane);\n    }\n    function isRenderPhaseUpdate(fiber) {\n      var alternate = fiber.alternate;\n      return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n    }\n    function enqueueRenderPhaseUpdate(queue, update) {\n      // This is a render phase update. Stash it in a lazily-created map of\n      // queue -> linked list of updates. After this render pass, we'll restart\n      // and apply the stashed updates on top of the work-in-progress hook.\n      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n      var pending = queue.pending;\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    } // TODO: Move to ReactFiberConcurrentUpdates?\n\n    function entangleTransitionUpdate(root, queue, lane) {\n      if (isTransitionLane(lane)) {\n        var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n        // must have finished. We can remove them from the shared queue, which\n        // represents a superset of the actually pending lanes. In some cases we\n        // may entangle more than we need to, but that's OK. In fact it's worse if\n        // we *don't* entangle when we should.\n\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n        // the lane finished since the last time we entangled it. So we need to\n        // entangle it again, just to be sure.\n\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n    function markUpdateInDevTools(fiber, lane, action) {\n      {\n        markStateUpdateScheduled(fiber, lane);\n      }\n    }\n    var ContextOnlyDispatcher = {\n      readContext: readContext,\n      useCallback: throwInvalidHookError,\n      useContext: throwInvalidHookError,\n      useEffect: throwInvalidHookError,\n      useImperativeHandle: throwInvalidHookError,\n      useInsertionEffect: throwInvalidHookError,\n      useLayoutEffect: throwInvalidHookError,\n      useMemo: throwInvalidHookError,\n      useReducer: throwInvalidHookError,\n      useRef: throwInvalidHookError,\n      useState: throwInvalidHookError,\n      useDebugValue: throwInvalidHookError,\n      useDeferredValue: throwInvalidHookError,\n      useTransition: throwInvalidHookError,\n      useMutableSource: throwInvalidHookError,\n      useSyncExternalStore: throwInvalidHookError,\n      useId: throwInvalidHookError,\n      unstable_isNewReconciler: enableNewReconciler\n    };\n    var HooksDispatcherOnMountInDEV = null;\n    var HooksDispatcherOnMountWithHookTypesInDEV = null;\n    var HooksDispatcherOnUpdateInDEV = null;\n    var HooksDispatcherOnRerenderInDEV = null;\n    var InvalidNestedHooksDispatcherOnMountInDEV = null;\n    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n    {\n      var warnInvalidContextAccess = function () {\n        error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n      };\n      var warnInvalidHookAccess = function () {\n        error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n      };\n      HooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          mountHookTypesDev();\n          return mountDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          mountHookTypesDev();\n          return mountMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          mountHookTypesDev();\n          return mountId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      HooksDispatcherOnMountWithHookTypesInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          updateHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          updateHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          updateHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          updateHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          updateHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          updateHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          updateHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          updateHookTypesDev();\n          return mountDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          updateHookTypesDev();\n          return mountTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          updateHookTypesDev();\n          return mountMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          updateHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          updateHookTypesDev();\n          return mountId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      HooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          updateHookTypesDev();\n          return updateDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      HooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          updateHookTypesDev();\n          return rerenderDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      InvalidNestedHooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      InvalidNestedHooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      InvalidNestedHooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n    }\n    var now$1 = Scheduler.unstable_now;\n    var commitTime = 0;\n    var layoutEffectStartTime = -1;\n    var profilerStartTime = -1;\n    var passiveEffectStartTime = -1;\n    /**\n     * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n     *\n     * The overall sequence is:\n     *   1. render\n     *   2. commit (and call `onRender`, `onCommit`)\n     *   3. check for nested updates\n     *   4. flush passive effects (and call `onPostCommit`)\n     *\n     * Nested updates are identified in step 3 above,\n     * but step 4 still applies to the work that was just committed.\n     * We use two flags to track nested updates then:\n     * one tracks whether the upcoming update is a nested update,\n     * and the other tracks whether the current update was a nested update.\n     * The first value gets synced to the second at the start of the render phase.\n     */\n\n    var currentUpdateIsNested = false;\n    var nestedUpdateScheduled = false;\n    function isCurrentUpdateNested() {\n      return currentUpdateIsNested;\n    }\n    function markNestedUpdateScheduled() {\n      {\n        nestedUpdateScheduled = true;\n      }\n    }\n    function resetNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = false;\n        nestedUpdateScheduled = false;\n      }\n    }\n    function syncNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = nestedUpdateScheduled;\n        nestedUpdateScheduled = false;\n      }\n    }\n    function getCommitTime() {\n      return commitTime;\n    }\n    function recordCommitTime() {\n      commitTime = now$1();\n    }\n    function startProfilerTimer(fiber) {\n      profilerStartTime = now$1();\n      if (fiber.actualStartTime < 0) {\n        fiber.actualStartTime = now$1();\n      }\n    }\n    function stopProfilerTimerIfRunning(fiber) {\n      profilerStartTime = -1;\n    }\n    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n      if (profilerStartTime >= 0) {\n        var elapsedTime = now$1() - profilerStartTime;\n        fiber.actualDuration += elapsedTime;\n        if (overrideBaseTime) {\n          fiber.selfBaseDuration = elapsedTime;\n        }\n        profilerStartTime = -1;\n      }\n    }\n    function recordLayoutEffectDuration(fiber) {\n      if (layoutEffectStartTime >= 0) {\n        var elapsedTime = now$1() - layoutEffectStartTime;\n        layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n        // Or the root (for the DevTools Profiler to read)\n\n        var parentFiber = fiber.return;\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n              root.effectDuration += elapsedTime;\n              return;\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += elapsedTime;\n              return;\n          }\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n    function recordPassiveEffectDuration(fiber) {\n      if (passiveEffectStartTime >= 0) {\n        var elapsedTime = now$1() - passiveEffectStartTime;\n        passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n        // Or the root (for the DevTools Profiler to read)\n\n        var parentFiber = fiber.return;\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n              if (root !== null) {\n                root.passiveEffectDuration += elapsedTime;\n              }\n              return;\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n              if (parentStateNode !== null) {\n                // Detached fibers have their state node cleared out.\n                // In this case, the return pointer is also cleared out,\n                // so we won't be able to report the time spent in this Profiler's subtree.\n                parentStateNode.passiveEffectDuration += elapsedTime;\n              }\n              return;\n          }\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n    function startLayoutEffectTimer() {\n      layoutEffectStartTime = now$1();\n    }\n    function startPassiveEffectTimer() {\n      passiveEffectStartTime = now$1();\n    }\n    function transferActualDuration(fiber) {\n      // Transfer time spent rendering these children so we don't lose it\n      // after we rerender. This is used as a helper in special cases\n      // where we should count the work of multiple passes.\n      var child = fiber.child;\n      while (child) {\n        fiber.actualDuration += child.actualDuration;\n        child = child.sibling;\n      }\n    }\n    function createCapturedValueAtFiber(value, source) {\n      // If the value is an error, call this function immediately after it is thrown\n      // so the stack is accurate.\n      return {\n        value: value,\n        source: source,\n        stack: getStackByFiberInDevAndProd(source),\n        digest: null\n      };\n    }\n    function createCapturedValue(value, digest, stack) {\n      return {\n        value: value,\n        source: null,\n        stack: stack != null ? stack : null,\n        digest: digest != null ? digest : null\n      };\n    }\n\n    // This module is forked in different environments.\n    // By default, return `true` to log errors to the console.\n    // Forks can return `false` if this isn't desirable.\n    function showErrorDialog(boundary, errorInfo) {\n      return true;\n    }\n    function logCapturedError(boundary, errorInfo) {\n      try {\n        var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n        // This enables renderers like ReactNative to better manage redbox behavior.\n\n        if (logError === false) {\n          return;\n        }\n        var error = errorInfo.value;\n        if (true) {\n          var source = errorInfo.source;\n          var stack = errorInfo.stack;\n          var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n          // `preventDefault()` in window `error` handler.\n          // We record this information as an expando on the error.\n\n          if (error != null && error._suppressLogging) {\n            if (boundary.tag === ClassComponent) {\n              // The error is recoverable and was silenced.\n              // Ignore it and don't print the stack addendum.\n              // This is handy for testing error boundaries without noise.\n              return;\n            } // The error is fatal. Since the silencing might have\n            // been accidental, we'll surface it anyway.\n            // However, the browser would have silenced the original error\n            // so we'll print it first, and then print the stack addendum.\n\n            console['error'](error); // Don't transform to our wrapper\n            // For a more detailed description of this block, see:\n            // https://github.com/facebook/react/pull/13384\n          }\n\n          var componentName = source ? getComponentNameFromFiber(source) : null;\n          var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n          var errorBoundaryMessage;\n          if (boundary.tag === HostRoot) {\n            errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n          } else {\n            var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n            errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n          }\n          var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n          // We don't include the original error message and JS stack because the browser\n          // has already printed it. Even if the application swallows the error, it is still\n          // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n          console['error'](combinedMessage); // Don't transform to our wrapper\n        } else {\n          // In production, we print the error directly.\n          // This will include the message, the JS stack, and anything the browser wants to show.\n          // We pass the error object instead of custom message so that the browser displays the error natively.\n          console['error'](error); // Don't transform to our wrapper\n        }\n      } catch (e) {\n        // This method must not throw, or React internal state will get messed up.\n        // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n        // we want to report this error outside of the normal stack as a last resort.\n        // https://github.com/facebook/react/issues/13188\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n    function createRootErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n      update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      update.payload = {\n        element: null\n      };\n      var error = errorInfo.value;\n      update.callback = function () {\n        onUncaughtError(error);\n        logCapturedError(fiber, errorInfo);\n      };\n      return update;\n    }\n    function createClassErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(NoTimestamp, lane);\n      update.tag = CaptureUpdate;\n      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n      if (typeof getDerivedStateFromError === 'function') {\n        var error$1 = errorInfo.value;\n        update.payload = function () {\n          return getDerivedStateFromError(error$1);\n        };\n        update.callback = function () {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n          logCapturedError(fiber, errorInfo);\n        };\n      }\n      var inst = fiber.stateNode;\n      if (inst !== null && typeof inst.componentDidCatch === 'function') {\n        update.callback = function callback() {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n          logCapturedError(fiber, errorInfo);\n          if (typeof getDerivedStateFromError !== 'function') {\n            // To preserve the preexisting retry behavior of error boundaries,\n            // we keep track of which ones already failed during this batch.\n            // This gets reset before we yield back to the browser.\n            // TODO: Warn in strict mode if getDerivedStateFromError is\n            // not defined.\n            markLegacyErrorBoundaryAsFailed(this);\n          }\n          var error$1 = errorInfo.value;\n          var stack = errorInfo.stack;\n          this.componentDidCatch(error$1, {\n            componentStack: stack !== null ? stack : ''\n          });\n          {\n            if (typeof getDerivedStateFromError !== 'function') {\n              // If componentDidCatch is the only error boundary method defined,\n              // then it needs to call setState to recover from errors.\n              // If no state update is scheduled then the boundary will swallow the error.\n              if (!includesSomeLane(fiber.lanes, SyncLane)) {\n                error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n              }\n            }\n          }\n        };\n      }\n      return update;\n    }\n    function attachPingListener(root, wakeable, lanes) {\n      // Attach a ping listener\n      //\n      // The data might resolve before we have a chance to commit the fallback. Or,\n      // in the case of a refresh, we'll never commit a fallback. So we need to\n      // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n      // try rendering the tree again.\n      //\n      // Only attach a listener if one does not already exist for the lanes\n      // we're currently rendering (which acts like a \"thread ID\" here).\n      //\n      // We only need to do this in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n      var pingCache = root.pingCache;\n      var threadIDs;\n      if (pingCache === null) {\n        pingCache = root.pingCache = new PossiblyWeakMap$1();\n        threadIDs = new Set();\n        pingCache.set(wakeable, threadIDs);\n      } else {\n        threadIDs = pingCache.get(wakeable);\n        if (threadIDs === undefined) {\n          threadIDs = new Set();\n          pingCache.set(wakeable, threadIDs);\n        }\n      }\n      if (!threadIDs.has(lanes)) {\n        // Memoize using the thread ID to prevent redundant listeners.\n        threadIDs.add(lanes);\n        var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n        {\n          if (isDevToolsPresent) {\n            // If we have pending work still, restore the original updaters\n            restorePendingUpdaters(root, lanes);\n          }\n        }\n        wakeable.then(ping, ping);\n      }\n    }\n    function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n      // Retry listener\n      //\n      // If the fallback does commit, we need to attach a different type of\n      // listener. This one schedules an update on the Suspense boundary to turn\n      // the fallback state off.\n      //\n      // Stash the wakeable on the boundary fiber so we can access it in the\n      // commit phase.\n      //\n      // When the wakeable resolves, we'll attempt to render the boundary\n      // again (\"retry\").\n      var wakeables = suspenseBoundary.updateQueue;\n      if (wakeables === null) {\n        var updateQueue = new Set();\n        updateQueue.add(wakeable);\n        suspenseBoundary.updateQueue = updateQueue;\n      } else {\n        wakeables.add(wakeable);\n      }\n    }\n    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n      // A legacy mode Suspense quirk, only relevant to hook components.\n\n      var tag = sourceFiber.tag;\n      if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n        var currentSource = sourceFiber.alternate;\n        if (currentSource) {\n          sourceFiber.updateQueue = currentSource.updateQueue;\n          sourceFiber.memoizedState = currentSource.memoizedState;\n          sourceFiber.lanes = currentSource.lanes;\n        } else {\n          sourceFiber.updateQueue = null;\n          sourceFiber.memoizedState = null;\n        }\n      }\n    }\n    function getNearestSuspenseBoundaryToCapture(returnFiber) {\n      var node = returnFiber;\n      do {\n        if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n          return node;\n        } // This boundary already captured during this render. Continue to the next\n        // boundary.\n\n        node = node.return;\n      } while (node !== null);\n      return null;\n    }\n    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n      // This marks a Suspense boundary so that when we're unwinding the stack,\n      // it captures the suspended \"exception\" and does a second (fallback) pass.\n      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n        // Legacy Mode Suspense\n        //\n        // If the boundary is in legacy mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. When the Suspense boundary completes,\n        // we'll do a second pass to render the fallback.\n        if (suspenseBoundary === returnFiber) {\n          // Special case where we suspended while reconciling the children of\n          // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n          // when a React.lazy component is a direct child of a\n          // Suspense boundary.\n          //\n          // Suspense boundaries are implemented as multiple fibers, but they\n          // are a single conceptual unit. The legacy mode behavior where we\n          // pretend the suspended fiber committed as `null` won't work,\n          // because in this case the \"suspended\" fiber is the inner\n          // Offscreen wrapper.\n          //\n          // Because the contents of the boundary haven't started rendering\n          // yet (i.e. nothing in the tree has partially rendered) we can\n          // switch to the regular, concurrent mode behavior: mark the\n          // boundary with ShouldCapture and enter the unwind phase.\n          suspenseBoundary.flags |= ShouldCapture;\n        } else {\n          suspenseBoundary.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n          if (sourceFiber.tag === ClassComponent) {\n            var currentSourceFiber = sourceFiber.alternate;\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              var update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update, SyncLane);\n            }\n          } // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n        }\n        return suspenseBoundary;\n      } // Confirmed that the boundary is in a concurrent mode tree. Continue\n      // with the normal suspend path.\n      //\n      // After this we'll use a set of heuristics to determine whether this\n      // render pass will run to completion or restart or \"suspend\" the commit.\n      // The actual logic for this is spread out in different places.\n      //\n      // This first principle is that if we're going to suspend when we complete\n      // a root, then we should also restart if we get an update or ping that\n      // might unsuspend it, and vice versa. The only reason to suspend is\n      // because you think you might want to restart before committing. However,\n      // it doesn't make sense to restart only while in the period we're suspended.\n      //\n      // Restarting too aggressively is also not good because it starves out any\n      // intermediate loading state. So we use heuristics to determine when.\n      // Suspense Heuristics\n      //\n      // If nothing threw a Promise or all the same fallbacks are already showing,\n      // then don't suspend/restart.\n      //\n      // If this is an initial render of a new tree of Suspense boundaries and\n      // those trigger a fallback, then don't suspend/restart. We want to ensure\n      // that we can show the initial loading state as quickly as possible.\n      //\n      // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n      // a fallback, then we should always suspend/restart. Transitions apply\n      // to this case. If none is defined, JND is used instead.\n      //\n      // If we're already showing a fallback and it gets \"retried\", allowing us to show\n      // another level, but there's still an inner boundary that would show a fallback,\n      // then we suspend/restart for 500ms since the last time we showed a fallback\n      // anywhere in the tree. This effectively throttles progressive loading into a\n      // consistent train of commits. This also gives us an opportunity to restart to\n      // get to the completed state slightly earlier.\n      //\n      // If there's ambiguity due to batching it's resolved in preference of:\n      // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n      //\n      // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n      // ensure that new initial loading states can commit as soon as possible.\n\n      suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n      // the begin phase to prevent an early bailout.\n\n      suspenseBoundary.lanes = rootRenderLanes;\n      return suspenseBoundary;\n    }\n    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n      // The source fiber did not complete.\n      sourceFiber.flags |= Incomplete;\n      {\n        if (isDevToolsPresent) {\n          // If we have pending work still, restore the original updaters\n          restorePendingUpdaters(root, rootRenderLanes);\n        }\n      }\n      if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n        // This is a wakeable. The component suspended.\n        var wakeable = value;\n        resetSuspendedComponent(sourceFiber);\n        {\n          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n            markDidThrowWhileHydratingDEV();\n          }\n        }\n        var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n        if (suspenseBoundary !== null) {\n          suspenseBoundary.flags &= ~ForceClientRender;\n          markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n          // commits fallbacks synchronously, so there are no pings.\n\n          if (suspenseBoundary.mode & ConcurrentMode) {\n            attachPingListener(root, wakeable, rootRenderLanes);\n          }\n          attachRetryListener(suspenseBoundary, root, wakeable);\n          return;\n        } else {\n          // No boundary was found. Unless this is a sync update, this is OK.\n          // We can suspend and wait for more data to arrive.\n          if (!includesSyncLane(rootRenderLanes)) {\n            // This is not a sync update. Suspend. Since we're not activating a\n            // Suspense boundary, this will unwind all the way to the root without\n            // performing a second pass to render a fallback. (This is arguably how\n            // refresh transitions should work, too, since we're not going to commit\n            // the fallbacks anyway.)\n            //\n            // This case also applies to initial hydration.\n            attachPingListener(root, wakeable, rootRenderLanes);\n            renderDidSuspendDelayIfPossible();\n            return;\n          } // This is a sync/discrete update. We treat this case like an error\n          // because discrete renders are expected to produce a complete tree\n          // synchronously to maintain consistency with external state.\n\n          var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n          // The error will be caught by the nearest suspense boundary.\n\n          value = uncaughtSuspenseError;\n        }\n      } else {\n        // This is a regular error, not a Suspense wakeable.\n        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n          markDidThrowWhileHydratingDEV();\n          var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\n          // discarding the dehydrated content and switching to a client render.\n          // Instead of surfacing the error, find the nearest Suspense boundary\n          // and render it again without hydration.\n\n          if (_suspenseBoundary !== null) {\n            if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n              // Set a flag to indicate that we should try rendering the normal\n              // children again, not the fallback.\n              _suspenseBoundary.flags |= ForceClientRender;\n            }\n            markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n            // still log it so it can be fixed.\n\n            queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n            return;\n          }\n        }\n      }\n      value = createCapturedValueAtFiber(value, sourceFiber);\n      renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\n      // over and traverse parent path again, this time treating the exception\n      // as an error.\n\n      var workInProgress = returnFiber;\n      do {\n        switch (workInProgress.tag) {\n          case HostRoot:\n            {\n              var _errorInfo = value;\n              workInProgress.flags |= ShouldCapture;\n              var lane = pickArbitraryLane(rootRenderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n              var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n              enqueueCapturedUpdate(workInProgress, update);\n              return;\n            }\n          case ClassComponent:\n            // Capture and retry\n            var errorInfo = value;\n            var ctor = workInProgress.type;\n            var instance = workInProgress.stateNode;\n            if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n              workInProgress.flags |= ShouldCapture;\n              var _lane = pickArbitraryLane(rootRenderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n              var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n              enqueueCapturedUpdate(workInProgress, _update);\n              return;\n            }\n            break;\n        }\n        workInProgress = workInProgress.return;\n      } while (workInProgress !== null);\n    }\n    function getSuspendedCache() {\n      {\n        return null;\n      } // This function is called when a Suspense boundary suspends. It returns the\n    }\n\n    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n    var didReceiveUpdate = false;\n    var didWarnAboutBadClass;\n    var didWarnAboutModulePatternComponent;\n    var didWarnAboutContextTypeOnFunctionComponent;\n    var didWarnAboutGetDerivedStateOnFunctionComponent;\n    var didWarnAboutFunctionRefs;\n    var didWarnAboutReassigningProps;\n    var didWarnAboutRevealOrder;\n    var didWarnAboutTailOptions;\n    {\n      didWarnAboutBadClass = {};\n      didWarnAboutModulePatternComponent = {};\n      didWarnAboutContextTypeOnFunctionComponent = {};\n      didWarnAboutGetDerivedStateOnFunctionComponent = {};\n      didWarnAboutFunctionRefs = {};\n      didWarnAboutReassigningProps = false;\n      didWarnAboutRevealOrder = {};\n      didWarnAboutTailOptions = {};\n    }\n    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n      if (current === null) {\n        // If this is a fresh new component that hasn't been rendered yet, we\n        // won't update its child set by applying minimal side-effects. Instead,\n        // we will add them all to the child before it gets rendered. That means\n        // we can optimize this reconciliation pass by not tracking side-effects.\n        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n      } else {\n        // If the current child is the same as the work in progress, it means that\n        // we haven't yet started any work on these children. Therefore, we use\n        // the clone algorithm to create a copy of all the current children.\n        // If we had any progressed work already, that is invalid at this point so\n        // let's throw it out.\n        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n      }\n    }\n    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n      // This function is fork of reconcileChildren. It's used in cases where we\n      // want to reconcile without matching against the existing set. This has the\n      // effect of all current children being unmounted; even if the type and key\n      // are the same, the old child is unmounted and a new child is created.\n      //\n      // To do this, we're going to go through the reconcile algorithm twice. In\n      // the first pass, we schedule a deletion for all the current children by\n      // passing null.\n      workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n      // pass null in place of where we usually pass the current child set. This has\n      // the effect of remounting all children regardless of whether their\n      // identities match.\n\n      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n    }\n    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n      // TODO: current can be non-null here even if the component\n      // hasn't yet mounted. This happens after the first render suspends.\n      // We'll need to figure out if this is fine or can cause issues.\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps,\n            // Resolved props\n            'prop', getComponentNameFromType(Component));\n          }\n        }\n      }\n      var render = Component.render;\n      var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n      var nextChildren;\n      var hasId;\n      prepareToReadContext(workInProgress, renderLanes);\n      {\n        markComponentRenderStarted(workInProgress);\n      }\n      {\n        ReactCurrentOwner$1.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n        hasId = checkDidRenderIdHook();\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n          try {\n            nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n            hasId = checkDidRenderIdHook();\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n        setIsRendering(false);\n      }\n      {\n        markComponentRenderStopped();\n      }\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      if (getIsHydrating() && hasId) {\n        pushMaterializedTreeId(workInProgress);\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      if (current === null) {\n        var type = Component.type;\n        if (isSimpleFunctionComponent(type) && Component.compare === null &&\n        // SimpleMemoComponent codepath doesn't resolve outer props either.\n        Component.defaultProps === undefined) {\n          var resolvedType = type;\n          {\n            resolvedType = resolveFunctionForHotReloading(type);\n          } // If this is a plain function component without default props,\n          // and with only the default shallow comparison, we upgrade it\n          // to a SimpleMemoComponent to allow fast path updates.\n\n          workInProgress.tag = SimpleMemoComponent;\n          workInProgress.type = resolvedType;\n          {\n            validateFunctionComponentInDev(workInProgress, type);\n          }\n          return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n        }\n        {\n          var innerPropTypes = type.propTypes;\n          if (innerPropTypes) {\n            // Inner memo component props aren't currently validated in createElement.\n            // We could move it there, but we'd still need this for lazy code path.\n            checkPropTypes(innerPropTypes, nextProps,\n            // Resolved props\n            'prop', getComponentNameFromType(type));\n          }\n        }\n        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n        child.ref = workInProgress.ref;\n        child.return = workInProgress;\n        workInProgress.child = child;\n        return child;\n      }\n      {\n        var _type = Component.type;\n        var _innerPropTypes = _type.propTypes;\n        if (_innerPropTypes) {\n          // Inner memo component props aren't currently validated in createElement.\n          // We could move it there, but we'd still need this for lazy code path.\n          checkPropTypes(_innerPropTypes, nextProps,\n          // Resolved props\n          'prop', getComponentNameFromType(_type));\n        }\n      }\n      var currentChild = current.child; // This is always exactly one child\n\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n      if (!hasScheduledUpdateOrContext) {\n        // This will be the props with resolved defaultProps,\n        // unlike current.memoizedProps which will be the unresolved ones.\n        var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n        var compare = Component.compare;\n        compare = compare !== null ? compare : shallowEqual;\n        if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n      var newChild = createWorkInProgress(currentChild, nextProps);\n      newChild.ref = workInProgress.ref;\n      newChild.return = workInProgress;\n      workInProgress.child = newChild;\n      return newChild;\n    }\n    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      // TODO: current can be non-null here even if the component\n      // hasn't yet mounted. This happens when the inner render suspends.\n      // We'll need to figure out if this is fine or can cause issues.\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var outerMemoType = workInProgress.elementType;\n          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n            // We warn when you define propTypes on lazy()\n            // so let's just skip over it to find memo() outer wrapper.\n            // Inner props for memo are validated later.\n            var lazyComponent = outerMemoType;\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n            try {\n              outerMemoType = init(payload);\n            } catch (x) {\n              outerMemoType = null;\n            } // Inner propTypes will be validated in the function component path.\n\n            var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, nextProps,\n              // Resolved (SimpleMemoComponent has no defaultProps)\n              'prop', getComponentNameFromType(outerMemoType));\n            }\n          }\n        }\n      }\n      if (current !== null) {\n        var prevProps = current.memoizedProps;\n        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref &&\n        // Prevent bailout if the implementation changed due to hot reload.\n        workInProgress.type === current.type) {\n          didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n          // would during a normal fiber bailout.\n          //\n          // We don't have strong guarantees that the props object is referentially\n          // equal during updates where we can't bail out anyway — like if the props\n          // are shallowly equal, but there's a local state or context update in the\n          // same batch.\n          //\n          // However, as a principle, we should aim to make the behavior consistent\n          // across different ways of memoizing a component. For example, React.memo\n          // has a different internal Fiber layout if you pass a normal function\n          // component (SimpleMemoComponent) versus if you pass a different type\n          // like forwardRef (MemoComponent). But this is an implementation detail.\n          // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n          // affect whether the props object is reused during a bailout.\n\n          workInProgress.pendingProps = nextProps = prevProps;\n          if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n            // The pending lanes were cleared at the beginning of beginWork. We're\n            // about to bail out, but there might be other lanes that weren't\n            // included in the current render. Usually, the priority level of the\n            // remaining updates is accumulated during the evaluation of the\n            // component (i.e. when processing the update queue). But since since\n            // we're bailing out early *without* evaluating the component, we need\n            // to account for it here, too. Reset to the value of the current fiber.\n            // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n            // because a MemoComponent fiber does not have hooks or an update queue;\n            // rather, it wraps around an inner component, which may or may not\n            // contains hooks.\n            // TODO: Move the reset at in beginWork out of the common path so that\n            // this is no longer necessary.\n            workInProgress.lanes = current.lanes;\n            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n          } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n            // This is a special case that only exists for legacy mode.\n            // See https://github.com/facebook/react/pull/19216.\n            didReceiveUpdate = true;\n          }\n        }\n      }\n      return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n    }\n    function updateOffscreenComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      var prevState = current !== null ? current.memoizedState : null;\n      if (nextProps.mode === 'hidden' || enableLegacyHidden) {\n        // Rendering a hidden tree.\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          // In legacy sync mode, don't defer the subtree. Render it now.\n          // TODO: Consider how Offscreen should work with transitions in the future\n          var nextState = {\n            baseLanes: NoLanes,\n            cachePool: null,\n            transitions: null\n          };\n          workInProgress.memoizedState = nextState;\n          pushRenderLanes(workInProgress, renderLanes);\n        } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n          var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n          // and resume this tree later.\n\n          var nextBaseLanes;\n          if (prevState !== null) {\n            var prevBaseLanes = prevState.baseLanes;\n            nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n          } else {\n            nextBaseLanes = renderLanes;\n          } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n          workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n          var _nextState = {\n            baseLanes: nextBaseLanes,\n            cachePool: spawnedCachePool,\n            transitions: null\n          };\n          workInProgress.memoizedState = _nextState;\n          workInProgress.updateQueue = null;\n          // to avoid a push/pop misalignment.\n\n          pushRenderLanes(workInProgress, nextBaseLanes);\n          return null;\n        } else {\n          // This is the second render. The surrounding visible content has already\n          // committed. Now we resume rendering the hidden tree.\n          // Rendering at offscreen, so we can clear the base lanes.\n          var _nextState2 = {\n            baseLanes: NoLanes,\n            cachePool: null,\n            transitions: null\n          };\n          workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n          var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n          pushRenderLanes(workInProgress, subtreeRenderLanes);\n        }\n      } else {\n        // Rendering a visible tree.\n        var _subtreeRenderLanes;\n        if (prevState !== null) {\n          // We're going from hidden -> visible.\n          _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n          workInProgress.memoizedState = null;\n        } else {\n          // We weren't previously hidden, and we still aren't, so there's nothing\n          // special to do. Need to push to the stack regardless, though, to avoid\n          // a push/pop misalignment.\n          _subtreeRenderLanes = renderLanes;\n        }\n        pushRenderLanes(workInProgress, _subtreeRenderLanes);\n      }\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    } // Note: These happen to have identical begin phases, for now. We shouldn't hold\n\n    function updateFragment(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateMode(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateProfiler(current, workInProgress, renderLanes) {\n      {\n        workInProgress.flags |= Update;\n        {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function markRef(current, workInProgress) {\n      var ref = workInProgress.ref;\n      if (current === null && ref !== null || current !== null && current.ref !== ref) {\n        // Schedule a Ref effect\n        workInProgress.flags |= Ref;\n        {\n          workInProgress.flags |= RefStatic;\n        }\n      }\n    }\n    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps,\n            // Resolved props\n            'prop', getComponentNameFromType(Component));\n          }\n        }\n      }\n      var context;\n      {\n        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n        context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n      var nextChildren;\n      var hasId;\n      prepareToReadContext(workInProgress, renderLanes);\n      {\n        markComponentRenderStarted(workInProgress);\n      }\n      {\n        ReactCurrentOwner$1.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n        hasId = checkDidRenderIdHook();\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n          try {\n            nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n            hasId = checkDidRenderIdHook();\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n        setIsRendering(false);\n      }\n      {\n        markComponentRenderStopped();\n      }\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      if (getIsHydrating() && hasId) {\n        pushMaterializedTreeId(workInProgress);\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        // This is used by DevTools to force a boundary to error.\n        switch (shouldError(workInProgress)) {\n          case false:\n            {\n              var _instance = workInProgress.stateNode;\n              var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n              // Is there a better way to do this?\n\n              var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n              var state = tempInstance.state;\n              _instance.updater.enqueueSetState(_instance, state, null);\n              break;\n            }\n          case true:\n            {\n              workInProgress.flags |= DidCapture;\n              workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n              var error$1 = new Error('Simulated error coming from DevTools');\n              var lane = pickArbitraryLane(renderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n              var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);\n              enqueueCapturedUpdate(workInProgress, update);\n              break;\n            }\n        }\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps,\n            // Resolved props\n            'prop', getComponentNameFromType(Component));\n          }\n        }\n      } // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n\n      var hasContext;\n      if (isContextProvider(Component)) {\n        hasContext = true;\n        pushContextProvider(workInProgress);\n      } else {\n        hasContext = false;\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var instance = workInProgress.stateNode;\n      var shouldUpdate;\n      if (instance === null) {\n        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\n\n        constructClassInstance(workInProgress, Component, nextProps);\n        mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n        shouldUpdate = true;\n      } else if (current === null) {\n        // In a resume, we'll already have an instance we can reuse.\n        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      } else {\n        shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n      }\n      var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n      {\n        var inst = workInProgress.stateNode;\n        if (shouldUpdate && inst.props !== nextProps) {\n          if (!didWarnAboutReassigningProps) {\n            error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n          }\n          didWarnAboutReassigningProps = true;\n        }\n      }\n      return nextUnitOfWork;\n    }\n    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n      // Refs should update even if shouldComponentUpdate returns false\n      markRef(current, workInProgress);\n      var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n      if (!shouldUpdate && !didCaptureError) {\n        // Context providers should defer to sCU for rendering\n        if (hasContext) {\n          invalidateContextProvider(workInProgress, Component, false);\n        }\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      var instance = workInProgress.stateNode; // Rerender\n\n      ReactCurrentOwner$1.current = workInProgress;\n      var nextChildren;\n      if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n        // If we captured an error, but getDerivedStateFromError is not defined,\n        // unmount all the children. componentDidCatch will schedule an update to\n        // re-render a fallback. This is temporary until we migrate everyone to\n        // the new API.\n        // TODO: Warn in a future release.\n        nextChildren = null;\n        {\n          stopProfilerTimerIfRunning();\n        }\n      } else {\n        {\n          markComponentRenderStarted(workInProgress);\n        }\n        {\n          setIsRendering(true);\n          nextChildren = instance.render();\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              instance.render();\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          setIsRendering(false);\n        }\n        {\n          markComponentRenderStopped();\n        }\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n      if (current !== null && didCaptureError) {\n        // If we're recovering from an error, reconcile without reusing any of\n        // the existing children. Conceptually, the normal children and the children\n        // that are shown on error are two different sets, so we shouldn't reuse\n        // normal children even if their identities match.\n        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      } // Memoize state using the values we just used to render.\n      // TODO: Restructure so we never read values from the instance.\n\n      workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n      if (hasContext) {\n        invalidateContextProvider(workInProgress, Component, true);\n      }\n      return workInProgress.child;\n    }\n    function pushHostRootContext(workInProgress) {\n      var root = workInProgress.stateNode;\n      if (root.pendingContext) {\n        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n      } else if (root.context) {\n        // Should always be set\n        pushTopLevelContextObject(workInProgress, root.context, false);\n      }\n      pushHostContainer(workInProgress, root.containerInfo);\n    }\n    function updateHostRoot(current, workInProgress, renderLanes) {\n      pushHostRootContext(workInProgress);\n      if (current === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n      var nextProps = workInProgress.pendingProps;\n      var prevState = workInProgress.memoizedState;\n      var prevChildren = prevState.element;\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n      var nextState = workInProgress.memoizedState;\n      var root = workInProgress.stateNode;\n      // being called \"element\".\n\n      var nextChildren = nextState.element;\n      if (supportsHydration && prevState.isDehydrated) {\n        // This is a hydration root whose shell has not yet hydrated. We should\n        // attempt to hydrate.\n        // Flip isDehydrated to false to indicate that when this render\n        // finishes, the root will no longer be dehydrated.\n        var overrideState = {\n          element: nextChildren,\n          isDehydrated: false,\n          cache: nextState.cache,\n          pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\n          transitions: nextState.transitions\n        };\n        var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n        // have reducer functions so it doesn't need rebasing.\n\n        updateQueue.baseState = overrideState;\n        workInProgress.memoizedState = overrideState;\n        if (workInProgress.flags & ForceClientRender) {\n          // Something errored during a previous attempt to hydrate the shell, so we\n          // forced a client render.\n          var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);\n          return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n        } else if (nextChildren !== prevChildren) {\n          var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);\n          return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\n        } else {\n          // The outermost shell has not hydrated yet. Start hydrating.\n          enterHydrationState(workInProgress);\n          var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n          workInProgress.child = child;\n          var node = child;\n          while (node) {\n            // Mark each child as hydrating. This is a fast path to know whether this\n            // tree is part of a hydrating tree. This is used to determine if a child\n            // node has fully mounted yet, and for scheduling event replaying.\n            // Conceptually this is similar to Placement in that a new subtree is\n            // inserted into the React tree here. It just happens to not need DOM\n            // mutations because it already exists.\n            node.flags = node.flags & ~Placement | Hydrating;\n            node = node.sibling;\n          }\n        }\n      } else {\n        // Root is not dehydrated. Either this is a client-only root, or it\n        // already hydrated.\n        resetHydrationState();\n        if (nextChildren === prevChildren) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n      return workInProgress.child;\n    }\n    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n      // Revert to client rendering.\n      resetHydrationState();\n      queueHydrationError(recoverableError);\n      workInProgress.flags |= ForceClientRender;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateHostComponent(current, workInProgress, renderLanes) {\n      pushHostContext(workInProgress);\n      if (current === null) {\n        tryToClaimNextHydratableInstance(workInProgress);\n      }\n      var type = workInProgress.type;\n      var nextProps = workInProgress.pendingProps;\n      var prevProps = current !== null ? current.memoizedProps : null;\n      var nextChildren = nextProps.children;\n      var isDirectTextChild = shouldSetTextContent(type, nextProps);\n      if (isDirectTextChild) {\n        // We special case a direct text child of a host node. This is a common\n        // case. We won't handle it as a reified child. We will instead handle\n        // this in the host environment that also has access to this prop. That\n        // avoids allocating another HostText fiber and traversing it.\n        nextChildren = null;\n      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n        // If we're switching from a direct text child to a normal child, or to\n        // empty, we need to schedule the text content to be reset.\n        workInProgress.flags |= ContentReset;\n      }\n      markRef(current, workInProgress);\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateHostText(current, workInProgress) {\n      if (current === null) {\n        tryToClaimNextHydratableInstance(workInProgress);\n      } // Nothing to do here. This is terminal. We'll do the completion step\n      // immediately after.\n\n      return null;\n    }\n    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      var props = workInProgress.pendingProps;\n      var lazyComponent = elementType;\n      var payload = lazyComponent._payload;\n      var init = lazyComponent._init;\n      var Component = init(payload); // Store the unwrapped component in the type.\n\n      workInProgress.type = Component;\n      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n      var resolvedProps = resolveDefaultProps(Component, props);\n      var child;\n      switch (resolvedTag) {\n        case FunctionComponent:\n          {\n            {\n              validateFunctionComponentInDev(workInProgress, Component);\n              workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n            }\n            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n        case ClassComponent:\n          {\n            {\n              workInProgress.type = Component = resolveClassForHotReloading(Component);\n            }\n            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n        case ForwardRef:\n          {\n            {\n              workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n            }\n            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n        case MemoComponent:\n          {\n            {\n              if (workInProgress.type !== workInProgress.elementType) {\n                var outerPropTypes = Component.propTypes;\n                if (outerPropTypes) {\n                  checkPropTypes(outerPropTypes, resolvedProps,\n                  // Resolved for outer only\n                  'prop', getComponentNameFromType(Component));\n                }\n              }\n            }\n            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps),\n            // The inner type can have defaults too\n            renderLanes);\n            return child;\n          }\n      }\n      var hint = '';\n      {\n        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n          hint = ' Did you wrap a component in React.lazy() more than once?';\n        }\n      } // This message intentionally doesn't mention ForwardRef or MemoComponent\n      // because the fact that it's a separate type of work is an\n      // implementation detail.\n\n      throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n    }\n    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\n\n      workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n      // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n\n      var hasContext;\n      if (isContextProvider(Component)) {\n        hasContext = true;\n        pushContextProvider(workInProgress);\n      } else {\n        hasContext = false;\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      constructClassInstance(workInProgress, Component, nextProps);\n      mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n    }\n    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      var props = workInProgress.pendingProps;\n      var context;\n      {\n        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n        context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var value;\n      var hasId;\n      {\n        markComponentRenderStarted(workInProgress);\n      }\n      {\n        if (Component.prototype && typeof Component.prototype.render === 'function') {\n          var componentName = getComponentNameFromType(Component) || 'Unknown';\n          if (!didWarnAboutBadClass[componentName]) {\n            error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n            didWarnAboutBadClass[componentName] = true;\n          }\n        }\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n        }\n        setIsRendering(true);\n        ReactCurrentOwner$1.current = workInProgress;\n        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n        hasId = checkDidRenderIdHook();\n        setIsRendering(false);\n      }\n      {\n        markComponentRenderStopped();\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n      {\n        // Support for module components is deprecated and is removed behind a flag.\n        // Whether or not it would crash later, we want to show a good message in DEV first.\n        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n          var _componentName = getComponentNameFromType(Component) || 'Unknown';\n          if (!didWarnAboutModulePatternComponent[_componentName]) {\n            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n            didWarnAboutModulePatternComponent[_componentName] = true;\n          }\n        }\n      }\n      if (\n      // Run these checks in production only if the flag is off.\n      // Eventually we'll delete this branch altogether.\n      typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n        {\n          var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n          if (!didWarnAboutModulePatternComponent[_componentName2]) {\n            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n            didWarnAboutModulePatternComponent[_componentName2] = true;\n          }\n        } // Proceed under the assumption that this is a class instance\n\n        workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n        // During mounting we don't know the child context yet as the instance doesn't exist.\n        // We will invalidate the child context in finishClassComponent() right after rendering.\n\n        var hasContext = false;\n        if (isContextProvider(Component)) {\n          hasContext = true;\n          pushContextProvider(workInProgress);\n        } else {\n          hasContext = false;\n        }\n        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n        initializeUpdateQueue(workInProgress);\n        adoptClassInstance(workInProgress, value);\n        mountClassInstance(workInProgress, Component, props, renderLanes);\n        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n      } else {\n        // Proceed under the assumption that this is a function component\n        workInProgress.tag = FunctionComponent;\n        {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n              hasId = checkDidRenderIdHook();\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n        }\n        if (getIsHydrating() && hasId) {\n          pushMaterializedTreeId(workInProgress);\n        }\n        reconcileChildren(null, workInProgress, value, renderLanes);\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n        }\n        return workInProgress.child;\n      }\n    }\n    function validateFunctionComponentInDev(workInProgress, Component) {\n      {\n        if (Component) {\n          if (Component.childContextTypes) {\n            error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n          }\n        }\n        if (workInProgress.ref !== null) {\n          var info = '';\n          var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n          var warningKey = ownerName || '';\n          var debugSource = workInProgress._debugSource;\n          if (debugSource) {\n            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n          }\n          if (!didWarnAboutFunctionRefs[warningKey]) {\n            didWarnAboutFunctionRefs[warningKey] = true;\n            error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n          }\n        }\n        if (typeof Component.getDerivedStateFromProps === 'function') {\n          var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n            error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n          }\n        }\n        if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n          var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n            error('%s: Function components do not support contextType.', _componentName4);\n            didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n          }\n        }\n      }\n    }\n    var SUSPENDED_MARKER = {\n      dehydrated: null,\n      treeContext: null,\n      retryLane: NoLane\n    };\n    function mountSuspenseOffscreenState(renderLanes) {\n      return {\n        baseLanes: renderLanes,\n        cachePool: getSuspendedCache(),\n        transitions: null\n      };\n    }\n    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n      var cachePool = null;\n      return {\n        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n        cachePool: cachePool,\n        transitions: prevOffscreenState.transitions\n      };\n    } // TODO: Probably should inline this back\n\n    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n      // If we're already showing a fallback, there are cases where we need to\n      // remain on that fallback regardless of whether the content has resolved.\n      // For example, SuspenseList coordinates when nested content appears.\n      if (current !== null) {\n        var suspenseState = current.memoizedState;\n        if (suspenseState === null) {\n          // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n          // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n          // Note: This is a factoring smell. Can't remain on a fallback if there's\n          // no fallback to remain on.\n          return false;\n        }\n      } // Not currently showing content. Consult the Suspense context.\n\n      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n    }\n    function getRemainingWorkInPrimaryTree(current, renderLanes) {\n      // TODO: Should not remove render lanes that were pinged during this render\n      return removeLanes(current.childLanes, renderLanes);\n    }\n    function updateSuspenseComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n      {\n        if (shouldSuspend(workInProgress)) {\n          workInProgress.flags |= DidCapture;\n        }\n      }\n      var suspenseContext = suspenseStackCursor.current;\n      var showFallback = false;\n      var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n      if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n        // Something in this boundary's subtree already suspended. Switch to\n        // rendering the fallback children.\n        showFallback = true;\n        workInProgress.flags &= ~DidCapture;\n      } else {\n        // Attempting the main content\n        if (current === null || current.memoizedState !== null) {\n          // This is a new mount or this boundary is already showing a fallback state.\n          // Mark this subtree context as having at least one invisible parent that could\n          // handle the fallback state.\n          // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n          {\n            suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n          }\n        }\n      }\n      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n      pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n      // boundary's children. This involves some custom reconciliation logic. Two\n      // main reasons this is so complicated.\n      //\n      // First, Legacy Mode has different semantics for backwards compatibility. The\n      // primary tree will commit in an inconsistent state, so when we do the\n      // second pass to render the fallback, we do some exceedingly, uh, clever\n      // hacks to make that not totally break. Like transferring effects and\n      // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n      // because we bailout on the primary tree completely and leave it in its old\n      // state, no effects. Same as what we do for Offscreen (except that\n      // Offscreen doesn't have the first render pass).\n      //\n      // Second is hydration. During hydration, the Suspense fiber has a slightly\n      // different layout, where the child points to a dehydrated fragment, which\n      // contains the DOM rendered by the server.\n      //\n      // Third, even if you set all that aside, Suspense is like error boundaries in\n      // that we first we try to render one tree, and if that fails, we render again\n      // and switch to a different tree. Like a try/catch block. So we have to track\n      // which branch we're currently rendering. Ideally we would model this using\n      // a stack.\n\n      if (current === null) {\n        // Initial mount\n        // Special path for hydration\n        // If we're currently hydrating, try to hydrate this boundary.\n        tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n\n        var suspenseState = workInProgress.memoizedState;\n        if (suspenseState !== null) {\n          var dehydrated = suspenseState.dehydrated;\n          if (dehydrated !== null) {\n            return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n          }\n        }\n        var nextPrimaryChildren = nextProps.children;\n        var nextFallbackChildren = nextProps.fallback;\n        if (showFallback) {\n          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n          var primaryChildFragment = workInProgress.child;\n          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackFragment;\n        } else {\n          return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n        }\n      } else {\n        // This is an update.\n        // Special path for hydration\n        var prevState = current.memoizedState;\n        if (prevState !== null) {\n          var _dehydrated = prevState.dehydrated;\n          if (_dehydrated !== null) {\n            return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);\n          }\n        }\n        if (showFallback) {\n          var _nextFallbackChildren = nextProps.fallback;\n          var _nextPrimaryChildren = nextProps.children;\n          var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n          var _primaryChildFragment2 = workInProgress.child;\n          var prevOffscreenState = current.child.memoizedState;\n          _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n          _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackChildFragment;\n        } else {\n          var _nextPrimaryChildren2 = nextProps.children;\n          var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);\n          workInProgress.memoizedState = null;\n          return _primaryChildFragment3;\n        }\n      }\n    }\n    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: 'visible',\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n      primaryChildFragment.return = workInProgress;\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var progressedPrimaryFragment = workInProgress.child;\n      var primaryChildProps = {\n        mode: 'hidden',\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n      var fallbackChildFragment;\n      if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n        // In legacy mode, we commit the primary tree as if it successfully\n        // completed, even though it's in an inconsistent state.\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n        if (workInProgress.mode & ProfileMode) {\n          // Reset the durations from the first pass so they aren't included in the\n          // final amounts. This seems counterintuitive, since we're intentionally\n          // not measuring part of the render phase, but this makes it match what we\n          // do in Concurrent Mode.\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = 0;\n          primaryChildFragment.treeBaseDuration = 0;\n        }\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n      } else {\n        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n      }\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n      // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n      // this wrapper function to constrain it.\n      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n    }\n    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n      // The props argument to `createWorkInProgress` is `any` typed, so we use this\n      // wrapper function to constrain it.\n      return createWorkInProgress(current, offscreenProps);\n    }\n    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n        mode: 'visible',\n        children: primaryChildren\n      });\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        primaryChildFragment.lanes = renderLanes;\n      }\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = null;\n      if (currentFallbackChildFragment !== null) {\n        // Delete the fallback child fragment\n        var deletions = workInProgress.deletions;\n        if (deletions === null) {\n          workInProgress.deletions = [currentFallbackChildFragment];\n          workInProgress.flags |= ChildDeletion;\n        } else {\n          deletions.push(currentFallbackChildFragment);\n        }\n      }\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildProps = {\n        mode: 'hidden',\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n      if (\n      // In legacy mode, we commit the primary tree as if it successfully\n      // completed, even though it's in an inconsistent state.\n      (mode & ConcurrentMode) === NoMode &&\n      // Make sure we're on the second pass, i.e. the primary child fragment was\n      // already cloned. In legacy mode, the only case where this isn't true is\n      // when DevTools forces us to display a fallback; we skip the first render\n      // pass entirely and go straight to rendering the fallback. (In Concurrent\n      // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n      // only codepath.)\n      workInProgress.child !== currentPrimaryChildFragment) {\n        var progressedPrimaryFragment = workInProgress.child;\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n        if (workInProgress.mode & ProfileMode) {\n          // Reset the durations from the first pass so they aren't included in the\n          // final amounts. This seems counterintuitive, since we're intentionally\n          // not measuring part of the render phase, but this makes it match what we\n          // do in Concurrent Mode.\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n        } // The fallback fiber was added as a deletion during the first pass.\n        // However, since we're going to remain on the fallback, we no longer want\n        // to delete it.\n\n        workInProgress.deletions = null;\n      } else {\n        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.\n        // (We don't do this in legacy mode, because in legacy mode we don't re-use\n        // the current tree; see previous branch.)\n\n        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n      }\n      var fallbackChildFragment;\n      if (currentFallbackChildFragment !== null) {\n        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n      } else {\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n        // mounted but this is a new fiber.\n\n        fallbackChildFragment.flags |= Placement;\n      }\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n      // Falling back to client rendering. Because this has performance\n      // implications, it's considered a recoverable error, even though the user\n      // likely won't observe anything wrong with the UI.\n      //\n      // The error is passed in as an argument to enforce that every caller provide\n      // a custom message, or explicitly opt out (currently the only path that opts\n      // out is legacy mode; every concurrent path provides an error).\n      if (recoverableError !== null) {\n        queueHydrationError(recoverableError);\n      } // This will add the old fiber to the deletion list\n\n      reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n      var nextProps = workInProgress.pendingProps;\n      var primaryChildren = nextProps.children;\n      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n      // mounted but this is a new fiber.\n\n      primaryChildFragment.flags |= Placement;\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var fiberMode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: 'visible',\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n      var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n      // boundary) already mounted but this is a new fiber.\n\n      fallbackChildFragment.flags |= Placement;\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n        // We will have dropped the effect list which contains the\n        // deletion. We need to reconcile to delete the current child.\n        reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      }\n      return fallbackChildFragment;\n    }\n    function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n      // During the first pass, we'll bail out and not drill into the children.\n      // Instead, we'll leave the content in place and try to hydrate it later.\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        {\n          error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');\n        }\n        workInProgress.lanes = laneToLanes(SyncLane);\n      } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n        // This is a client-only boundary. Since we won't get any content from the server\n        // for this, we need to schedule that at a higher priority based on when it would\n        // have timed out. In theory we could render it in this pass but it would have the\n        // wrong priority associated with it and will prevent hydration of parent path.\n        // Instead, we'll leave work left on it to render it in a separate commit.\n        // TODO This time should be the time at which the server rendered response that is\n        // a parent to this boundary was displayed. However, since we currently don't have\n        // a protocol to transfer that time, we'll just estimate it by using the current\n        // time. This will mean that Suspense timeouts are slightly shifted to later than\n        // they should be.\n        // Schedule a normal pri update to render this content.\n        workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n      } else {\n        // We'll continue hydrating the rest at offscreen priority since we'll already\n        // be showing the right content coming from the server, it is no rush.\n        workInProgress.lanes = laneToLanes(OffscreenLane);\n      }\n      return null;\n    }\n    function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {\n      if (!didSuspend) {\n        // This is the first render pass. Attempt to hydrate.\n        // We should never be hydrating at this point because it is the first pass,\n        // but after we've already committed once.\n        warnIfHydrating();\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes,\n          // TODO: When we delete legacy mode, we should make this error argument\n          // required — every concurrent mode path that causes hydration to\n          // de-opt to client rendering should have an error message.\n          null);\n        }\n        if (isSuspenseInstanceFallback(suspenseInstance)) {\n          // This boundary is in a permanent fallback state. In this case, we'll never\n          // get an update and we'll never be able to hydrate the final content. Let's just try the\n          // client side render instead.\n          var digest, message, stack;\n          {\n            var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);\n            digest = _getSuspenseInstanceF.digest;\n            message = _getSuspenseInstanceF.message;\n            stack = _getSuspenseInstanceF.stack;\n          }\n          var error;\n          if (message) {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            error = new Error(message);\n          } else {\n            error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');\n          }\n          var capturedValue = createCapturedValue(error, digest, stack);\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n        }\n        // any context has changed, we need to treat is as if the input might have changed.\n\n        var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n        if (didReceiveUpdate || hasContextChanged) {\n          // This boundary has changed since the first render. This means that we are now unable to\n          // hydrate it. We might still be able to hydrate it using a higher priority lane.\n          var root = getWorkInProgressRoot();\n          if (root !== null) {\n            var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n            if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n              // Intentionally mutating since this render will get interrupted. This\n              // is one of the very rare times where we mutate the current tree\n              // during the render phase.\n              suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\n\n              var eventTime = NoTimestamp;\n              enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n              scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);\n            }\n          } // If we have scheduled higher pri work above, this will probably just abort the render\n          // since we now have higher priority work, but in case it doesn't, we need to prepare to\n          // render something, if we time out. Even if that requires us to delete everything and\n          // skip hydration.\n          // Delay having to do this as long as the suspense timeout allows us.\n\n          renderDidSuspendDelayIfPossible();\n          var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);\n        } else if (isSuspenseInstancePending(suspenseInstance)) {\n          // This component is still pending more data from the server, so we can't hydrate its\n          // content. We treat it as if this component suspended itself. It might seem as if\n          // we could just try to render it client-side instead. However, this will perform a\n          // lot of unnecessary work and is unlikely to complete since it often will suspend\n          // on missing data anyway. Additionally, the server might be able to render more\n          // than we can on the client yet. In that case we'd end up with more fallback states\n          // on the client than if we just leave it alone. If the server times out or errors\n          // these should update this boundary to the permanent Fallback state instead.\n          // Mark it as having captured (i.e. suspended).\n          workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n          workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n          var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n          registerSuspenseInstanceRetry(suspenseInstance, retry);\n          return null;\n        } else {\n          // This is the first attempt.\n          reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n          var primaryChildren = nextProps.children;\n          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n          // tree is part of a hydrating tree. This is used to determine if a child\n          // node has fully mounted yet, and for scheduling event replaying.\n          // Conceptually this is similar to Placement in that a new subtree is\n          // inserted into the React tree here. It just happens to not need DOM\n          // mutations because it already exists.\n\n          primaryChildFragment.flags |= Hydrating;\n          return primaryChildFragment;\n        }\n      } else {\n        // This is the second render pass. We already attempted to hydrated, but\n        // something either suspended or errored.\n        if (workInProgress.flags & ForceClientRender) {\n          // Something errored during hydration. Try again without hydrating.\n          workInProgress.flags &= ~ForceClientRender;\n          var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);\n        } else if (workInProgress.memoizedState !== null) {\n          // Something suspended and we should still be in dehydrated mode.\n          // Leave the existing child in place.\n          workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n          // but the normal suspense pass doesn't.\n\n          workInProgress.flags |= DidCapture;\n          return null;\n        } else {\n          // Suspended but we should no longer be in dehydrated mode.\n          // Therefore we now have to render the fallback.\n          var nextPrimaryChildren = nextProps.children;\n          var nextFallbackChildren = nextProps.fallback;\n          var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n          var _primaryChildFragment4 = workInProgress.child;\n          _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackChildFragment;\n        }\n      }\n    }\n    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n      fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n    }\n    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n      // Mark any Suspense boundaries with fallbacks as having work to do.\n      // If they were previously forced into fallbacks, they may now be able\n      // to unblock.\n      var node = firstChild;\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n          if (state !== null) {\n            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n          }\n        } else if (node.tag === SuspenseListComponent) {\n          // If the tail is hidden there might not be an Suspense boundaries\n          // to schedule work on. In this case we have to schedule it on the\n          // list itself.\n          // We don't have to traverse to the children of the list since\n          // the list will propagate the change when it rerenders.\n          scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n        if (node === workInProgress) {\n          return;\n        }\n        while (node.sibling === null) {\n          if (node.return === null || node.return === workInProgress) {\n            return;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n    function findLastContentRow(firstChild) {\n      // This is going to find the last row among these children that is already\n      // showing content on the screen, as opposed to being in fallback state or\n      // new. If a row has multiple Suspense boundaries, any of them being in the\n      // fallback state, counts as the whole row being in a fallback state.\n      // Note that the \"rows\" will be workInProgress, but any nested children\n      // will still be current since we haven't rendered them yet. The mounted\n      // order may not be the same as the new order. We use the new order.\n      var row = firstChild;\n      var lastContentRow = null;\n      while (row !== null) {\n        var currentRow = row.alternate; // New rows can't be content rows.\n\n        if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n          lastContentRow = row;\n        }\n        row = row.sibling;\n      }\n      return lastContentRow;\n    }\n    function validateRevealOrder(revealOrder) {\n      {\n        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n          didWarnAboutRevealOrder[revealOrder] = true;\n          if (typeof revealOrder === 'string') {\n            switch (revealOrder.toLowerCase()) {\n              case 'together':\n              case 'forwards':\n              case 'backwards':\n                {\n                  error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n                  break;\n                }\n              case 'forward':\n              case 'backward':\n                {\n                  error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n                  break;\n                }\n              default:\n                error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n                break;\n            }\n          } else {\n            error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n          }\n        }\n      }\n    }\n    function validateTailOptions(tailMode, revealOrder) {\n      {\n        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n          if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n            didWarnAboutTailOptions[tailMode] = true;\n            error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n          } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n            didWarnAboutTailOptions[tailMode] = true;\n            error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n          }\n        }\n      }\n    }\n    function validateSuspenseListNestedChild(childSlot, index) {\n      {\n        var isAnArray = isArray(childSlot);\n        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n        if (isAnArray || isIterable) {\n          var type = isAnArray ? 'array' : 'iterable';\n          error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n          return false;\n        }\n      }\n      return true;\n    }\n    function validateSuspenseListChildren(children, revealOrder) {\n      {\n        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              if (!validateSuspenseListNestedChild(children[i], i)) {\n                return;\n              }\n            }\n          } else {\n            var iteratorFn = getIteratorFn(children);\n            if (typeof iteratorFn === 'function') {\n              var childrenIterator = iteratorFn.call(children);\n              if (childrenIterator) {\n                var step = childrenIterator.next();\n                var _i = 0;\n                for (; !step.done; step = childrenIterator.next()) {\n                  if (!validateSuspenseListNestedChild(step.value, _i)) {\n                    return;\n                  }\n                  _i++;\n                }\n              }\n            } else {\n              error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n            }\n          }\n        }\n      }\n    }\n    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n      var renderState = workInProgress.memoizedState;\n      if (renderState === null) {\n        workInProgress.memoizedState = {\n          isBackwards: isBackwards,\n          rendering: null,\n          renderingStartTime: 0,\n          last: lastContentRow,\n          tail: tail,\n          tailMode: tailMode\n        };\n      } else {\n        // We can reuse the existing object from previous renders.\n        renderState.isBackwards = isBackwards;\n        renderState.rendering = null;\n        renderState.renderingStartTime = 0;\n        renderState.last = lastContentRow;\n        renderState.tail = tail;\n        renderState.tailMode = tailMode;\n      }\n    } // This can end up rendering this component multiple passes.\n    // The first pass splits the children fibers into two sets. A head and tail.\n    // We first render the head. If anything is in fallback state, we do another\n    // pass through beginWork to rerender all children (including the tail) with\n    // the force suspend context. If the first render didn't have anything in\n    // in fallback state. Then we render each row in the tail one-by-one.\n    // That happens in the completeWork phase without going back to beginWork.\n\n    function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var revealOrder = nextProps.revealOrder;\n      var tailMode = nextProps.tail;\n      var newChildren = nextProps.children;\n      validateRevealOrder(revealOrder);\n      validateTailOptions(tailMode, revealOrder);\n      validateSuspenseListChildren(newChildren, revealOrder);\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      var suspenseContext = suspenseStackCursor.current;\n      var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n      if (shouldForceFallback) {\n        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n        workInProgress.flags |= DidCapture;\n      } else {\n        var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n        if (didSuspendBefore) {\n          // If we previously forced a fallback, we need to schedule work\n          // on any nested boundaries to let them know to try to render\n          // again. This is the same as context updating.\n          propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n        }\n        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n      }\n      pushSuspenseContext(workInProgress, suspenseContext);\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        // In legacy mode, SuspenseList doesn't work so we just\n        // use make it a noop by treating it as the default revealOrder.\n        workInProgress.memoizedState = null;\n      } else {\n        switch (revealOrder) {\n          case 'forwards':\n            {\n              var lastContentRow = findLastContentRow(workInProgress.child);\n              var tail;\n              if (lastContentRow === null) {\n                // The whole list is part of the tail.\n                // TODO: We could fast path by just rendering the tail now.\n                tail = workInProgress.child;\n                workInProgress.child = null;\n              } else {\n                // Disconnect the tail rows after the content row.\n                // We're going to render them separately later.\n                tail = lastContentRow.sibling;\n                lastContentRow.sibling = null;\n              }\n              initSuspenseListRenderState(workInProgress, false,\n              // isBackwards\n              tail, lastContentRow, tailMode);\n              break;\n            }\n          case 'backwards':\n            {\n              // We're going to find the first row that has existing content.\n              // At the same time we're going to reverse the list of everything\n              // we pass in the meantime. That's going to be our tail in reverse\n              // order.\n              var _tail = null;\n              var row = workInProgress.child;\n              workInProgress.child = null;\n              while (row !== null) {\n                var currentRow = row.alternate; // New rows can't be content rows.\n\n                if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n                  // This is the beginning of the main content.\n                  workInProgress.child = row;\n                  break;\n                }\n                var nextRow = row.sibling;\n                row.sibling = _tail;\n                _tail = row;\n                row = nextRow;\n              } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n              initSuspenseListRenderState(workInProgress, true,\n              // isBackwards\n              _tail, null,\n              // last\n              tailMode);\n              break;\n            }\n          case 'together':\n            {\n              initSuspenseListRenderState(workInProgress, false,\n              // isBackwards\n              null,\n              // tail\n              null,\n              // last\n              undefined);\n              break;\n            }\n          default:\n            {\n              // The default reveal order is the same as not having\n              // a boundary.\n              workInProgress.memoizedState = null;\n            }\n        }\n      }\n      return workInProgress.child;\n    }\n    function updatePortalComponent(current, workInProgress, renderLanes) {\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      var nextChildren = workInProgress.pendingProps;\n      if (current === null) {\n        // Portals are special because we don't append the children during mount\n        // but at commit. Therefore we need to track insertions which the normal\n        // flow doesn't do during mount. This doesn't happen at the root because\n        // the root always starts with a \"current\" with a null child.\n        // TODO: Consider unifying this with how the root works.\n        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n      return workInProgress.child;\n    }\n    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n    function updateContextProvider(current, workInProgress, renderLanes) {\n      var providerType = workInProgress.type;\n      var context = providerType._context;\n      var newProps = workInProgress.pendingProps;\n      var oldProps = workInProgress.memoizedProps;\n      var newValue = newProps.value;\n      {\n        if (!('value' in newProps)) {\n          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n            hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n            error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n          }\n        }\n        var providerPropTypes = workInProgress.type.propTypes;\n        if (providerPropTypes) {\n          checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n        }\n      }\n      pushProvider(workInProgress, context, newValue);\n      {\n        if (oldProps !== null) {\n          var oldValue = oldProps.value;\n          if (objectIs(oldValue, newValue)) {\n            // No change. Bailout early if children are the same.\n            if (oldProps.children === newProps.children && !hasContextChanged()) {\n              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n          } else {\n            // The context value changed. Search for matching consumers and schedule\n            // them to update.\n            propagateContextChange(workInProgress, context, renderLanes);\n          }\n        }\n      }\n      var newChildren = newProps.children;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n    var hasWarnedAboutUsingContextAsConsumer = false;\n    function updateContextConsumer(current, workInProgress, renderLanes) {\n      var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n      // DEV mode, we create a separate object for Context.Consumer that acts\n      // like a proxy to Context. This proxy object adds unnecessary code in PROD\n      // so we use the old behaviour (Context.Consumer references Context) to\n      // reduce size and overhead. The separate object references context via\n      // a property called \"_context\", which also gives us the ability to check\n      // in DEV mode if this property exists or not and warn if it does not.\n\n      {\n        if (context._context === undefined) {\n          // This may be because it's a Context (rather than a Consumer).\n          // Or it may be because it's older React where they're the same thing.\n          // We only want to warn if we're sure it's a new React.\n          if (context !== context.Consumer) {\n            if (!hasWarnedAboutUsingContextAsConsumer) {\n              hasWarnedAboutUsingContextAsConsumer = true;\n              error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n            }\n          }\n        } else {\n          context = context._context;\n        }\n      }\n      var newProps = workInProgress.pendingProps;\n      var render = newProps.children;\n      {\n        if (typeof render !== 'function') {\n          error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n        }\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var newValue = readContext(context);\n      {\n        markComponentRenderStarted(workInProgress);\n      }\n      var newChildren;\n      {\n        ReactCurrentOwner$1.current = workInProgress;\n        setIsRendering(true);\n        newChildren = render(newValue);\n        setIsRendering(false);\n      }\n      {\n        markComponentRenderStopped();\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function markWorkInProgressReceivedUpdate() {\n      didReceiveUpdate = true;\n    }\n    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        if (current !== null) {\n          // A lazy component only mounts if it suspended inside a non-\n          // concurrent tree, in an inconsistent state. We want to treat it like\n          // a new mount, even though an empty version of it already committed.\n          // Disconnect the alternate pointers.\n          current.alternate = null;\n          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n          workInProgress.flags |= Placement;\n        }\n      }\n    }\n    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n      if (current !== null) {\n        // Reuse previous dependencies\n        workInProgress.dependencies = current.dependencies;\n      }\n      {\n        // Don't update \"base\" render times for bailouts.\n        stopProfilerTimerIfRunning();\n      }\n      markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        // The children don't have any work either. We can skip them.\n        // TODO: Once we add back resuming, we should check if the children are\n        // a work-in-progress set. If so, we need to transfer their effects.\n        {\n          return null;\n        }\n      } // This fiber doesn't have work, but its subtree does. Clone the child\n      // fibers and continue.\n\n      cloneChildFibers(current, workInProgress);\n      return workInProgress.child;\n    }\n    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n      {\n        var returnFiber = oldWorkInProgress.return;\n        if (returnFiber === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Cannot swap the root fiber.');\n        } // Disconnect from the old current.\n        // It will get deleted.\n\n        current.alternate = null;\n        oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n        newWorkInProgress.index = oldWorkInProgress.index;\n        newWorkInProgress.sibling = oldWorkInProgress.sibling;\n        newWorkInProgress.return = oldWorkInProgress.return;\n        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n        if (oldWorkInProgress === returnFiber.child) {\n          returnFiber.child = newWorkInProgress;\n        } else {\n          var prevSibling = returnFiber.child;\n          if (prevSibling === null) {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            throw new Error('Expected parent to have a child.');\n          }\n          while (prevSibling.sibling !== oldWorkInProgress) {\n            prevSibling = prevSibling.sibling;\n            if (prevSibling === null) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              throw new Error('Expected to find the previous sibling.');\n            }\n          }\n          prevSibling.sibling = newWorkInProgress;\n        } // Delete the old fiber and place the new one.\n        // Since the old fiber is disconnected, we have to schedule it manually.\n\n        var deletions = returnFiber.deletions;\n        if (deletions === null) {\n          returnFiber.deletions = [current];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(current);\n        }\n        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n        return newWorkInProgress;\n      }\n    }\n    function checkScheduledUpdateOrContext(current, renderLanes) {\n      // Before performing an early bailout, we must check if there are pending\n      // updates or context.\n      var updateLanes = current.lanes;\n      if (includesSomeLane(updateLanes, renderLanes)) {\n        return true;\n      } // No pending update, but because context is propagated lazily, we need\n\n      return false;\n    }\n    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n      // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          var root = workInProgress.stateNode;\n          resetHydrationState();\n          break;\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n            if (isContextProvider(Component)) {\n              pushContextProvider(workInProgress);\n            }\n            break;\n          }\n        case HostPortal:\n          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n          break;\n        case ContextProvider:\n          {\n            var newValue = workInProgress.memoizedProps.value;\n            var context = workInProgress.type._context;\n            pushProvider(workInProgress, context, newValue);\n            break;\n          }\n        case Profiler:\n          {\n            // Profiler should only call onRender when one of its descendants actually rendered.\n            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n            {\n              // Reset effect durations for the next eventual effect phase.\n              // These are reset during render to allow the DevTools commit hook a chance to read them,\n              var stateNode = workInProgress.stateNode;\n              stateNode.effectDuration = 0;\n              stateNode.passiveEffectDuration = 0;\n            }\n          }\n          break;\n        case SuspenseComponent:\n          {\n            var state = workInProgress.memoizedState;\n            if (state !== null) {\n              if (state.dehydrated !== null) {\n                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\n                // been unsuspended it has committed as a resolved Suspense component.\n                // If it needs to be retried, it should have work scheduled on it.\n\n                workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n                // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n                return null;\n              } // If this boundary is currently timed out, we need to decide\n              // whether to retry the primary children, or to skip over it and\n              // go straight to the fallback. Check the priority of the primary\n              // child fragment.\n\n              var primaryChildFragment = workInProgress.child;\n              var primaryChildLanes = primaryChildFragment.childLanes;\n              if (includesSomeLane(renderLanes, primaryChildLanes)) {\n                // The primary children have pending work. Use the normal path\n                // to attempt to render the primary children again.\n                return updateSuspenseComponent(current, workInProgress, renderLanes);\n              } else {\n                // The primary child fragment does not have pending work marked\n                // on it\n                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n                // priority. Bailout.\n\n                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                if (child !== null) {\n                  // The fallback children have pending work. Skip over the\n                  // primary children and work on the fallback.\n                  return child.sibling;\n                } else {\n                  // Note: We can return `null` here because we already checked\n                  // whether there were nested context consumers, via the call to\n                  // `bailoutOnAlreadyFinishedWork` above.\n                  return null;\n                }\n              }\n            } else {\n              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n            }\n            break;\n          }\n        case SuspenseListComponent:\n          {\n            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n            if (didSuspendBefore) {\n              if (_hasChildWork) {\n                // If something was in fallback state last time, and we have all the\n                // same children then we're still in progressive loading state.\n                // Something might get unblocked by state updates or retries in the\n                // tree which will affect the tail. So we need to use the normal\n                // path to compute the correct tail.\n                return updateSuspenseListComponent(current, workInProgress, renderLanes);\n              } // If none of the children had any work, that means that none of\n              // them got retried so they'll still be blocked in the same way\n              // as before. We can fast bail out.\n\n              workInProgress.flags |= DidCapture;\n            } // If nothing suspended before and we're rendering the same children,\n            // then the tail doesn't matter. Anything new that suspends will work\n            // in the \"together\" mode, so we can continue from the state we had.\n\n            var renderState = workInProgress.memoizedState;\n            if (renderState !== null) {\n              // Reset to the \"together\" mode in case we've started a different\n              // update in the past but didn't complete it.\n              renderState.rendering = null;\n              renderState.tail = null;\n              renderState.lastEffect = null;\n            }\n            pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n            if (_hasChildWork) {\n              break;\n            } else {\n              // If none of the children had any work, that means that none of\n              // them got retried so they'll still be blocked in the same way\n              // as before. We can fast bail out.\n              return null;\n            }\n          }\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            // Need to check if the tree still needs to be deferred. This is\n            // almost identical to the logic used in the normal update path,\n            // so we'll just enter that. The only difference is we'll bail out\n            // at the next level instead of this one, because the child props\n            // have not changed. Which is fine.\n            // TODO: Probably should refactor `beginWork` to split the bailout\n            // path from the normal path. I'm tempted to do a labeled break here\n            // but I won't :)\n            workInProgress.lanes = NoLanes;\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n    function beginWork(current, workInProgress, renderLanes) {\n      {\n        if (workInProgress._debugNeedsRemount && current !== null) {\n          // This will restart the begin phase with a new fiber.\n          return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n        }\n      }\n      if (current !== null) {\n        var oldProps = current.memoizedProps;\n        var newProps = workInProgress.pendingProps;\n        if (oldProps !== newProps || hasContextChanged() ||\n        // Force a re-render if the implementation changed due to hot reload:\n        workInProgress.type !== current.type) {\n          // If props or context changed, mark the fiber as having performed work.\n          // This may be unset if the props are determined to be equal later (memo).\n          didReceiveUpdate = true;\n        } else {\n          // Neither props nor legacy context changes. Check if there's a pending\n          // update or context change.\n          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n          if (!hasScheduledUpdateOrContext &&\n          // If this is the second pass of an error or suspense boundary, there\n          // may not be work scheduled on `current`, so we check for this flag.\n          (workInProgress.flags & DidCapture) === NoFlags) {\n            // No pending updates or context. Bail out now.\n            didReceiveUpdate = false;\n            return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n          }\n          if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n            // This is a special case that only exists for legacy mode.\n            // See https://github.com/facebook/react/pull/19216.\n            didReceiveUpdate = true;\n          } else {\n            // An update was scheduled on this fiber, but there are no new props\n            // nor legacy context. Set this to false. If an update queue or context\n            // consumer produces a changed value, it will set this to true. Otherwise,\n            // the component will assume the children have not changed and bail out.\n            didReceiveUpdate = false;\n          }\n        }\n      } else {\n        didReceiveUpdate = false;\n        if (getIsHydrating() && isForkedChild(workInProgress)) {\n          // Check if this child belongs to a list of muliple children in\n          // its parent.\n          //\n          // In a true multi-threaded implementation, we would render children on\n          // parallel threads. This would represent the beginning of a new render\n          // thread for this subtree.\n          //\n          // We only use this for id generation during hydration, which is why the\n          // logic is located in this special branch.\n          var slotIndex = workInProgress.index;\n          var numberOfForks = getForksAtLevel();\n          pushTreeId(workInProgress, numberOfForks, slotIndex);\n        }\n      } // Before entering the begin phase, clear pending update priority.\n      // TODO: This assumes that we're about to evaluate the component and process\n      // the update queue. However, there's an exception: SimpleMemoComponent\n      // sometimes bails out later in the begin phase. This indicates that we should\n      // move this assignment out of the common path and into each branch.\n\n      workInProgress.lanes = NoLanes;\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n          {\n            return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n          }\n        case LazyComponent:\n          {\n            var elementType = workInProgress.elementType;\n            return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n          }\n        case FunctionComponent:\n          {\n            var Component = workInProgress.type;\n            var unresolvedProps = workInProgress.pendingProps;\n            var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n            return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n          }\n        case ClassComponent:\n          {\n            var _Component = workInProgress.type;\n            var _unresolvedProps = workInProgress.pendingProps;\n            var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n            return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n          }\n        case HostRoot:\n          return updateHostRoot(current, workInProgress, renderLanes);\n        case HostComponent:\n          return updateHostComponent(current, workInProgress, renderLanes);\n        case HostText:\n          return updateHostText(current, workInProgress);\n        case SuspenseComponent:\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        case HostPortal:\n          return updatePortalComponent(current, workInProgress, renderLanes);\n        case ForwardRef:\n          {\n            var type = workInProgress.type;\n            var _unresolvedProps2 = workInProgress.pendingProps;\n            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n            return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n          }\n        case Fragment:\n          return updateFragment(current, workInProgress, renderLanes);\n        case Mode:\n          return updateMode(current, workInProgress, renderLanes);\n        case Profiler:\n          return updateProfiler(current, workInProgress, renderLanes);\n        case ContextProvider:\n          return updateContextProvider(current, workInProgress, renderLanes);\n        case ContextConsumer:\n          return updateContextConsumer(current, workInProgress, renderLanes);\n        case MemoComponent:\n          {\n            var _type2 = workInProgress.type;\n            var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n            {\n              if (workInProgress.type !== workInProgress.elementType) {\n                var outerPropTypes = _type2.propTypes;\n                if (outerPropTypes) {\n                  checkPropTypes(outerPropTypes, _resolvedProps3,\n                  // Resolved for outer only\n                  'prop', getComponentNameFromType(_type2));\n                }\n              }\n            }\n            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n            return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n          }\n        case SimpleMemoComponent:\n          {\n            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n          }\n        case IncompleteClassComponent:\n          {\n            var _Component2 = workInProgress.type;\n            var _unresolvedProps4 = workInProgress.pendingProps;\n            var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n            return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n          }\n        case SuspenseListComponent:\n          {\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          }\n        case ScopeComponent:\n          {\n            break;\n          }\n        case OffscreenComponent:\n          {\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n      throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n    }\n    function markUpdate(workInProgress) {\n      // Tag the fiber with an update effect. This turns a Placement into\n      // a PlacementAndUpdate.\n      workInProgress.flags |= Update;\n    }\n    function markRef$1(workInProgress) {\n      workInProgress.flags |= Ref;\n      {\n        workInProgress.flags |= RefStatic;\n      }\n    }\n    function hadNoMutationsEffects(current, completedWork) {\n      var didBailout = current !== null && current.child === completedWork.child;\n      if (didBailout) {\n        return true;\n      }\n      if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n        return false;\n      } // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n      // then we only have to check the `completedWork.subtreeFlags`.\n\n      var child = completedWork.child;\n      while (child !== null) {\n        if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {\n          return false;\n        }\n        child = child.sibling;\n      }\n      return true;\n    }\n    var appendAllChildren;\n    var updateHostContainer;\n    var updateHostComponent$1;\n    var updateHostText$1;\n    if (supportsMutation) {\n      // Mutation mode\n      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n        while (node !== null) {\n          if (node.tag === HostComponent || node.tag === HostText) {\n            appendInitialChild(parent, node.stateNode);\n          } else if (node.tag === HostPortal) ;else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          if (node === workInProgress) {\n            return;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      };\n      updateHostContainer = function (current, workInProgress) {// Noop\n      };\n      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n        // If we have an alternate, that means this is an update and we need to\n        // schedule a side-effect to do the updates.\n        var oldProps = current.memoizedProps;\n        if (oldProps === newProps) {\n          // In mutation mode, this is sufficient for a bailout because\n          // we won't touch this node even if children changed.\n          return;\n        } // If we get updated because one of our children updated, we don't\n        // have newProps so we'll have to reuse them.\n        // TODO: Split the update API as separate for the props vs. children.\n        // Even better would be if children weren't special cased at all tho.\n\n        var instance = workInProgress.stateNode;\n        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n        // component is hitting the resume path. Figure out why. Possibly\n        // related to `hidden`.\n\n        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n        // is a new ref we mark this as an update. All the work is done in commitWork.\n\n        if (updatePayload) {\n          markUpdate(workInProgress);\n        }\n      };\n      updateHostText$1 = function (current, workInProgress, oldText, newText) {\n        // If the text differs, mark it as an update. All the work in done in commitWork.\n        if (oldText !== newText) {\n          markUpdate(workInProgress);\n        }\n      };\n    } else if (supportsPersistence) {\n      // Persistent host tree mode\n      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n        while (node !== null) {\n          // eslint-disable-next-line no-labels\n          if (node.tag === HostComponent) {\n            var instance = node.stateNode;\n            if (needsVisibilityToggle && isHidden) {\n              // This child is inside a timed out tree. Hide it.\n              var props = node.memoizedProps;\n              var type = node.type;\n              instance = cloneHiddenInstance(instance, type, props, node);\n            }\n            appendInitialChild(parent, instance);\n          } else if (node.tag === HostText) {\n            var _instance = node.stateNode;\n            if (needsVisibilityToggle && isHidden) {\n              // This child is inside a timed out tree. Hide it.\n              var text = node.memoizedProps;\n              _instance = cloneHiddenTextInstance(_instance, text, node);\n            }\n            appendInitialChild(parent, _instance);\n          } else if (node.tag === HostPortal) ;else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n            // The children in this boundary are hidden. Toggle their visibility\n            // before appending.\n            var child = node.child;\n            if (child !== null) {\n              child.return = node;\n            }\n            appendAllChildren(parent, node, true, true);\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n          node = node;\n          if (node === workInProgress) {\n            return;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n      var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n        while (node !== null) {\n          // eslint-disable-next-line no-labels\n          if (node.tag === HostComponent) {\n            var instance = node.stateNode;\n            if (needsVisibilityToggle && isHidden) {\n              // This child is inside a timed out tree. Hide it.\n              var props = node.memoizedProps;\n              var type = node.type;\n              instance = cloneHiddenInstance(instance, type, props, node);\n            }\n            appendChildToContainerChildSet(containerChildSet, instance);\n          } else if (node.tag === HostText) {\n            var _instance2 = node.stateNode;\n            if (needsVisibilityToggle && isHidden) {\n              // This child is inside a timed out tree. Hide it.\n              var text = node.memoizedProps;\n              _instance2 = cloneHiddenTextInstance(_instance2, text, node);\n            }\n            appendChildToContainerChildSet(containerChildSet, _instance2);\n          } else if (node.tag === HostPortal) ;else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n            // The children in this boundary are hidden. Toggle their visibility\n            // before appending.\n            var child = node.child;\n            if (child !== null) {\n              child.return = node;\n            }\n            appendAllChildrenToContainer(containerChildSet, node, true, true);\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n          node = node;\n          if (node === workInProgress) {\n            return;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      };\n      updateHostContainer = function (current, workInProgress) {\n        var portalOrRoot = workInProgress.stateNode;\n        var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n        if (childrenUnchanged) ;else {\n          var container = portalOrRoot.containerInfo;\n          var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n\n          appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n          portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n          markUpdate(workInProgress);\n          finalizeContainerChildren(container, newChildSet);\n        }\n      };\n      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n        var currentInstance = current.stateNode;\n        var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n        // This guarantees that we can reuse all of them.\n\n        var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n        if (childrenUnchanged && oldProps === newProps) {\n          // No changes, just reuse the existing instance.\n          // Note that this might release a previous clone.\n          workInProgress.stateNode = currentInstance;\n          return;\n        }\n        var recyclableInstance = workInProgress.stateNode;\n        var currentHostContext = getHostContext();\n        var updatePayload = null;\n        if (oldProps !== newProps) {\n          updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n        }\n        if (childrenUnchanged && updatePayload === null) {\n          // No changes, just reuse the existing instance.\n          // Note that this might release a previous clone.\n          workInProgress.stateNode = currentInstance;\n          return;\n        }\n        var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n        if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n          markUpdate(workInProgress);\n        }\n        workInProgress.stateNode = newInstance;\n        if (childrenUnchanged) {\n          // If there are no other effects in this tree, we need to flag this node as having one.\n          // Even though we're not going to use it for anything.\n          // Otherwise parents won't know that there are new children to propagate upwards.\n          markUpdate(workInProgress);\n        } else {\n          // If children might have changed, we have to add them all to the set.\n          appendAllChildren(newInstance, workInProgress, false, false);\n        }\n      };\n      updateHostText$1 = function (current, workInProgress, oldText, newText) {\n        if (oldText !== newText) {\n          // If the text content differs, we'll create a new text instance for it.\n          var rootContainerInstance = getRootHostContainer();\n          var currentHostContext = getHostContext();\n          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n          // This lets the parents know that at least one of their children has changed.\n\n          markUpdate(workInProgress);\n        } else {\n          workInProgress.stateNode = current.stateNode;\n        }\n      };\n    } else {\n      // No host operations\n      updateHostContainer = function (current, workInProgress) {// Noop\n      };\n      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop\n      };\n      updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop\n      };\n    }\n    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n      if (getIsHydrating()) {\n        // If we're hydrating, we should consume as many items as we can\n        // so we don't leave any behind.\n        return;\n      }\n      switch (renderState.tailMode) {\n        case 'hidden':\n          {\n            // Any insertions at the end of the tail list after this point\n            // should be invisible. If there are already mounted boundaries\n            // anything before them are not considered for collapsing.\n            // Therefore we need to go through the whole tail to find if\n            // there are any.\n            var tailNode = renderState.tail;\n            var lastTailNode = null;\n            while (tailNode !== null) {\n              if (tailNode.alternate !== null) {\n                lastTailNode = tailNode;\n              }\n              tailNode = tailNode.sibling;\n            } // Next we're simply going to delete all insertions after the\n            // last rendered item.\n\n            if (lastTailNode === null) {\n              // All remaining items in the tail are insertions.\n              renderState.tail = null;\n            } else {\n              // Detach the insertion after the last node that was already\n              // inserted.\n              lastTailNode.sibling = null;\n            }\n            break;\n          }\n        case 'collapsed':\n          {\n            // Any insertions at the end of the tail list after this point\n            // should be invisible. If there are already mounted boundaries\n            // anything before them are not considered for collapsing.\n            // Therefore we need to go through the whole tail to find if\n            // there are any.\n            var _tailNode = renderState.tail;\n            var _lastTailNode = null;\n            while (_tailNode !== null) {\n              if (_tailNode.alternate !== null) {\n                _lastTailNode = _tailNode;\n              }\n              _tailNode = _tailNode.sibling;\n            } // Next we're simply going to delete all insertions after the\n            // last rendered item.\n\n            if (_lastTailNode === null) {\n              // All remaining items in the tail are insertions.\n              if (!hasRenderedATailFallback && renderState.tail !== null) {\n                // We suspended during the head. We want to show at least one\n                // row at the tail. So we'll keep on and cut off the rest.\n                renderState.tail.sibling = null;\n              } else {\n                renderState.tail = null;\n              }\n            } else {\n              // Detach the insertion after the last node that was already\n              // inserted.\n              _lastTailNode.sibling = null;\n            }\n            break;\n          }\n      }\n    }\n    function bubbleProperties(completedWork) {\n      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n      var newChildLanes = NoLanes;\n      var subtreeFlags = NoFlags;\n      if (!didBailout) {\n        // Bubble up the earliest expiration time.\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          // In profiling mode, resetChildExpirationTime is also used to reset\n          // profiler durations.\n          var actualDuration = completedWork.actualDuration;\n          var treeBaseDuration = completedWork.selfBaseDuration;\n          var child = completedWork.child;\n          while (child !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n            subtreeFlags |= child.subtreeFlags;\n            subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n            // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n            // When work is done, it should bubble to the parent's actualDuration. If\n            // the fiber has not been cloned though, (meaning no work was done), then\n            // this value will reflect the amount of time spent working on a previous\n            // render. In that case it should not bubble. We determine whether it was\n            // cloned by comparing the child pointer.\n\n            actualDuration += child.actualDuration;\n            treeBaseDuration += child.treeBaseDuration;\n            child = child.sibling;\n          }\n          completedWork.actualDuration = actualDuration;\n          completedWork.treeBaseDuration = treeBaseDuration;\n        } else {\n          var _child = completedWork.child;\n          while (_child !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n            subtreeFlags |= _child.subtreeFlags;\n            subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n            // smell because it assumes the commit phase is never concurrent with\n            // the render phase. Will address during refactor to alternate model.\n\n            _child.return = completedWork;\n            _child = _child.sibling;\n          }\n        }\n        completedWork.subtreeFlags |= subtreeFlags;\n      } else {\n        // Bubble up the earliest expiration time.\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          // In profiling mode, resetChildExpirationTime is also used to reset\n          // profiler durations.\n          var _treeBaseDuration = completedWork.selfBaseDuration;\n          var _child2 = completedWork.child;\n          while (_child2 !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n            // so we should bubble those up even during a bailout. All the other\n            // flags have a lifetime only of a single render + commit, so we should\n            // ignore them.\n\n            subtreeFlags |= _child2.subtreeFlags & StaticMask;\n            subtreeFlags |= _child2.flags & StaticMask;\n            _treeBaseDuration += _child2.treeBaseDuration;\n            _child2 = _child2.sibling;\n          }\n          completedWork.treeBaseDuration = _treeBaseDuration;\n        } else {\n          var _child3 = completedWork.child;\n          while (_child3 !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n            // so we should bubble those up even during a bailout. All the other\n            // flags have a lifetime only of a single render + commit, so we should\n            // ignore them.\n\n            subtreeFlags |= _child3.subtreeFlags & StaticMask;\n            subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n            // smell because it assumes the commit phase is never concurrent with\n            // the render phase. Will address during refactor to alternate model.\n\n            _child3.return = completedWork;\n            _child3 = _child3.sibling;\n          }\n        }\n        completedWork.subtreeFlags |= subtreeFlags;\n      }\n      completedWork.childLanes = newChildLanes;\n      return didBailout;\n    }\n    function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n      if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\n        warnIfUnhydratedTailNodes(workInProgress);\n        resetHydrationState();\n        workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n        return false;\n      }\n      var wasHydrated = popHydrationState(workInProgress);\n      if (nextState !== null && nextState.dehydrated !== null) {\n        // We might be inside a hydration state the first time we're picking up this\n        // Suspense boundary, and also after we've reentered it for further hydration.\n        if (current === null) {\n          if (!wasHydrated) {\n            throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\n          }\n          prepareToHydrateHostSuspenseInstance(workInProgress);\n          bubbleProperties(workInProgress);\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              var isTimedOutSuspense = nextState !== null;\n              if (isTimedOutSuspense) {\n                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                var primaryChildFragment = workInProgress.child;\n                if (primaryChildFragment !== null) {\n                  // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                  workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n          return false;\n        } else {\n          // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n          // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n          resetHydrationState();\n          if ((workInProgress.flags & DidCapture) === NoFlags) {\n            // This boundary did not suspend so it's now hydrated and unsuspended.\n            workInProgress.memoizedState = null;\n          } // If nothing suspended, we need to schedule an effect to mark this boundary\n          // as having hydrated so events know that they're free to be invoked.\n          // It's also a signal to replay events and the suspense callback.\n          // If something suspended, schedule an effect to attach retry listeners.\n          // So we might as well always mark this.\n\n          workInProgress.flags |= Update;\n          bubbleProperties(workInProgress);\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              var _isTimedOutSuspense = nextState !== null;\n              if (_isTimedOutSuspense) {\n                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                var _primaryChildFragment = workInProgress.child;\n                if (_primaryChildFragment !== null) {\n                  // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                  workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n          return false;\n        }\n      } else {\n        // Successfully completed this tree. If this was a forced client render,\n        // there may have been recoverable errors during first hydration\n        // attempt. If so, add them to a queue so we can log them in the\n        // commit phase.\n        upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n\n        return true;\n      }\n    }\n    function completeWork(current, workInProgress, renderLanes) {\n      var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n      // to the current tree provider fiber is just as fast and less error-prone.\n      // Ideally we would have a special version of the work loop only\n      // for hydration.\n\n      popTreeContext(workInProgress);\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n        case LazyComponent:\n        case SimpleMemoComponent:\n        case FunctionComponent:\n        case ForwardRef:\n        case Fragment:\n        case Mode:\n        case Profiler:\n        case ContextConsumer:\n        case MemoComponent:\n          bubbleProperties(workInProgress);\n          return null;\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n            if (isContextProvider(Component)) {\n              popContext(workInProgress);\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case HostRoot:\n          {\n            var fiberRoot = workInProgress.stateNode;\n            popHostContainer(workInProgress);\n            popTopLevelContextObject(workInProgress);\n            resetWorkInProgressVersions();\n            if (fiberRoot.pendingContext) {\n              fiberRoot.context = fiberRoot.pendingContext;\n              fiberRoot.pendingContext = null;\n            }\n            if (current === null || current.child === null) {\n              // If we hydrated, pop so that we can delete any remaining children\n              // that weren't hydrated.\n              var wasHydrated = popHydrationState(workInProgress);\n              if (wasHydrated) {\n                // If we hydrated, then we'll need to schedule an update for\n                // the commit side-effects on the root.\n                markUpdate(workInProgress);\n              } else {\n                if (current !== null) {\n                  var prevState = current.memoizedState;\n                  if (\n                  // Check if this is a client root\n                  !prevState.isDehydrated ||\n                  // Check if we reverted to client rendering (e.g. due to an error)\n                  (workInProgress.flags & ForceClientRender) !== NoFlags) {\n                    // Schedule an effect to clear this container at the start of the\n                    // next commit. This handles the case of React rendering into a\n                    // container with previous children. It's also safe to do for\n                    // updates too, because current.child would only be null if the\n                    // previous render was null (so the container would already\n                    // be empty).\n                    workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                    // recoverable errors during first hydration attempt. If so, add\n                    // them to a queue so we can log them in the commit phase.\n\n                    upgradeHydrationErrorsToRecoverable();\n                  }\n                }\n              }\n            }\n            updateHostContainer(current, workInProgress);\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case HostComponent:\n          {\n            popHostContext(workInProgress);\n            var rootContainerInstance = getRootHostContainer();\n            var type = workInProgress.type;\n            if (current !== null && workInProgress.stateNode != null) {\n              updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);\n              if (current.ref !== workInProgress.ref) {\n                markRef$1(workInProgress);\n              }\n            } else {\n              if (!newProps) {\n                if (workInProgress.stateNode === null) {\n                  throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                } // This can happen when we abort work.\n\n                bubbleProperties(workInProgress);\n                return null;\n              }\n              var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n              // \"stack\" as the parent. Then append children as we go in beginWork\n              // or completeWork depending on whether we want to add them top->down or\n              // bottom->up. Top->down is faster in IE11.\n\n              var _wasHydrated = popHydrationState(workInProgress);\n              if (_wasHydrated) {\n                // TODO: Move this and createInstance step into the beginPhase\n                // to consolidate.\n                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n                  // If changes to the hydrated node need to be applied at the\n                  // commit-phase we mark this as such.\n                  markUpdate(workInProgress);\n                }\n              } else {\n                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n                appendAllChildren(instance, workInProgress, false, false);\n                workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n                // (eg DOM renderer supports auto-focus for certain elements).\n                // Make sure such renderers get scheduled for later work.\n\n                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n                  markUpdate(workInProgress);\n                }\n              }\n              if (workInProgress.ref !== null) {\n                // If there is a ref on a host node we need to schedule a callback\n                markRef$1(workInProgress);\n              }\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case HostText:\n          {\n            var newText = newProps;\n            if (current && workInProgress.stateNode != null) {\n              var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n              // to schedule a side-effect to do the updates.\n\n              updateHostText$1(current, workInProgress, oldText, newText);\n            } else {\n              if (typeof newText !== 'string') {\n                if (workInProgress.stateNode === null) {\n                  throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                } // This can happen when we abort work.\n              }\n\n              var _rootContainerInstance = getRootHostContainer();\n              var _currentHostContext = getHostContext();\n              var _wasHydrated2 = popHydrationState(workInProgress);\n              if (_wasHydrated2) {\n                if (prepareToHydrateHostTextInstance(workInProgress)) {\n                  markUpdate(workInProgress);\n                }\n              } else {\n                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n              }\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case SuspenseComponent:\n          {\n            popSuspenseContext(workInProgress);\n            var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n            // to its own fiber type so that we can add other kinds of hydration\n            // boundaries that aren't associated with a Suspense tree. In anticipation\n            // of such a refactor, all the hydration logic is contained in\n            // this branch.\n\n            if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n              if (!fallthroughToNormalSuspensePath) {\n                if (workInProgress.flags & ShouldCapture) {\n                  // Special case. There were remaining unhydrated nodes. We treat\n                  // this as a mismatch. Revert to client rendering.\n                  return workInProgress;\n                } else {\n                  // Did not finish hydrating, either because this is the initial\n                  // render or because something suspended.\n                  return null;\n                }\n              } // Continue with the normal Suspense path.\n            }\n\n            if ((workInProgress.flags & DidCapture) !== NoFlags) {\n              // Something suspended. Re-render with the fallback children.\n              workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              } // Don't bubble properties in this case.\n\n              return workInProgress;\n            }\n            var nextDidTimeout = nextState !== null;\n            var prevDidTimeout = current !== null && current.memoizedState !== null;\n            // a passive effect, which is when we process the transitions\n\n            if (nextDidTimeout !== prevDidTimeout) {\n              // an effect to toggle the subtree's visibility. When we switch from\n              // fallback -> primary, the inner Offscreen fiber schedules this effect\n              // as part of its normal complete phase. But when we switch from\n              // primary -> fallback, the inner Offscreen fiber does not have a complete\n              // phase. So we need to schedule its effect here.\n              //\n              // We also use this flag to connect/disconnect the effects, but the same\n              // logic applies: when re-connecting, the Offscreen fiber's complete\n              // phase will handle scheduling the effect. It's only when the fallback\n              // is active that we have to do anything special.\n\n              if (nextDidTimeout) {\n                var _offscreenFiber2 = workInProgress.child;\n                _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n                // in the concurrent tree already suspended during this render.\n                // This is a known bug.\n\n                if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n                  // TODO: Move this back to throwException because this is too late\n                  // if this is a large tree which is common for initial loads. We\n                  // don't know if we should restart a render or not until we get\n                  // this marker, and this is too late.\n                  // If this render already had a ping or lower pri updates,\n                  // and this is the first time we know we're going to suspend we\n                  // should be able to immediately restart from within throwException.\n                  var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n                    // If this was in an invisible tree or a new render, then showing\n                    // this boundary is ok.\n                    renderDidSuspend();\n                  } else {\n                    // Otherwise, we're going to have to hide content so we should\n                    // suspend for longer if possible.\n                    renderDidSuspendDelayIfPossible();\n                  }\n                }\n              }\n            }\n            var wakeables = workInProgress.updateQueue;\n            if (wakeables !== null) {\n              // Schedule an effect to attach a retry listener to the promise.\n              // TODO: Move to passive phase\n              workInProgress.flags |= Update;\n            }\n            bubbleProperties(workInProgress);\n            {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                if (nextDidTimeout) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  var primaryChildFragment = workInProgress.child;\n                  if (primaryChildFragment !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                  }\n                }\n              }\n            }\n            return null;\n          }\n        case HostPortal:\n          popHostContainer(workInProgress);\n          updateHostContainer(current, workInProgress);\n          if (current === null) {\n            preparePortalMount(workInProgress.stateNode.containerInfo);\n          }\n          bubbleProperties(workInProgress);\n          return null;\n        case ContextProvider:\n          // Pop provider fiber\n          var context = workInProgress.type._context;\n          popProvider(context, workInProgress);\n          bubbleProperties(workInProgress);\n          return null;\n        case IncompleteClassComponent:\n          {\n            // Same as class component case. I put it down here so that the tags are\n            // sequential to ensure this switch is compiled to a jump table.\n            var _Component = workInProgress.type;\n            if (isContextProvider(_Component)) {\n              popContext(workInProgress);\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case SuspenseListComponent:\n          {\n            popSuspenseContext(workInProgress);\n            var renderState = workInProgress.memoizedState;\n            if (renderState === null) {\n              // We're running in the default, \"independent\" mode.\n              // We don't do anything in this mode.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n            var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n            var renderedTail = renderState.rendering;\n            if (renderedTail === null) {\n              // We just rendered the head.\n              if (!didSuspendAlready) {\n                // This is the first pass. We need to figure out if anything is still\n                // suspended in the rendered set.\n                // If new content unsuspended, but there's still some content that\n                // didn't. Then we need to do a second pass that forces everything\n                // to keep showing their fallbacks.\n                // We might be suspended if something in this render pass suspended, or\n                // something in the previous committed pass suspended. Otherwise,\n                // there's no chance so we can skip the expensive call to\n                // findFirstSuspended.\n                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n                if (!cannotBeSuspended) {\n                  var row = workInProgress.child;\n                  while (row !== null) {\n                    var suspended = findFirstSuspended(row);\n                    if (suspended !== null) {\n                      didSuspendAlready = true;\n                      workInProgress.flags |= DidCapture;\n                      cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                      // part of the second pass. In that case nothing will subscribe to\n                      // its thenables. Instead, we'll transfer its thenables to the\n                      // SuspenseList so that it can retry if they resolve.\n                      // There might be multiple of these in the list but since we're\n                      // going to wait for all of them anyway, it doesn't really matter\n                      // which ones gets to ping. In theory we could get clever and keep\n                      // track of how many dependencies remain but it gets tricky because\n                      // in the meantime, we can add/remove/change items and dependencies.\n                      // We might bail out of the loop before finding any but that\n                      // doesn't matter since that means that the other boundaries that\n                      // we did find already has their listeners attached.\n\n                      var newThenables = suspended.updateQueue;\n                      if (newThenables !== null) {\n                        workInProgress.updateQueue = newThenables;\n                        workInProgress.flags |= Update;\n                      } // Rerender the whole list, but this time, we'll force fallbacks\n                      // to stay in place.\n                      // Reset the effect flags before doing the second pass since that's now invalid.\n                      // Reset the child fibers to their original state.\n\n                      workInProgress.subtreeFlags = NoFlags;\n                      resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                      // rerender the children.\n\n                      pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n                      return workInProgress.child;\n                    }\n                    row = row.sibling;\n                  }\n                }\n                if (renderState.tail !== null && now() > getRenderTargetTime()) {\n                  // We have already passed our CPU deadline but we still have rows\n                  // left in the tail. We'll just give up further attempts to render\n                  // the main content and only render fallbacks.\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                  // to get it started back up to attempt the next item. While in terms\n                  // of priority this work has the same priority as this current render,\n                  // it's not part of the same transition once the transition has\n                  // committed. If it's sync, we still want to yield so that it can be\n                  // painted. Conceptually, this is really the same as pinging.\n                  // We can use any RetryLane even if it's the one currently rendering\n                  // since we're leaving it behind on this node.\n\n                  workInProgress.lanes = SomeRetryLane;\n                }\n              } else {\n                cutOffTailIfNeeded(renderState, false);\n              } // Next we're going to render the tail.\n            } else {\n              // Append the rendered row to the child list.\n              if (!didSuspendAlready) {\n                var _suspended = findFirstSuspended(renderedTail);\n                if (_suspended !== null) {\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n                  // get lost if this row ends up dropped during a second pass.\n\n                  var _newThenables = _suspended.updateQueue;\n                  if (_newThenables !== null) {\n                    workInProgress.updateQueue = _newThenables;\n                    workInProgress.flags |= Update;\n                  }\n                  cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n                  if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n                  ) {\n                    // We're done.\n                    bubbleProperties(workInProgress);\n                    return null;\n                  }\n                } else if (\n                // The time it took to render last row is greater than the remaining\n                // time we have to render. So rendering one more row would likely\n                // exceed it.\n                now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n                  // We have now passed our CPU deadline and we'll just give up further\n                  // attempts to render the main content and only render fallbacks.\n                  // The assumption is that this is usually faster.\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                  // to get it started back up to attempt the next item. While in terms\n                  // of priority this work has the same priority as this current render,\n                  // it's not part of the same transition once the transition has\n                  // committed. If it's sync, we still want to yield so that it can be\n                  // painted. Conceptually, this is really the same as pinging.\n                  // We can use any RetryLane even if it's the one currently rendering\n                  // since we're leaving it behind on this node.\n\n                  workInProgress.lanes = SomeRetryLane;\n                }\n              }\n              if (renderState.isBackwards) {\n                // The effect list of the backwards tail will have been added\n                // to the end. This breaks the guarantee that life-cycles fire in\n                // sibling order but that isn't a strong guarantee promised by React.\n                // Especially since these might also just pop in during future commits.\n                // Append to the beginning of the list.\n                renderedTail.sibling = workInProgress.child;\n                workInProgress.child = renderedTail;\n              } else {\n                var previousSibling = renderState.last;\n                if (previousSibling !== null) {\n                  previousSibling.sibling = renderedTail;\n                } else {\n                  workInProgress.child = renderedTail;\n                }\n                renderState.last = renderedTail;\n              }\n            }\n            if (renderState.tail !== null) {\n              // We still have tail rows to render.\n              // Pop a row.\n              var next = renderState.tail;\n              renderState.rendering = next;\n              renderState.tail = next.sibling;\n              renderState.renderingStartTime = now();\n              next.sibling = null; // Restore the context.\n              // TODO: We can probably just avoid popping it instead and only\n              // setting it the first time we go from not suspended to suspended.\n\n              var suspenseContext = suspenseStackCursor.current;\n              if (didSuspendAlready) {\n                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n              } else {\n                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n              }\n              pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n              // Don't bubble properties in this case.\n\n              return next;\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case ScopeComponent:\n          {\n            break;\n          }\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            popRenderLanes(workInProgress);\n            var _nextState = workInProgress.memoizedState;\n            var nextIsHidden = _nextState !== null;\n            if (current !== null) {\n              var _prevState = current.memoizedState;\n              var prevIsHidden = _prevState !== null;\n              if (prevIsHidden !== nextIsHidden &&\n              // LegacyHidden doesn't do any hiding — it only pre-renders.\n              !enableLegacyHidden) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n            if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n              bubbleProperties(workInProgress);\n            } else {\n              // Don't bubble properties for hidden children unless we're rendering\n              // at offscreen priority.\n              if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n                bubbleProperties(workInProgress);\n                if (supportsMutation) {\n                  // Check if there was an insertion or update in the hidden subtree.\n                  // If so, we need to hide those nodes in the commit phase, so\n                  // schedule a visibility effect.\n                  if (workInProgress.subtreeFlags & (Placement | Update)) {\n                    workInProgress.flags |= Visibility;\n                  }\n                }\n              }\n            }\n            return null;\n          }\n        case CacheComponent:\n          {\n            return null;\n          }\n        case TracingMarkerComponent:\n          {\n            return null;\n          }\n      }\n      throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n    }\n    function unwindWork(current, workInProgress, renderLanes) {\n      // Note: This intentionally doesn't check if we're hydrating because comparing\n      // to the current tree provider fiber is just as fast and less error-prone.\n      // Ideally we would have a special version of the work loop only\n      // for hydration.\n      popTreeContext(workInProgress);\n      switch (workInProgress.tag) {\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n            if (isContextProvider(Component)) {\n              popContext(workInProgress);\n            }\n            var flags = workInProgress.flags;\n            if (flags & ShouldCapture) {\n              workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n              return workInProgress;\n            }\n            return null;\n          }\n        case HostRoot:\n          {\n            var root = workInProgress.stateNode;\n            popHostContainer(workInProgress);\n            popTopLevelContextObject(workInProgress);\n            resetWorkInProgressVersions();\n            var _flags = workInProgress.flags;\n            if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n              // There was an error during render that wasn't captured by a suspense\n              // boundary. Do a second pass on the root to unmount the children.\n              workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n              return workInProgress;\n            } // We unwound to the root without completing it. Exit.\n\n            return null;\n          }\n        case HostComponent:\n          {\n            // TODO: popHydrationState\n            popHostContext(workInProgress);\n            return null;\n          }\n        case SuspenseComponent:\n          {\n            popSuspenseContext(workInProgress);\n            var suspenseState = workInProgress.memoizedState;\n            if (suspenseState !== null && suspenseState.dehydrated !== null) {\n              if (workInProgress.alternate === null) {\n                throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n              }\n              resetHydrationState();\n            }\n            var _flags2 = workInProgress.flags;\n            if (_flags2 & ShouldCapture) {\n              workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n              return workInProgress;\n            }\n            return null;\n          }\n        case SuspenseListComponent:\n          {\n            popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n            // caught by a nested boundary. If not, it should bubble through.\n\n            return null;\n          }\n        case HostPortal:\n          popHostContainer(workInProgress);\n          return null;\n        case ContextProvider:\n          var context = workInProgress.type._context;\n          popProvider(context, workInProgress);\n          return null;\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          popRenderLanes(workInProgress);\n          return null;\n        case CacheComponent:\n          return null;\n        default:\n          return null;\n      }\n    }\n    function unwindInterruptedWork(current, interruptedWork, renderLanes) {\n      // Note: This intentionally doesn't check if we're hydrating because comparing\n      // to the current tree provider fiber is just as fast and less error-prone.\n      // Ideally we would have a special version of the work loop only\n      // for hydration.\n      popTreeContext(interruptedWork);\n      switch (interruptedWork.tag) {\n        case ClassComponent:\n          {\n            var childContextTypes = interruptedWork.type.childContextTypes;\n            if (childContextTypes !== null && childContextTypes !== undefined) {\n              popContext(interruptedWork);\n            }\n            break;\n          }\n        case HostRoot:\n          {\n            var root = interruptedWork.stateNode;\n            popHostContainer(interruptedWork);\n            popTopLevelContextObject(interruptedWork);\n            resetWorkInProgressVersions();\n            break;\n          }\n        case HostComponent:\n          {\n            popHostContext(interruptedWork);\n            break;\n          }\n        case HostPortal:\n          popHostContainer(interruptedWork);\n          break;\n        case SuspenseComponent:\n          popSuspenseContext(interruptedWork);\n          break;\n        case SuspenseListComponent:\n          popSuspenseContext(interruptedWork);\n          break;\n        case ContextProvider:\n          var context = interruptedWork.type._context;\n          popProvider(context, interruptedWork);\n          break;\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          popRenderLanes(interruptedWork);\n          break;\n      }\n    }\n    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n      try {\n        func.apply(context, funcArgs);\n      } catch (error) {\n        this.onError(error);\n      }\n    }\n    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n    {\n      // In DEV mode, we swap out invokeGuardedCallback for a special version\n      // that plays more nicely with the browser's DevTools. The idea is to preserve\n      // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n      // functions in invokeGuardedCallback, and the production version of\n      // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n      // like caught exceptions, and the DevTools won't pause unless the developer\n      // takes the extra step of enabling pause on caught exceptions. This is\n      // unintuitive, though, because even though React has caught the error, from\n      // the developer's perspective, the error is uncaught.\n      //\n      // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n      // DOM node, and call the user-provided callback from inside an event handler\n      // for that fake event. If the callback throws, the error is \"captured\" using\n      // a global event handler. But because the error happens in a different\n      // event loop context, it does not interrupt the normal program flow.\n      // Effectively, this gives us try-catch behavior without actually using\n      // try-catch. Neat!\n      // Check that the browser supports the APIs we need to implement our special\n      // DEV version of invokeGuardedCallback\n      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n        var fakeNode = document.createElement('react');\n        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n          // If document doesn't exist we know for sure we will crash in this method\n          // when we call document.createEvent(). However this can cause confusing\n          // errors: https://github.com/facebook/create-react-app/issues/3482\n          // So we preemptively throw with a better message instead.\n          if (typeof document === 'undefined' || document === null) {\n            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n          }\n          var evt = document.createEvent('Event');\n          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n          // set this to true at the beginning, then set it to false right after\n          // calling the function. If the function errors, `didError` will never be\n          // set to false. This strategy works even if the browser is flaky and\n          // fails to call our global error handler, because it doesn't rely on\n          // the error event at all.\n\n          var didError = true; // Keeps track of the value of window.event so that we can reset it\n          // during the callback to let user code access window.event in the\n          // browsers that support it.\n\n          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n          // dispatching: https://github.com/facebook/react/issues/13688\n\n          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n          function restoreAfterDispatch() {\n            // We immediately remove the callback from event listeners so that\n            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n            // nested call would trigger the fake event handlers of any call higher\n            // in the stack.\n            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n            // window.event assignment in both IE <= 10 as they throw an error\n            // \"Member not found\" in strict mode, and in Firefox which does not\n            // support window.event.\n\n            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n              window.event = windowEvent;\n            }\n          } // Create an event handler for our fake event. We will synchronously\n          // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n          // call the user-provided callback.\n\n          var funcArgs = Array.prototype.slice.call(arguments, 3);\n          function callCallback() {\n            didCall = true;\n            restoreAfterDispatch();\n            func.apply(context, funcArgs);\n            didError = false;\n          } // Create a global error event handler. We use this to capture the value\n          // that was thrown. It's possible that this error handler will fire more\n          // than once; for example, if non-React code also calls `dispatchEvent`\n          // and a handler for that event throws. We should be resilient to most of\n          // those cases. Even if our error event handler fires more than once, the\n          // last error event is always used. If the callback actually does error,\n          // we know that the last error event is the correct one, because it's not\n          // possible for anything else to have happened in between our callback\n          // erroring and the code that follows the `dispatchEvent` call below. If\n          // the callback doesn't error, but the error event was fired, we know to\n          // ignore it because `didError` will be false, as described above.\n\n          var error; // Use this to track whether the error event is ever called.\n\n          var didSetError = false;\n          var isCrossOriginError = false;\n          function handleWindowError(event) {\n            error = event.error;\n            didSetError = true;\n            if (error === null && event.colno === 0 && event.lineno === 0) {\n              isCrossOriginError = true;\n            }\n            if (event.defaultPrevented) {\n              // Some other error handler has prevented default.\n              // Browsers silence the error report if this happens.\n              // We'll remember this to later decide whether to log it or not.\n              if (error != null && typeof error === 'object') {\n                try {\n                  error._suppressLogging = true;\n                } catch (inner) {// Ignore.\n                }\n              }\n            }\n          } // Create a fake event type.\n\n          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n          window.addEventListener('error', handleWindowError);\n          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n          // errors, it will trigger our global error handler.\n\n          evt.initEvent(evtType, false, false);\n          fakeNode.dispatchEvent(evt);\n          if (windowEventDescriptor) {\n            Object.defineProperty(window, 'event', windowEventDescriptor);\n          }\n          if (didCall && didError) {\n            if (!didSetError) {\n              // The callback errored, but the error event never fired.\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n            } else if (isCrossOriginError) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n            }\n            this.onError(error);\n          } // Remove our event listeners\n\n          window.removeEventListener('error', handleWindowError);\n          if (!didCall) {\n            // Something went really wrong, and our event was not dispatched.\n            // https://github.com/facebook/react/issues/16734\n            // https://github.com/facebook/react/issues/16585\n            // Fall back to the production implementation.\n            restoreAfterDispatch();\n            return invokeGuardedCallbackProd.apply(this, arguments);\n          }\n        };\n      }\n    }\n    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n    var hasError = false;\n    var caughtError = null; // Used by event system to capture/rethrow the first error.\n    var reporter = {\n      onError: function (error) {\n        hasError = true;\n        caughtError = error;\n      }\n    };\n    /**\n     * Call a function while guarding against errors that happens within it.\n     * Returns an error if it throws, otherwise null.\n     *\n     * In production, this is implemented using a try-catch. The reason we don't\n     * use a try-catch directly is so that we can swap out a different\n     * implementation in DEV mode.\n     *\n     * @param {String} name of the guard to use for logging or debugging\n     * @param {Function} func The function to invoke\n     * @param {*} context The context to use when calling the function\n     * @param {...*} args Arguments for function\n     */\n\n    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n      hasError = false;\n      caughtError = null;\n      invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n    }\n    function hasCaughtError() {\n      return hasError;\n    }\n    function clearCaughtError() {\n      if (hasError) {\n        var error = caughtError;\n        hasError = false;\n        caughtError = null;\n        return error;\n      } else {\n        throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n      }\n    }\n    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n    {\n      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n    } // Used during the commit phase to track the state of the Offscreen component stack.\n    // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n    // Only used when enableSuspenseLayoutEffectSemantics is enabled.\n\n    var offscreenSubtreeIsHidden = false;\n    var offscreenSubtreeWasHidden = false;\n    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n    var nextEffect = null; // Used for Profiling builds to track updaters.\n\n    var inProgressLanes = null;\n    var inProgressRoot = null;\n    function reportUncaughtErrorInDEV(error) {\n      // Wrapping each small part of the commit phase into a guarded\n      // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n      // But we rely on it to surface errors to DEV tools like overlays\n      // (https://github.com/facebook/react/issues/21712).\n      // As a compromise, rethrow only caught errors in a guard.\n      {\n        invokeGuardedCallback(null, function () {\n          throw error;\n        });\n        clearCaughtError();\n      }\n    }\n    var callComponentWillUnmountWithTimer = function (current, instance) {\n      instance.props = current.memoizedProps;\n      instance.state = current.memoizedState;\n      if (current.mode & ProfileMode) {\n        try {\n          startLayoutEffectTimer();\n          instance.componentWillUnmount();\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        instance.componentWillUnmount();\n      }\n    }; // Capture errors so they don't interrupt mounting.\n\n    function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\n      try {\n        commitHookEffectListMount(Layout, current);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } // Capture errors so they don't interrupt unmounting.\n\n    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n      try {\n        callComponentWillUnmountWithTimer(current, instance);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } // Capture errors so they don't interrupt mounting.\n\n    function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\n      try {\n        instance.componentDidMount();\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } // Capture errors so they don't interrupt mounting.\n\n    function safelyAttachRef(current, nearestMountedAncestor) {\n      try {\n        commitAttachRef(current);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    function safelyDetachRef(current, nearestMountedAncestor) {\n      var ref = current.ref;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          var retVal;\n          try {\n            if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                retVal = ref(null);\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              retVal = ref(null);\n            }\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          }\n          {\n            if (typeof retVal === 'function') {\n              error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n            }\n          }\n        } else {\n          ref.current = null;\n        }\n      }\n    }\n    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n      try {\n        destroy();\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    var focusedInstanceHandle = null;\n    var shouldFireAfterActiveInstanceBlur = false;\n    function commitBeforeMutationEffects(root, firstChild) {\n      focusedInstanceHandle = prepareForCommit(root.containerInfo);\n      nextEffect = firstChild;\n      commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n      var shouldFire = shouldFireAfterActiveInstanceBlur;\n      shouldFireAfterActiveInstanceBlur = false;\n      focusedInstanceHandle = null;\n      return shouldFire;\n    }\n    function commitBeforeMutationEffects_begin() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n        var child = fiber.child;\n        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitBeforeMutationEffects_complete();\n        }\n      }\n    }\n    function commitBeforeMutationEffects_complete() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n        try {\n          commitBeforeMutationEffectsOnFiber(fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        resetCurrentFiber();\n        var sibling = fiber.sibling;\n        if (sibling !== null) {\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = fiber.return;\n      }\n    }\n    function commitBeforeMutationEffectsOnFiber(finishedWork) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags;\n      if ((flags & Snapshot) !== NoFlags) {\n        setCurrentFiber(finishedWork);\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              break;\n            }\n          case ClassComponent:\n            {\n              if (current !== null) {\n                var prevProps = current.memoizedProps;\n                var prevState = current.memoizedState;\n                var instance = finishedWork.stateNode; // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n                {\n                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                    didWarnSet.add(finishedWork.type);\n                    error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n                  }\n                }\n                instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n              }\n              break;\n            }\n          case HostRoot:\n            {\n              if (supportsMutation) {\n                var root = finishedWork.stateNode;\n                clearContainer(root.containerInfo);\n              }\n              break;\n            }\n          case HostComponent:\n          case HostText:\n          case HostPortal:\n          case IncompleteClassComponent:\n            // Nothing to do for these component types\n            break;\n          default:\n            {\n              throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n            }\n        }\n        resetCurrentFiber();\n      }\n    }\n    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n        do {\n          if ((effect.tag & flags) === flags) {\n            // Unmount\n            var destroy = effect.destroy;\n            effect.destroy = undefined;\n            if (destroy !== undefined) {\n              {\n                if ((flags & Passive$1) !== NoFlags$1) {\n                  markComponentPassiveEffectUnmountStarted(finishedWork);\n                } else if ((flags & Layout) !== NoFlags$1) {\n                  markComponentLayoutEffectUnmountStarted(finishedWork);\n                }\n              }\n              {\n                if ((flags & Insertion) !== NoFlags$1) {\n                  setIsRunningInsertionEffect(true);\n                }\n              }\n              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n              {\n                if ((flags & Insertion) !== NoFlags$1) {\n                  setIsRunningInsertionEffect(false);\n                }\n              }\n              {\n                if ((flags & Passive$1) !== NoFlags$1) {\n                  markComponentPassiveEffectUnmountStopped();\n                } else if ((flags & Layout) !== NoFlags$1) {\n                  markComponentLayoutEffectUnmountStopped();\n                }\n              }\n            }\n          }\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n    function commitHookEffectListMount(flags, finishedWork) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n        do {\n          if ((effect.tag & flags) === flags) {\n            {\n              if ((flags & Passive$1) !== NoFlags$1) {\n                markComponentPassiveEffectMountStarted(finishedWork);\n              } else if ((flags & Layout) !== NoFlags$1) {\n                markComponentLayoutEffectMountStarted(finishedWork);\n              }\n            } // Mount\n\n            var create = effect.create;\n            {\n              if ((flags & Insertion) !== NoFlags$1) {\n                setIsRunningInsertionEffect(true);\n              }\n            }\n            effect.destroy = create();\n            {\n              if ((flags & Insertion) !== NoFlags$1) {\n                setIsRunningInsertionEffect(false);\n              }\n            }\n            {\n              if ((flags & Passive$1) !== NoFlags$1) {\n                markComponentPassiveEffectMountStopped();\n              } else if ((flags & Layout) !== NoFlags$1) {\n                markComponentLayoutEffectMountStopped();\n              }\n            }\n            {\n              var destroy = effect.destroy;\n              if (destroy !== undefined && typeof destroy !== 'function') {\n                var hookName = void 0;\n                if ((effect.tag & Layout) !== NoFlags) {\n                  hookName = 'useLayoutEffect';\n                } else if ((effect.tag & Insertion) !== NoFlags) {\n                  hookName = 'useInsertionEffect';\n                } else {\n                  hookName = 'useEffect';\n                }\n                var addendum = void 0;\n                if (destroy === null) {\n                  addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n                } else if (typeof destroy.then === 'function') {\n                  addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n                } else {\n                  addendum = ' You returned: ' + destroy;\n                }\n                error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n              }\n            }\n          }\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n    function commitPassiveEffectDurations(finishedRoot, finishedWork) {\n      {\n        // Only Profilers with work in their subtree will have an Update effect scheduled.\n        if ((finishedWork.flags & Update) !== NoFlags) {\n          switch (finishedWork.tag) {\n            case Profiler:\n              {\n                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n                var _finishedWork$memoize = finishedWork.memoizedProps,\n                  id = _finishedWork$memoize.id,\n                  onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n                // It does not get reset until the start of the next commit phase.\n\n                var commitTime = getCommitTime();\n                var phase = finishedWork.alternate === null ? 'mount' : 'update';\n                {\n                  if (isCurrentUpdateNested()) {\n                    phase = 'nested-update';\n                  }\n                }\n                if (typeof onPostCommit === 'function') {\n                  onPostCommit(id, phase, passiveEffectDuration, commitTime);\n                } // Bubble times to the next nearest ancestor Profiler.\n                // After we process that Profiler, we'll bubble further up.\n\n                var parentFiber = finishedWork.return;\n                outer: while (parentFiber !== null) {\n                  switch (parentFiber.tag) {\n                    case HostRoot:\n                      var root = parentFiber.stateNode;\n                      root.passiveEffectDuration += passiveEffectDuration;\n                      break outer;\n                    case Profiler:\n                      var parentStateNode = parentFiber.stateNode;\n                      parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                      break outer;\n                  }\n                  parentFiber = parentFiber.return;\n                }\n                break;\n              }\n          }\n        }\n      }\n    }\n    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n      if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              if (!offscreenSubtreeWasHidden) {\n                // At this point layout effects have already been destroyed (during mutation phase).\n                // This is done to prevent sibling component effects from interfering with each other,\n                // e.g. a destroy function in one component should never override a ref set\n                // by a create function in another component during the same commit.\n                if (finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    commitHookEffectListMount(Layout | HasEffect, finishedWork);\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  commitHookEffectListMount(Layout | HasEffect, finishedWork);\n                }\n              }\n              break;\n            }\n          case ClassComponent:\n            {\n              var instance = finishedWork.stateNode;\n              if (finishedWork.flags & Update) {\n                if (!offscreenSubtreeWasHidden) {\n                  if (current === null) {\n                    // We could update instance props and state here,\n                    // but instead we rely on them being set during last render.\n                    // TODO: revisit this when we implement resuming.\n                    {\n                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                        if (instance.props !== finishedWork.memoizedProps) {\n                          error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                        if (instance.state !== finishedWork.memoizedState) {\n                          error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                      }\n                    }\n                    if (finishedWork.mode & ProfileMode) {\n                      try {\n                        startLayoutEffectTimer();\n                        instance.componentDidMount();\n                      } finally {\n                        recordLayoutEffectDuration(finishedWork);\n                      }\n                    } else {\n                      instance.componentDidMount();\n                    }\n                  } else {\n                    var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n                    var prevState = current.memoizedState; // We could update instance props and state here,\n                    // but instead we rely on them being set during last render.\n                    // TODO: revisit this when we implement resuming.\n\n                    {\n                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                        if (instance.props !== finishedWork.memoizedProps) {\n                          error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                        if (instance.state !== finishedWork.memoizedState) {\n                          error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                      }\n                    }\n                    if (finishedWork.mode & ProfileMode) {\n                      try {\n                        startLayoutEffectTimer();\n                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                      } finally {\n                        recordLayoutEffectDuration(finishedWork);\n                      }\n                    } else {\n                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                    }\n                  }\n                }\n              } // TODO: I think this is now always non-null by the time it reaches the\n              // commit phase. Consider removing the type check.\n\n              var updateQueue = finishedWork.updateQueue;\n              if (updateQueue !== null) {\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                } // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                commitUpdateQueue(finishedWork, updateQueue, instance);\n              }\n              break;\n            }\n          case HostRoot:\n            {\n              // TODO: I think this is now always non-null by the time it reaches the\n              // commit phase. Consider removing the type check.\n              var _updateQueue = finishedWork.updateQueue;\n              if (_updateQueue !== null) {\n                var _instance = null;\n                if (finishedWork.child !== null) {\n                  switch (finishedWork.child.tag) {\n                    case HostComponent:\n                      _instance = getPublicInstance(finishedWork.child.stateNode);\n                      break;\n                    case ClassComponent:\n                      _instance = finishedWork.child.stateNode;\n                      break;\n                  }\n                }\n                commitUpdateQueue(finishedWork, _updateQueue, _instance);\n              }\n              break;\n            }\n          case HostComponent:\n            {\n              var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n              // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n              // These effects should only be committed when components are first mounted,\n              // aka when there is no current/alternate.\n\n              if (current === null && finishedWork.flags & Update) {\n                var type = finishedWork.type;\n                var props = finishedWork.memoizedProps;\n                commitMount(_instance2, type, props, finishedWork);\n              }\n              break;\n            }\n          case HostText:\n            {\n              // We have no life-cycles associated with text.\n              break;\n            }\n          case HostPortal:\n            {\n              // We have no life-cycles associated with portals.\n              break;\n            }\n          case Profiler:\n            {\n              {\n                var _finishedWork$memoize2 = finishedWork.memoizedProps,\n                  onCommit = _finishedWork$memoize2.onCommit,\n                  onRender = _finishedWork$memoize2.onRender;\n                var effectDuration = finishedWork.stateNode.effectDuration;\n                var commitTime = getCommitTime();\n                var phase = current === null ? 'mount' : 'update';\n                {\n                  if (isCurrentUpdateNested()) {\n                    phase = 'nested-update';\n                  }\n                }\n                if (typeof onRender === 'function') {\n                  onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n                }\n                {\n                  if (typeof onCommit === 'function') {\n                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n                  } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n                  // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n                  // because the effect is also where times bubble to parent Profilers.\n\n                  enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n                  // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n                  var parentFiber = finishedWork.return;\n                  outer: while (parentFiber !== null) {\n                    switch (parentFiber.tag) {\n                      case HostRoot:\n                        var root = parentFiber.stateNode;\n                        root.effectDuration += effectDuration;\n                        break outer;\n                      case Profiler:\n                        var parentStateNode = parentFiber.stateNode;\n                        parentStateNode.effectDuration += effectDuration;\n                        break outer;\n                    }\n                    parentFiber = parentFiber.return;\n                  }\n                }\n              }\n              break;\n            }\n          case SuspenseComponent:\n            {\n              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n              break;\n            }\n          case SuspenseListComponent:\n          case IncompleteClassComponent:\n          case ScopeComponent:\n          case OffscreenComponent:\n          case LegacyHiddenComponent:\n          case TracingMarkerComponent:\n            {\n              break;\n            }\n          default:\n            throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n      }\n      if (!offscreenSubtreeWasHidden) {\n        {\n          if (finishedWork.flags & Ref) {\n            commitAttachRef(finishedWork);\n          }\n        }\n      }\n    }\n    function reappearLayoutEffectsOnFiber(node) {\n      // Turn on layout effects in a tree that previously disappeared.\n      // TODO (Offscreen) Check: flags & LayoutStatic\n      switch (node.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (node.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                safelyCallCommitHookLayoutEffectListMount(node, node.return);\n              } finally {\n                recordLayoutEffectDuration(node);\n              }\n            } else {\n              safelyCallCommitHookLayoutEffectListMount(node, node.return);\n            }\n            break;\n          }\n        case ClassComponent:\n          {\n            var instance = node.stateNode;\n            if (typeof instance.componentDidMount === 'function') {\n              safelyCallComponentDidMount(node, node.return, instance);\n            }\n            safelyAttachRef(node, node.return);\n            break;\n          }\n        case HostComponent:\n          {\n            safelyAttachRef(node, node.return);\n            break;\n          }\n      }\n    }\n    function hideOrUnhideAllChildren(finishedWork, isHidden) {\n      // Only hide or unhide the top-most host nodes.\n      var hostSubtreeRoot = null;\n      if (supportsMutation) {\n        // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n        var node = finishedWork;\n        while (true) {\n          if (node.tag === HostComponent) {\n            if (hostSubtreeRoot === null) {\n              hostSubtreeRoot = node;\n              try {\n                var instance = node.stateNode;\n                if (isHidden) {\n                  hideInstance(instance);\n                } else {\n                  unhideInstance(node.stateNode, node.memoizedProps);\n                }\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n            }\n          } else if (node.tag === HostText) {\n            if (hostSubtreeRoot === null) {\n              try {\n                var _instance3 = node.stateNode;\n                if (isHidden) {\n                  hideTextInstance(_instance3);\n                } else {\n                  unhideTextInstance(_instance3, node.memoizedProps);\n                }\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n            }\n          } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          if (node === finishedWork) {\n            return;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === finishedWork) {\n              return;\n            }\n            if (hostSubtreeRoot === node) {\n              hostSubtreeRoot = null;\n            }\n            node = node.return;\n          }\n          if (hostSubtreeRoot === node) {\n            hostSubtreeRoot = null;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n    }\n    function commitAttachRef(finishedWork) {\n      var ref = finishedWork.ref;\n      if (ref !== null) {\n        var instance = finishedWork.stateNode;\n        var instanceToUse;\n        switch (finishedWork.tag) {\n          case HostComponent:\n            instanceToUse = getPublicInstance(instance);\n            break;\n          default:\n            instanceToUse = instance;\n        } // Moved outside to ensure DCE works with this flag\n\n        if (typeof ref === 'function') {\n          var retVal;\n          if (finishedWork.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              retVal = ref(instanceToUse);\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            retVal = ref(instanceToUse);\n          }\n          {\n            if (typeof retVal === 'function') {\n              error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n            }\n          }\n        } else {\n          {\n            if (!ref.hasOwnProperty('current')) {\n              error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n            }\n          }\n          ref.current = instanceToUse;\n        }\n      }\n    }\n    function detachFiberMutation(fiber) {\n      // Cut off the return pointer to disconnect it from the tree.\n      // This enables us to detect and warn against state updates on an unmounted component.\n      // It also prevents events from bubbling from within disconnected components.\n      //\n      // Ideally, we should also clear the child pointer of the parent alternate to let this\n      // get GC:ed but we don't know which for sure which parent is the current\n      // one so we'll settle for GC:ing the subtree of this child.\n      // This child itself will be GC:ed when the parent updates the next time.\n      //\n      // Note that we can't clear child or sibling pointers yet.\n      // They're needed for passive effects and for findDOMNode.\n      // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n      //\n      // Don't reset the alternate yet, either. We need that so we can detach the\n      // alternate's fields in the passive phase. Clearing the return pointer is\n      // sufficient for findDOMNode semantics.\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.return = null;\n      }\n      fiber.return = null;\n    }\n    function detachFiberAfterEffects(fiber) {\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        fiber.alternate = null;\n        detachFiberAfterEffects(alternate);\n      } // Note: Defensively using negation instead of < in case\n      // `deletedTreeCleanUpLevel` is undefined.\n\n      {\n        // Clear cyclical Fiber fields. This level alone is designed to roughly\n        // approximate the planned Fiber refactor. In that world, `setState` will be\n        // bound to a special \"instance\" object instead of a Fiber. The Instance\n        // object will not have any of these fields. It will only be connected to\n        // the fiber tree via a single link at the root. So if this level alone is\n        // sufficient to fix memory issues, that bodes well for our plans.\n        fiber.child = null;\n        fiber.deletions = null;\n        fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n        // tree, which has its own pointers to children, parents, and siblings.\n        // The other host nodes also point back to fibers, so we should detach that\n        // one, too.\n\n        if (fiber.tag === HostComponent) {\n          var hostInstance = fiber.stateNode;\n          if (hostInstance !== null) {\n            detachDeletedInstance(hostInstance);\n          }\n        }\n        fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n        // already disconnect the `return` pointer at the root of the deleted\n        // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n        // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n        // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n        {\n          fiber._debugOwner = null;\n        }\n        {\n          // Theoretically, nothing in here should be necessary, because we already\n          // disconnected the fiber from the tree. So even if something leaks this\n          // particular fiber, it won't leak anything else\n          //\n          // The purpose of this branch is to be super aggressive so we can measure\n          // if there's any difference in memory impact. If there is, that could\n          // indicate a React leak we don't know about.\n          fiber.return = null;\n          fiber.dependencies = null;\n          fiber.memoizedProps = null;\n          fiber.memoizedState = null;\n          fiber.pendingProps = null;\n          fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n          fiber.updateQueue = null;\n        }\n      }\n    }\n    function emptyPortalContainer(current) {\n      if (!supportsPersistence) {\n        return;\n      }\n      var portal = current.stateNode;\n      var containerInfo = portal.containerInfo;\n      var emptyChildSet = createContainerChildSet(containerInfo);\n      replaceContainerChildren(containerInfo, emptyChildSet);\n    }\n    function getHostParentFiber(fiber) {\n      var parent = fiber.return;\n      while (parent !== null) {\n        if (isHostParent(parent)) {\n          return parent;\n        }\n        parent = parent.return;\n      }\n      throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n    }\n    function isHostParent(fiber) {\n      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n    }\n    function getHostSibling(fiber) {\n      // We're going to search forward into the tree until we find a sibling host\n      // node. Unfortunately, if multiple insertions are done in a row we have to\n      // search past them. This leads to exponential search for the next sibling.\n      // TODO: Find a more efficient way to do this.\n      var node = fiber;\n      siblings: while (true) {\n        // If we didn't find anything, let's try the next sibling.\n        while (node.sibling === null) {\n          if (node.return === null || isHostParent(node.return)) {\n            // If we pop out of the root or hit the parent the fiber we are the\n            // last sibling.\n            return null;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n          // If it is not host node and, we might have a host node inside it.\n          // Try to search down until we find one.\n          if (node.flags & Placement) {\n            // If we don't have a child, try the siblings instead.\n            continue siblings;\n          } // If we don't have a child, try the siblings instead.\n          // We also skip portals because they are not part of this host tree.\n\n          if (node.child === null || node.tag === HostPortal) {\n            continue siblings;\n          } else {\n            node.child.return = node;\n            node = node.child;\n          }\n        } // Check if this host node is stable or about to be placed.\n\n        if (!(node.flags & Placement)) {\n          // Found it!\n          return node.stateNode;\n        }\n      }\n    }\n    function commitPlacement(finishedWork) {\n      if (!supportsMutation) {\n        return;\n      } // Recursively insert all host nodes into the parent.\n\n      var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n      switch (parentFiber.tag) {\n        case HostComponent:\n          {\n            var parent = parentFiber.stateNode;\n            if (parentFiber.flags & ContentReset) {\n              // Reset the text content of the parent before doing any insertions\n              resetTextContent(parent); // Clear ContentReset from the effect tag\n\n              parentFiber.flags &= ~ContentReset;\n            }\n            var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n            // children to find all the terminal nodes.\n\n            insertOrAppendPlacementNode(finishedWork, before, parent);\n            break;\n          }\n        case HostRoot:\n        case HostPortal:\n          {\n            var _parent = parentFiber.stateNode.containerInfo;\n            var _before = getHostSibling(finishedWork);\n            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n            break;\n          }\n        // eslint-disable-next-line-no-fallthrough\n\n        default:\n          throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n      }\n    }\n    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n      var tag = node.tag;\n      var isHost = tag === HostComponent || tag === HostText;\n      if (isHost) {\n        var stateNode = node.stateNode;\n        if (before) {\n          insertInContainerBefore(parent, stateNode, before);\n        } else {\n          appendChildToContainer(parent, stateNode);\n        }\n      } else if (tag === HostPortal) ;else {\n        var child = node.child;\n        if (child !== null) {\n          insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n          var sibling = child.sibling;\n          while (sibling !== null) {\n            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n            sibling = sibling.sibling;\n          }\n        }\n      }\n    }\n    function insertOrAppendPlacementNode(node, before, parent) {\n      var tag = node.tag;\n      var isHost = tag === HostComponent || tag === HostText;\n      if (isHost) {\n        var stateNode = node.stateNode;\n        if (before) {\n          insertBefore(parent, stateNode, before);\n        } else {\n          appendChild(parent, stateNode);\n        }\n      } else if (tag === HostPortal) ;else {\n        var child = node.child;\n        if (child !== null) {\n          insertOrAppendPlacementNode(child, before, parent);\n          var sibling = child.sibling;\n          while (sibling !== null) {\n            insertOrAppendPlacementNode(sibling, before, parent);\n            sibling = sibling.sibling;\n          }\n        }\n      }\n    } // These are tracked on the stack as we recursively traverse a\n    // deleted subtree.\n    // TODO: Update these during the whole mutation phase, not just during\n    // a deletion.\n\n    var hostParent = null;\n    var hostParentIsContainer = false;\n    function commitDeletionEffects(root, returnFiber, deletedFiber) {\n      if (supportsMutation) {\n        // We only have the top Fiber that was deleted but we need to recurse down its\n        // children to find all the terminal nodes.\n        // Recursively delete all host nodes from the parent, detach refs, clean\n        // up mounted layout effects, and call componentWillUnmount.\n        // We only need to remove the topmost host child in each branch. But then we\n        // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n        // could split this into two separate traversals functions, where the second\n        // one doesn't include any removeChild logic. This is maybe the same\n        // function as \"disappearLayoutEffects\" (or whatever that turns into after\n        // the layout phase is refactored to use recursion).\n        // Before starting, find the nearest host parent on the stack so we know\n        // which instance/container to remove the children from.\n        // TODO: Instead of searching up the fiber return path on every deletion, we\n        // can track the nearest host component on the JS stack as we traverse the\n        // tree during the commit phase. This would make insertions faster, too.\n        var parent = returnFiber;\n        findParent: while (parent !== null) {\n          switch (parent.tag) {\n            case HostComponent:\n              {\n                hostParent = parent.stateNode;\n                hostParentIsContainer = false;\n                break findParent;\n              }\n            case HostRoot:\n              {\n                hostParent = parent.stateNode.containerInfo;\n                hostParentIsContainer = true;\n                break findParent;\n              }\n            case HostPortal:\n              {\n                hostParent = parent.stateNode.containerInfo;\n                hostParentIsContainer = true;\n                break findParent;\n              }\n          }\n          parent = parent.return;\n        }\n        if (hostParent === null) {\n          throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n        }\n        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n        hostParent = null;\n        hostParentIsContainer = false;\n      } else {\n        // Detach refs and call componentWillUnmount() on the whole subtree.\n        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n      }\n      detachFiberMutation(deletedFiber);\n    }\n    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n      // TODO: Use a static flag to skip trees that don't have unmount effects\n      var child = parent.child;\n      while (child !== null) {\n        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n        child = child.sibling;\n      }\n    }\n    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n      onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n      // into their subtree. There are simpler cases in the inner switch\n      // that don't modify the stack.\n\n      switch (deletedFiber.tag) {\n        case HostComponent:\n          {\n            if (!offscreenSubtreeWasHidden) {\n              safelyDetachRef(deletedFiber, nearestMountedAncestor);\n            } // Intentional fallthrough to next branch\n          }\n        // eslint-disable-next-line-no-fallthrough\n\n        case HostText:\n          {\n            // We only need to remove the nearest host child. Set the host parent\n            // to `null` on the stack to indicate that nested children don't\n            // need to be removed.\n            if (supportsMutation) {\n              var prevHostParent = hostParent;\n              var prevHostParentIsContainer = hostParentIsContainer;\n              hostParent = null;\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              hostParent = prevHostParent;\n              hostParentIsContainer = prevHostParentIsContainer;\n              if (hostParent !== null) {\n                // Now that all the child effects have unmounted, we can remove the\n                // node from the tree.\n                if (hostParentIsContainer) {\n                  removeChildFromContainer(hostParent, deletedFiber.stateNode);\n                } else {\n                  removeChild(hostParent, deletedFiber.stateNode);\n                }\n              }\n            } else {\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            }\n            return;\n          }\n        case DehydratedFragment:\n          {\n            // Delete the dehydrated suspense boundary and all of its content.\n\n            if (supportsMutation) {\n              if (hostParent !== null) {\n                if (hostParentIsContainer) {\n                  clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);\n                } else {\n                  clearSuspenseBoundary(hostParent, deletedFiber.stateNode);\n                }\n              }\n            }\n            return;\n          }\n        case HostPortal:\n          {\n            if (supportsMutation) {\n              // When we go into a portal, it becomes the parent to remove from.\n              var _prevHostParent = hostParent;\n              var _prevHostParentIsContainer = hostParentIsContainer;\n              hostParent = deletedFiber.stateNode.containerInfo;\n              hostParentIsContainer = true;\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              hostParent = _prevHostParent;\n              hostParentIsContainer = _prevHostParentIsContainer;\n            } else {\n              emptyPortalContainer(deletedFiber);\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            }\n            return;\n          }\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            if (!offscreenSubtreeWasHidden) {\n              var updateQueue = deletedFiber.updateQueue;\n              if (updateQueue !== null) {\n                var lastEffect = updateQueue.lastEffect;\n                if (lastEffect !== null) {\n                  var firstEffect = lastEffect.next;\n                  var effect = firstEffect;\n                  do {\n                    var _effect = effect,\n                      destroy = _effect.destroy,\n                      tag = _effect.tag;\n                    if (destroy !== undefined) {\n                      if ((tag & Insertion) !== NoFlags$1) {\n                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                      } else if ((tag & Layout) !== NoFlags$1) {\n                        {\n                          markComponentLayoutEffectUnmountStarted(deletedFiber);\n                        }\n                        if (deletedFiber.mode & ProfileMode) {\n                          startLayoutEffectTimer();\n                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                          recordLayoutEffectDuration(deletedFiber);\n                        } else {\n                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                        }\n                        {\n                          markComponentLayoutEffectUnmountStopped();\n                        }\n                      }\n                    }\n                    effect = effect.next;\n                  } while (effect !== firstEffect);\n                }\n              }\n            }\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n        case ClassComponent:\n          {\n            if (!offscreenSubtreeWasHidden) {\n              safelyDetachRef(deletedFiber, nearestMountedAncestor);\n              var instance = deletedFiber.stateNode;\n              if (typeof instance.componentWillUnmount === 'function') {\n                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n              }\n            }\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n        case ScopeComponent:\n          {\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n        case OffscreenComponent:\n          {\n            if (\n            // TODO: Remove this dead flag\n            deletedFiber.mode & ConcurrentMode) {\n              // If this offscreen component is hidden, we already unmounted it. Before\n              // deleting the children, track that it's already unmounted so that we\n              // don't attempt to unmount the effects again.\n              // TODO: If the tree is hidden, in most cases we should be able to skip\n              // over the nested children entirely. An exception is we haven't yet found\n              // the topmost host node to delete, which we already track on the stack.\n              // But the other case is portals, which need to be detached no matter how\n              // deeply they are nested. We should use a subtree flag to track whether a\n              // subtree includes a nested portal.\n              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n            } else {\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n      }\n    }\n    function commitSuspenseCallback(finishedWork) {\n      // TODO: Move this to passive phase\n      var newState = finishedWork.memoizedState;\n    }\n    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n      if (!supportsHydration) {\n        return;\n      }\n      var newState = finishedWork.memoizedState;\n      if (newState === null) {\n        var current = finishedWork.alternate;\n        if (current !== null) {\n          var prevState = current.memoizedState;\n          if (prevState !== null) {\n            var suspenseInstance = prevState.dehydrated;\n            if (suspenseInstance !== null) {\n              commitHydratedSuspenseInstance(suspenseInstance);\n            }\n          }\n        }\n      }\n    }\n    function attachSuspenseRetryListeners(finishedWork) {\n      // If this boundary just timed out, then it will have a set of wakeables.\n      // For each wakeable, attach a listener so that when it resolves, React\n      // attempts to re-render the boundary in the primary (pre-timeout) state.\n      var wakeables = finishedWork.updateQueue;\n      if (wakeables !== null) {\n        finishedWork.updateQueue = null;\n        var retryCache = finishedWork.stateNode;\n        if (retryCache === null) {\n          retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n        }\n        wakeables.forEach(function (wakeable) {\n          // Memoize using the boundary fiber to prevent redundant listeners.\n          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n          if (!retryCache.has(wakeable)) {\n            retryCache.add(wakeable);\n            {\n              if (isDevToolsPresent) {\n                if (inProgressLanes !== null && inProgressRoot !== null) {\n                  // If we have pending work still, associate the original updaters with it.\n                  restorePendingUpdaters(inProgressRoot, inProgressLanes);\n                } else {\n                  throw Error('Expected finished root and lanes to be set. This is a bug in React.');\n                }\n              }\n            }\n            wakeable.then(retry, retry);\n          }\n        });\n      }\n    } // This function detects when a Suspense boundary goes from visible to hidden.\n    function commitMutationEffects(root, finishedWork, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      setCurrentFiber(finishedWork);\n      commitMutationEffectsOnFiber(finishedWork, root);\n      setCurrentFiber(finishedWork);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n    function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n      // Deletions effects can be scheduled on any fiber type. They need to happen\n      // before the children effects hae fired.\n      var deletions = parentFiber.deletions;\n      if (deletions !== null) {\n        for (var i = 0; i < deletions.length; i++) {\n          var childToDelete = deletions[i];\n          try {\n            commitDeletionEffects(root, parentFiber, childToDelete);\n          } catch (error) {\n            captureCommitPhaseError(childToDelete, parentFiber, error);\n          }\n        }\n      }\n      var prevDebugFiber = getCurrentFiber();\n      if (parentFiber.subtreeFlags & MutationMask) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitMutationEffectsOnFiber(child, root);\n          child = child.sibling;\n        }\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n      // because the fiber tag is more specific. An exception is any flag related\n      // to reconcilation, because those can be set on all fiber types.\n\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Update) {\n              try {\n                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n                commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              } // Layout effects are destroyed during the mutation phase so that all\n              // destroy functions for all fibers are called before any create functions.\n              // This prevents sibling component effects from interfering with each other,\n              // e.g. a destroy function in one component should never override a ref set\n              // by a create function in another component during the same commit.\n\n              if (finishedWork.mode & ProfileMode) {\n                try {\n                  startLayoutEffectTimer();\n                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n                recordLayoutEffectDuration(finishedWork);\n              } else {\n                try {\n                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            return;\n          }\n        case ClassComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Ref) {\n              if (current !== null) {\n                safelyDetachRef(current, current.return);\n              }\n            }\n            return;\n          }\n        case HostComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Ref) {\n              if (current !== null) {\n                safelyDetachRef(current, current.return);\n              }\n            }\n            if (supportsMutation) {\n              // TODO: ContentReset gets cleared by the children during the commit\n              // phase. This is a refactor hazard because it means we must read\n              // flags the flags after `commitReconciliationEffects` has already run;\n              // the order matters. We should refactor so that ContentReset does not\n              // rely on mutating the flag during commit. Like by setting a flag\n              // during the render phase instead.\n              if (finishedWork.flags & ContentReset) {\n                var instance = finishedWork.stateNode;\n                try {\n                  resetTextContent(instance);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n              if (flags & Update) {\n                var _instance4 = finishedWork.stateNode;\n                if (_instance4 != null) {\n                  // Commit the work prepared earlier.\n                  var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n                  // as the newProps. The updatePayload will contain the real change in\n                  // this case.\n\n                  var oldProps = current !== null ? current.memoizedProps : newProps;\n                  var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n                  var updatePayload = finishedWork.updateQueue;\n                  finishedWork.updateQueue = null;\n                  if (updatePayload !== null) {\n                    try {\n                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);\n                    } catch (error) {\n                      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                    }\n                  }\n                }\n              }\n            }\n            return;\n          }\n        case HostText:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Update) {\n              if (supportsMutation) {\n                if (finishedWork.stateNode === null) {\n                  throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                }\n                var textInstance = finishedWork.stateNode;\n                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n                // as the newProps. The updatePayload will contain the real change in\n                // this case.\n\n                var oldText = current !== null ? current.memoizedProps : newText;\n                try {\n                  commitTextUpdate(textInstance, oldText, newText);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            return;\n          }\n        case HostRoot:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Update) {\n              if (supportsMutation && supportsHydration) {\n                if (current !== null) {\n                  var prevRootState = current.memoizedState;\n                  if (prevRootState.isDehydrated) {\n                    try {\n                      commitHydratedContainer(root.containerInfo);\n                    } catch (error) {\n                      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                    }\n                  }\n                }\n              }\n              if (supportsPersistence) {\n                var containerInfo = root.containerInfo;\n                var pendingChildren = root.pendingChildren;\n                try {\n                  replaceContainerChildren(containerInfo, pendingChildren);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            return;\n          }\n        case HostPortal:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Update) {\n              if (supportsPersistence) {\n                var portal = finishedWork.stateNode;\n                var _containerInfo = portal.containerInfo;\n                var _pendingChildren = portal.pendingChildren;\n                try {\n                  replaceContainerChildren(_containerInfo, _pendingChildren);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            return;\n          }\n        case SuspenseComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            var offscreenFiber = finishedWork.child;\n            if (offscreenFiber.flags & Visibility) {\n              var offscreenInstance = offscreenFiber.stateNode;\n              var newState = offscreenFiber.memoizedState;\n              var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can\n              // read it during an event\n\n              offscreenInstance.isHidden = isHidden;\n              if (isHidden) {\n                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;\n                if (!wasHidden) {\n                  // TODO: Move to passive phase\n                  markCommitTimeOfFallback();\n                }\n              }\n            }\n            if (flags & Update) {\n              try {\n                commitSuspenseCallback(finishedWork);\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n              attachSuspenseRetryListeners(finishedWork);\n            }\n            return;\n          }\n        case OffscreenComponent:\n          {\n            var _wasHidden = current !== null && current.memoizedState !== null;\n            if (\n            // TODO: Remove this dead flag\n            finishedWork.mode & ConcurrentMode) {\n              // Before committing the children, track on the stack whether this\n              // offscreen subtree was already hidden, so that we don't unmount the\n              // effects again.\n              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n            } else {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n            }\n            commitReconciliationEffects(finishedWork);\n            if (flags & Visibility) {\n              var _offscreenInstance = finishedWork.stateNode;\n              var _newState = finishedWork.memoizedState;\n              var _isHidden = _newState !== null;\n              var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can\n              // read it during an event\n\n              _offscreenInstance.isHidden = _isHidden;\n              {\n                if (_isHidden) {\n                  if (!_wasHidden) {\n                    if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                      nextEffect = offscreenBoundary;\n                      var offscreenChild = offscreenBoundary.child;\n                      while (offscreenChild !== null) {\n                        nextEffect = offscreenChild;\n                        disappearLayoutEffects_begin(offscreenChild);\n                        offscreenChild = offscreenChild.sibling;\n                      }\n                    }\n                  }\n                }\n              }\n              if (supportsMutation) {\n                // TODO: This needs to run whenever there's an insertion or update\n                // inside a hidden Offscreen tree.\n                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n              }\n            }\n            return;\n          }\n        case SuspenseListComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Update) {\n              attachSuspenseRetryListeners(finishedWork);\n            }\n            return;\n          }\n        case ScopeComponent:\n          {\n            return;\n          }\n        default:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            return;\n          }\n      }\n    }\n    function commitReconciliationEffects(finishedWork) {\n      // Placement effects (insertions, reorders) can be scheduled on any fiber\n      // type. They needs to happen after the children effects have fired, but\n      // before the effects on this fiber have fired.\n      var flags = finishedWork.flags;\n      if (flags & Placement) {\n        try {\n          commitPlacement(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        } // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        // TODO: findDOMNode doesn't rely on this any more but isMounted does\n        // and isMounted is deprecated anyway so we should be able to kill this.\n\n        finishedWork.flags &= ~Placement;\n      }\n      if (flags & Hydrating) {\n        finishedWork.flags &= ~Hydrating;\n      }\n    }\n    function commitLayoutEffects(finishedWork, root, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      nextEffect = finishedWork;\n      commitLayoutEffects_begin(finishedWork, root, committedLanes);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n      // Suspense layout effects semantics don't change for legacy roots.\n      var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var firstChild = fiber.child;\n        if (fiber.tag === OffscreenComponent && isModernRoot) {\n          // Keep track of the current Offscreen stack's state.\n          var isHidden = fiber.memoizedState !== null;\n          var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n          if (newOffscreenSubtreeIsHidden) {\n            // The Offscreen tree is hidden. Skip over its layout effects.\n            commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n            continue;\n          } else {\n            // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n            var current = fiber.alternate;\n            var wasHidden = current !== null && current.memoizedState !== null;\n            var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\n\n            offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n            offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n            if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n              // This is the root of a reappearing boundary. Turn its layout effects\n              // back on.\n              nextEffect = fiber;\n              reappearLayoutEffects_begin(fiber);\n            }\n            var child = firstChild;\n            while (child !== null) {\n              nextEffect = child;\n              commitLayoutEffects_begin(child,\n              // New root; bubble back up to here and stop.\n              root, committedLanes);\n              child = child.sibling;\n            } // Restore Offscreen state and resume in our-progress traversal.\n\n            nextEffect = fiber;\n            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n            commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n            continue;\n          }\n        }\n        if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n          firstChild.return = fiber;\n          nextEffect = firstChild;\n        } else {\n          commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        }\n      }\n    }\n    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        if ((fiber.flags & LayoutMask) !== NoFlags) {\n          var current = fiber.alternate;\n          setCurrentFiber(fiber);\n          try {\n            commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n          resetCurrentFiber();\n        }\n        if (fiber === subtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n        var sibling = fiber.sibling;\n        if (sibling !== null) {\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = fiber.return;\n      }\n    }\n    function disappearLayoutEffects_begin(subtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              if (fiber.mode & ProfileMode) {\n                try {\n                  startLayoutEffectTimer();\n                  commitHookEffectListUnmount(Layout, fiber, fiber.return);\n                } finally {\n                  recordLayoutEffectDuration(fiber);\n                }\n              } else {\n                commitHookEffectListUnmount(Layout, fiber, fiber.return);\n              }\n              break;\n            }\n          case ClassComponent:\n            {\n              // TODO (Offscreen) Check: flags & RefStatic\n              safelyDetachRef(fiber, fiber.return);\n              var instance = fiber.stateNode;\n              if (typeof instance.componentWillUnmount === 'function') {\n                safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n              }\n              break;\n            }\n          case HostComponent:\n            {\n              safelyDetachRef(fiber, fiber.return);\n              break;\n            }\n          case OffscreenComponent:\n            {\n              // Check if this is a\n              var isHidden = fiber.memoizedState !== null;\n              if (isHidden) {\n                // Nested Offscreen tree is already hidden. Don't disappear\n                // its effects.\n                disappearLayoutEffects_complete(subtreeRoot);\n                continue;\n              }\n              break;\n            }\n        } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n        if (firstChild !== null) {\n          firstChild.return = fiber;\n          nextEffect = firstChild;\n        } else {\n          disappearLayoutEffects_complete(subtreeRoot);\n        }\n      }\n    }\n    function disappearLayoutEffects_complete(subtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        if (fiber === subtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n        var sibling = fiber.sibling;\n        if (sibling !== null) {\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = fiber.return;\n      }\n    }\n    function reappearLayoutEffects_begin(subtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var firstChild = fiber.child;\n        if (fiber.tag === OffscreenComponent) {\n          var isHidden = fiber.memoizedState !== null;\n          if (isHidden) {\n            // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n            reappearLayoutEffects_complete(subtreeRoot);\n            continue;\n          }\n        } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n        if (firstChild !== null) {\n          // This node may have been reused from a previous render, so we can't\n          // assume its return pointer is correct.\n          firstChild.return = fiber;\n          nextEffect = firstChild;\n        } else {\n          reappearLayoutEffects_complete(subtreeRoot);\n        }\n      }\n    }\n    function reappearLayoutEffects_complete(subtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\n\n        setCurrentFiber(fiber);\n        try {\n          reappearLayoutEffectsOnFiber(fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        resetCurrentFiber();\n        if (fiber === subtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n        var sibling = fiber.sibling;\n        if (sibling !== null) {\n          // This node may have been reused from a previous render, so we can't\n          // assume its return pointer is correct.\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = fiber.return;\n      }\n    }\n    function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n      nextEffect = finishedWork;\n      commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);\n    }\n    function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var firstChild = fiber.child;\n        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n          firstChild.return = fiber;\n          nextEffect = firstChild;\n        } else {\n          commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);\n        }\n      }\n    }\n    function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        if ((fiber.flags & Passive) !== NoFlags) {\n          setCurrentFiber(fiber);\n          try {\n            commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n          resetCurrentFiber();\n        }\n        if (fiber === subtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n        var sibling = fiber.sibling;\n        if (sibling !== null) {\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = fiber.return;\n      }\n    }\n    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (finishedWork.mode & ProfileMode) {\n              startPassiveEffectTimer();\n              try {\n                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n              } finally {\n                recordPassiveEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n            }\n            break;\n          }\n      }\n    }\n    function commitPassiveUnmountEffects(firstChild) {\n      nextEffect = firstChild;\n      commitPassiveUnmountEffects_begin();\n    }\n    function commitPassiveUnmountEffects_begin() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var child = fiber.child;\n        if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n          var deletions = fiber.deletions;\n          if (deletions !== null) {\n            for (var i = 0; i < deletions.length; i++) {\n              var fiberToDelete = deletions[i];\n              nextEffect = fiberToDelete;\n              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n            }\n            {\n              // A fiber was deleted from this parent fiber, but it's still part of\n              // the previous (alternate) parent fiber's list of children. Because\n              // children are a linked list, an earlier sibling that's still alive\n              // will be connected to the deleted fiber via its `alternate`:\n              //\n              //   live fiber\n              //   --alternate--> previous live fiber\n              //   --sibling--> deleted fiber\n              //\n              // We can't disconnect `alternate` on nodes that haven't been deleted\n              // yet, but we can disconnect the `sibling` and `child` pointers.\n              var previousFiber = fiber.alternate;\n              if (previousFiber !== null) {\n                var detachedChild = previousFiber.child;\n                if (detachedChild !== null) {\n                  previousFiber.child = null;\n                  do {\n                    var detachedSibling = detachedChild.sibling;\n                    detachedChild.sibling = null;\n                    detachedChild = detachedSibling;\n                  } while (detachedChild !== null);\n                }\n              }\n            }\n            nextEffect = fiber;\n          }\n        }\n        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitPassiveUnmountEffects_complete();\n        }\n      }\n    }\n    function commitPassiveUnmountEffects_complete() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        if ((fiber.flags & Passive) !== NoFlags) {\n          setCurrentFiber(fiber);\n          commitPassiveUnmountOnFiber(fiber);\n          resetCurrentFiber();\n        }\n        var sibling = fiber.sibling;\n        if (sibling !== null) {\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = fiber.return;\n      }\n    }\n    function commitPassiveUnmountOnFiber(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (finishedWork.mode & ProfileMode) {\n              startPassiveEffectTimer();\n              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n              recordPassiveEffectDuration(finishedWork);\n            } else {\n              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n            }\n            break;\n          }\n      }\n    }\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // Deletion effects fire in parent -> child order\n        // TODO: Check if fiber has a PassiveStatic flag\n\n        setCurrentFiber(fiber);\n        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n        resetCurrentFiber();\n        var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n        // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n        if (child !== null) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n        }\n      }\n    }\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var sibling = fiber.sibling;\n        var returnFiber = fiber.return;\n        {\n          // Recursively traverse the entire deleted tree and clean up fiber fields.\n          // This is more aggressive than ideal, and the long term goal is to only\n          // have to detach the deleted tree at the root.\n          detachFiberAfterEffects(fiber);\n          if (fiber === deletedSubtreeRoot) {\n            nextEffect = null;\n            return;\n          }\n        }\n        if (sibling !== null) {\n          sibling.return = returnFiber;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = returnFiber;\n      }\n    }\n    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n      switch (current.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (current.mode & ProfileMode) {\n              startPassiveEffectTimer();\n              commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n              recordPassiveEffectDuration(current);\n            } else {\n              commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n            }\n            break;\n          }\n      }\n    } // TODO: Reuse reappearLayoutEffects traversal here?\n\n    function invokeLayoutEffectMountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListMount(Layout | HasEffect, fiber);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n              break;\n            }\n          case ClassComponent:\n            {\n              var instance = fiber.stateNode;\n              try {\n                instance.componentDidMount();\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n              break;\n            }\n        }\n      }\n    }\n    function invokePassiveEffectMountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListMount(Passive$1 | HasEffect, fiber);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n              break;\n            }\n        }\n      }\n    }\n    function invokeLayoutEffectUnmountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n              break;\n            }\n          case ClassComponent:\n            {\n              var instance = fiber.stateNode;\n              if (typeof instance.componentWillUnmount === 'function') {\n                safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n              }\n              break;\n            }\n        }\n      }\n    }\n    function invokePassiveEffectUnmountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n            }\n        }\n      }\n    }\n    var COMPONENT_TYPE = 0;\n    var HAS_PSEUDO_CLASS_TYPE = 1;\n    var ROLE_TYPE = 2;\n    var TEST_NAME_TYPE = 3;\n    var TEXT_TYPE = 4;\n    if (typeof Symbol === 'function' && Symbol.for) {\n      var symbolFor = Symbol.for;\n      COMPONENT_TYPE = symbolFor('selector.component');\n      HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n      ROLE_TYPE = symbolFor('selector.role');\n      TEST_NAME_TYPE = symbolFor('selector.test_id');\n      TEXT_TYPE = symbolFor('selector.text');\n    }\n    function createComponentSelector(component) {\n      return {\n        $$typeof: COMPONENT_TYPE,\n        value: component\n      };\n    }\n    function createHasPseudoClassSelector(selectors) {\n      return {\n        $$typeof: HAS_PSEUDO_CLASS_TYPE,\n        value: selectors\n      };\n    }\n    function createRoleSelector(role) {\n      return {\n        $$typeof: ROLE_TYPE,\n        value: role\n      };\n    }\n    function createTextSelector(text) {\n      return {\n        $$typeof: TEXT_TYPE,\n        value: text\n      };\n    }\n    function createTestNameSelector(id) {\n      return {\n        $$typeof: TEST_NAME_TYPE,\n        value: id\n      };\n    }\n    function findFiberRootForHostRoot(hostRoot) {\n      var maybeFiber = getInstanceFromNode(hostRoot);\n      if (maybeFiber != null) {\n        if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n          throw new Error('Invalid host root specified. Should be either a React container or a node with a testname attribute.');\n        }\n        return maybeFiber;\n      } else {\n        var fiberRoot = findFiberRoot(hostRoot);\n        if (fiberRoot === null) {\n          throw new Error('Could not find React container within specified host subtree.');\n        } // The Flow type for FiberRoot is a little funky.\n        // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n\n        return fiberRoot.stateNode.current;\n      }\n    }\n    function matchSelector(fiber, selector) {\n      switch (selector.$$typeof) {\n        case COMPONENT_TYPE:\n          if (fiber.type === selector.value) {\n            return true;\n          }\n          break;\n        case HAS_PSEUDO_CLASS_TYPE:\n          return hasMatchingPaths(fiber, selector.value);\n        case ROLE_TYPE:\n          if (fiber.tag === HostComponent) {\n            var node = fiber.stateNode;\n            if (matchAccessibilityRole(node, selector.value)) {\n              return true;\n            }\n          }\n          break;\n        case TEXT_TYPE:\n          if (fiber.tag === HostComponent || fiber.tag === HostText) {\n            var textContent = getTextContent(fiber);\n            if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n              return true;\n            }\n          }\n          break;\n        case TEST_NAME_TYPE:\n          if (fiber.tag === HostComponent) {\n            var dataTestID = fiber.memoizedProps['data-testname'];\n            if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n              return true;\n            }\n          }\n          break;\n        default:\n          throw new Error('Invalid selector type specified.');\n      }\n      return false;\n    }\n    function selectorToString(selector) {\n      switch (selector.$$typeof) {\n        case COMPONENT_TYPE:\n          var displayName = getComponentNameFromType(selector.value) || 'Unknown';\n          return \"<\" + displayName + \">\";\n        case HAS_PSEUDO_CLASS_TYPE:\n          return \":has(\" + (selectorToString(selector) || '') + \")\";\n        case ROLE_TYPE:\n          return \"[role=\\\"\" + selector.value + \"\\\"]\";\n        case TEXT_TYPE:\n          return \"\\\"\" + selector.value + \"\\\"\";\n        case TEST_NAME_TYPE:\n          return \"[data-testname=\\\"\" + selector.value + \"\\\"]\";\n        default:\n          throw new Error('Invalid selector type specified.');\n      }\n    }\n    function findPaths(root, selectors) {\n      var matchingFibers = [];\n      var stack = [root, 0];\n      var index = 0;\n      while (index < stack.length) {\n        var fiber = stack[index++];\n        var selectorIndex = stack[index++];\n        var selector = selectors[selectorIndex];\n        if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n          continue;\n        } else {\n          while (selector != null && matchSelector(fiber, selector)) {\n            selectorIndex++;\n            selector = selectors[selectorIndex];\n          }\n        }\n        if (selectorIndex === selectors.length) {\n          matchingFibers.push(fiber);\n        } else {\n          var child = fiber.child;\n          while (child !== null) {\n            stack.push(child, selectorIndex);\n            child = child.sibling;\n          }\n        }\n      }\n      return matchingFibers;\n    } // Same as findPaths but with eager bailout on first match\n\n    function hasMatchingPaths(root, selectors) {\n      var stack = [root, 0];\n      var index = 0;\n      while (index < stack.length) {\n        var fiber = stack[index++];\n        var selectorIndex = stack[index++];\n        var selector = selectors[selectorIndex];\n        if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n          continue;\n        } else {\n          while (selector != null && matchSelector(fiber, selector)) {\n            selectorIndex++;\n            selector = selectors[selectorIndex];\n          }\n        }\n        if (selectorIndex === selectors.length) {\n          return true;\n        } else {\n          var child = fiber.child;\n          while (child !== null) {\n            stack.push(child, selectorIndex);\n            child = child.sibling;\n          }\n        }\n      }\n      return false;\n    }\n    function findAllNodes(hostRoot, selectors) {\n      if (!supportsTestSelectors) {\n        throw new Error('Test selector API is not supported by this renderer.');\n      }\n      var root = findFiberRootForHostRoot(hostRoot);\n      var matchingFibers = findPaths(root, selectors);\n      var instanceRoots = [];\n      var stack = Array.from(matchingFibers);\n      var index = 0;\n      while (index < stack.length) {\n        var node = stack[index++];\n        if (node.tag === HostComponent) {\n          if (isHiddenSubtree(node)) {\n            continue;\n          }\n          instanceRoots.push(node.stateNode);\n        } else {\n          var child = node.child;\n          while (child !== null) {\n            stack.push(child);\n            child = child.sibling;\n          }\n        }\n      }\n      return instanceRoots;\n    }\n    function getFindAllNodesFailureDescription(hostRoot, selectors) {\n      if (!supportsTestSelectors) {\n        throw new Error('Test selector API is not supported by this renderer.');\n      }\n      var root = findFiberRootForHostRoot(hostRoot);\n      var maxSelectorIndex = 0;\n      var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n\n      var stack = [root, 0];\n      var index = 0;\n      while (index < stack.length) {\n        var fiber = stack[index++];\n        var selectorIndex = stack[index++];\n        var selector = selectors[selectorIndex];\n        if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n          continue;\n        } else if (matchSelector(fiber, selector)) {\n          matchedNames.push(selectorToString(selector));\n          selectorIndex++;\n          if (selectorIndex > maxSelectorIndex) {\n            maxSelectorIndex = selectorIndex;\n          }\n        }\n        if (selectorIndex < selectors.length) {\n          var child = fiber.child;\n          while (child !== null) {\n            stack.push(child, selectorIndex);\n            child = child.sibling;\n          }\n        }\n      }\n      if (maxSelectorIndex < selectors.length) {\n        var unmatchedNames = [];\n        for (var i = maxSelectorIndex; i < selectors.length; i++) {\n          unmatchedNames.push(selectorToString(selectors[i]));\n        }\n        return 'findAllNodes was able to match part of the selector:\\n' + (\"  \" + matchedNames.join(' > ') + \"\\n\\n\") + 'No matching component was found for:\\n' + (\"  \" + unmatchedNames.join(' > '));\n      }\n      return null;\n    }\n    function findBoundingRects(hostRoot, selectors) {\n      if (!supportsTestSelectors) {\n        throw new Error('Test selector API is not supported by this renderer.');\n      }\n      var instanceRoots = findAllNodes(hostRoot, selectors);\n      var boundingRects = [];\n      for (var i = 0; i < instanceRoots.length; i++) {\n        boundingRects.push(getBoundingRect(instanceRoots[i]));\n      }\n      for (var _i = boundingRects.length - 1; _i > 0; _i--) {\n        var targetRect = boundingRects[_i];\n        var targetLeft = targetRect.x;\n        var targetRight = targetLeft + targetRect.width;\n        var targetTop = targetRect.y;\n        var targetBottom = targetTop + targetRect.height;\n        for (var j = _i - 1; j >= 0; j--) {\n          if (_i !== j) {\n            var otherRect = boundingRects[j];\n            var otherLeft = otherRect.x;\n            var otherRight = otherLeft + otherRect.width;\n            var otherTop = otherRect.y;\n            var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n            // but we can handle the most common cases:\n            // 1. completely overlapping rects\n            // 2. adjacent rects that are the same width or height (e.g. items in a list)\n            //\n            // Even given the above constraints,\n            // we still won't end up with the fewest possible rects without doing multiple passes,\n            // but it's good enough for this purpose.\n\n            if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n              // Complete overlapping rects; remove the inner one.\n              boundingRects.splice(_i, 1);\n              break;\n            } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n              // Adjacent vertical rects; merge them.\n              if (otherTop > targetTop) {\n                otherRect.height += otherTop - targetTop;\n                otherRect.y = targetTop;\n              }\n              if (otherBottom < targetBottom) {\n                otherRect.height = targetBottom - otherTop;\n              }\n              boundingRects.splice(_i, 1);\n              break;\n            } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n              // Adjacent horizontal rects; merge them.\n              if (otherLeft > targetLeft) {\n                otherRect.width += otherLeft - targetLeft;\n                otherRect.x = targetLeft;\n              }\n              if (otherRight < targetRight) {\n                otherRect.width = targetRight - otherLeft;\n              }\n              boundingRects.splice(_i, 1);\n              break;\n            }\n          }\n        }\n      }\n      return boundingRects;\n    }\n    function focusWithin(hostRoot, selectors) {\n      if (!supportsTestSelectors) {\n        throw new Error('Test selector API is not supported by this renderer.');\n      }\n      var root = findFiberRootForHostRoot(hostRoot);\n      var matchingFibers = findPaths(root, selectors);\n      var stack = Array.from(matchingFibers);\n      var index = 0;\n      while (index < stack.length) {\n        var fiber = stack[index++];\n        if (isHiddenSubtree(fiber)) {\n          continue;\n        }\n        if (fiber.tag === HostComponent) {\n          var node = fiber.stateNode;\n          if (setFocusIfFocusable(node)) {\n            return true;\n          }\n        }\n        var child = fiber.child;\n        while (child !== null) {\n          stack.push(child);\n          child = child.sibling;\n        }\n      }\n      return false;\n    }\n    var commitHooks = [];\n    function onCommitRoot$1() {\n      if (supportsTestSelectors) {\n        commitHooks.forEach(function (commitHook) {\n          return commitHook();\n        });\n      }\n    }\n    function observeVisibleRects(hostRoot, selectors, callback, options) {\n      if (!supportsTestSelectors) {\n        throw new Error('Test selector API is not supported by this renderer.');\n      }\n      var instanceRoots = findAllNodes(hostRoot, selectors);\n      var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),\n        disconnect = _setupIntersectionObs.disconnect,\n        observe = _setupIntersectionObs.observe,\n        unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n\n      var commitHook = function () {\n        var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n        instanceRoots.forEach(function (target) {\n          if (nextInstanceRoots.indexOf(target) < 0) {\n            unobserve(target);\n          }\n        });\n        nextInstanceRoots.forEach(function (target) {\n          if (instanceRoots.indexOf(target) < 0) {\n            observe(target);\n          }\n        });\n      };\n      commitHooks.push(commitHook);\n      return {\n        disconnect: function () {\n          // Stop listening for React mutations:\n          var index = commitHooks.indexOf(commitHook);\n          if (index >= 0) {\n            commitHooks.splice(index, 1);\n          } // Disconnect the host observer:\n\n          disconnect();\n        }\n      };\n    }\n    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n    function isLegacyActEnvironment(fiber) {\n      {\n        // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n        // act environment whenever `jest` is defined, but you can still turn off\n        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n        // to false.\n        var isReactActEnvironmentGlobal =\n        // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n        typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n        var jestIsDefined = typeof jest !== 'undefined';\n        return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;\n      }\n    }\n    function isConcurrentActEnvironment() {\n      {\n        var isReactActEnvironmentGlobal =\n        // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n        typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n          // TODO: Include link to relevant documentation page.\n          error('The current testing environment is not configured to support ' + 'act(...)');\n        }\n        return isReactActEnvironmentGlobal;\n      }\n    }\n    var ceil = Math.ceil;\n    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n      ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,\n      ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n    var NoContext = /*             */\n    0;\n    var BatchedContext = /*               */\n    1;\n    var RenderContext = /*                */\n    2;\n    var CommitContext = /*                */\n    4;\n    var RootInProgress = 0;\n    var RootFatalErrored = 1;\n    var RootErrored = 2;\n    var RootSuspended = 3;\n    var RootSuspendedWithDelay = 4;\n    var RootCompleted = 5;\n    var RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\n    var executionContext = NoContext; // The root we're working on\n\n    var workInProgressRoot = null; // The fiber we're working on\n\n    var workInProgress = null; // The lanes we're rendering\n\n    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n    // This is a superset of the lanes we started working on at the root. The only\n    // case where it's different from `workInProgressRootRenderLanes` is when we\n    // enter a subtree that is hidden and needs to be unhidden: Suspense and\n    // Offscreen component.\n    //\n    // Most things in the work loop should deal with workInProgressRootRenderLanes.\n    // Most things in begin/complete phases should deal with subtreeRenderLanes.\n\n    var subtreeRenderLanes = NoLanes;\n    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\n    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\n    var workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n    // slightly different than `renderLanes` because `renderLanes` can change as you\n    // enter and exit an Offscreen tree. This value is the combination of all render\n    // lanes for the entire render phase.\n\n    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\n    // includes unprocessed updates, not work in bailed out children.\n\n    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\n    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\n    var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\n    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n    // We will log them once the tree commits.\n\n    var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n    // model where we don't commit new loading states in too quick succession.\n\n    var globalMostRecentFallbackTime = 0;\n    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n    // more and prefer CPU suspense heuristics instead.\n\n    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n    // suspense heuristics and opt out of rendering more content.\n\n    var RENDER_TIMEOUT_MS = 500;\n    var workInProgressTransitions = null;\n    function resetRenderTimer() {\n      workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n    }\n    function getRenderTargetTime() {\n      return workInProgressRootRenderTargetTime;\n    }\n    var hasUncaughtError = false;\n    var firstUncaughtError = null;\n    var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\n    var rootDoesHavePassiveEffects = false;\n    var rootWithPendingPassiveEffects = null;\n    var pendingPassiveEffectsLanes = NoLanes;\n    var pendingPassiveProfilerEffects = [];\n    var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates\n\n    var NESTED_UPDATE_LIMIT = 50;\n    var nestedUpdateCount = 0;\n    var rootWithNestedUpdates = null;\n    var isFlushingPassiveEffects = false;\n    var didScheduleUpdateDuringPassiveEffects = false;\n    var NESTED_PASSIVE_UPDATE_LIMIT = 50;\n    var nestedPassiveUpdateCount = 0;\n    var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their\n    // event times as simultaneous, even if the actual clock time has advanced\n    // between the first and second call.\n\n    var currentEventTime = NoTimestamp;\n    var currentEventTransitionLane = NoLanes;\n    var isRunningInsertionEffect = false;\n    function getWorkInProgressRoot() {\n      return workInProgressRoot;\n    }\n    function requestEventTime() {\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        // We're inside React, so it's fine to read the actual time.\n        return now();\n      } // We're not inside React, so we may be in the middle of a browser event.\n\n      if (currentEventTime !== NoTimestamp) {\n        // Use the same start time for all updates until we enter React again.\n        return currentEventTime;\n      } // This is the first update since React yielded. Compute a new start time.\n\n      currentEventTime = now();\n      return currentEventTime;\n    }\n    function requestUpdateLane(fiber) {\n      // Special cases\n      var mode = fiber.mode;\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n        // This is a render phase update. These are not officially supported. The\n        // old behavior is to give this the same \"thread\" (lanes) as\n        // whatever is currently rendering. So if you call `setState` on a component\n        // that happens later in the same render, it will flush. Ideally, we want to\n        // remove the special case and treat them as if they came from an\n        // interleaved event. Regardless, this pattern is not officially supported.\n        // This behavior is only a fallback. The flag only exists until we can roll\n        // out the setState warning, since existing code might accidentally rely on\n        // the current behavior.\n        return pickArbitraryLane(workInProgressRootRenderLanes);\n      }\n      var isTransition = requestCurrentTransition() !== NoTransition;\n      if (isTransition) {\n        if (ReactCurrentBatchConfig$2.transition !== null) {\n          var transition = ReactCurrentBatchConfig$2.transition;\n          if (!transition._updatedFibers) {\n            transition._updatedFibers = new Set();\n          }\n          transition._updatedFibers.add(fiber);\n        } // The algorithm for assigning an update to a lane should be stable for all\n        // updates at the same priority within the same event. To do this, the\n        // inputs to the algorithm must be the same.\n        //\n        // The trick we use is to cache the first of each of these inputs within an\n        // event. Then reset the cached values once we can be sure the event is\n        // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n        if (currentEventTransitionLane === NoLane) {\n          // All transitions within the same event are assigned the same lane.\n          currentEventTransitionLane = claimNextTransitionLane();\n        }\n        return currentEventTransitionLane;\n      } // Updates originating inside certain React methods, like flushSync, have\n      // their priority set by tracking it with a context variable.\n      //\n      // The opaque type returned by the host config is internally a lane, so we can\n      // use that directly.\n      // TODO: Move this type conversion to the event priority module.\n\n      var updateLane = getCurrentUpdatePriority();\n      if (updateLane !== NoLane) {\n        return updateLane;\n      } // This update originated outside React. Ask the host environment for an\n      // appropriate priority, based on the type of event.\n      //\n      // The opaque type returned by the host config is internally a lane, so we can\n      // use that directly.\n      // TODO: Move this type conversion to the event priority module.\n\n      var eventLane = getCurrentEventPriority();\n      return eventLane;\n    }\n    function requestRetryLane(fiber) {\n      // This is a fork of `requestUpdateLane` designed specifically for Suspense\n      // \"retries\" — a special update that attempts to flip a Suspense boundary\n      // from its placeholder state to its primary/resolved state.\n      // Special cases\n      var mode = fiber.mode;\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      }\n      return claimNextRetryLane();\n    }\n    function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {\n      checkForNestedUpdates();\n      {\n        if (isRunningInsertionEffect) {\n          error('useInsertionEffect must not schedule updates.');\n        }\n      }\n      {\n        if (isFlushingPassiveEffects) {\n          didScheduleUpdateDuringPassiveEffects = true;\n        }\n      } // Mark that the root has a pending update.\n\n      markRootUpdated(root, lane, eventTime);\n      if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n        // This update was dispatched during the render phase. This is a mistake\n        // if the update originates from user space (with the exception of local\n        // hook updates, which are handled differently and don't reach this\n        // function), but there are some internal React features that use this as\n        // an implementation detail, like selective hydration.\n        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n      } else {\n        // This is a normal update, scheduled from outside the render phase. For\n        // example, during an input event.\n        {\n          if (isDevToolsPresent) {\n            addFiberToLanesMap(root, fiber, lane);\n          }\n        }\n        warnIfUpdatesNotWrappedWithActDEV(fiber);\n        if (root === workInProgressRoot) {\n          // Received an update to a tree that's in the middle of rendering. Mark\n          // that there was an interleaved update work on this root. Unless the\n          // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n          // phase update. In that case, we don't treat render phase updates as if\n          // they were interleaved, for backwards compat reasons.\n          if ((executionContext & RenderContext) === NoContext) {\n            workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n          }\n          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n            // The root already suspended with a delay, which means this render\n            // definitely won't finish. Since we have a new update, let's mark it as\n            // suspended now, right before marking the incoming update. This has the\n            // effect of interrupting the current render and switching to the update.\n            // TODO: Make sure this doesn't override pings that happen while we've\n            // already started rendering.\n            markRootSuspended$1(root, workInProgressRootRenderLanes);\n          }\n        }\n        ensureRootIsScheduled(root, eventTime);\n        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode &&\n        // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n        !ReactCurrentActQueue$1.isBatchingLegacy) {\n          // Flush the synchronous work now, unless we're already working or inside\n          // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n          // scheduleCallbackForFiber to preserve the ability to schedule a callback\n          // without immediately flushing it. We only do this for user-initiated\n          // updates, to preserve historical behavior of legacy mode.\n          resetRenderTimer();\n          flushSyncCallbacksOnlyInLegacyMode();\n        }\n      }\n    }\n    function scheduleInitialHydrationOnRoot(root, lane, eventTime) {\n      // This is a special fork of scheduleUpdateOnFiber that is only used to\n      // schedule the initial hydration of a root that has just been created. Most\n      // of the stuff in scheduleUpdateOnFiber can be skipped.\n      //\n      // The main reason for this separate path, though, is to distinguish the\n      // initial children from subsequent updates. In fully client-rendered roots\n      // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n      // updates, but hydration roots are special because the initial render must\n      // match what was rendered on the server.\n      var current = root.current;\n      current.lanes = lane;\n      markRootUpdated(root, lane, eventTime);\n      ensureRootIsScheduled(root, eventTime);\n    }\n    function isUnsafeClassRenderPhaseUpdate(fiber) {\n      // Check if this is a render phase update. Only called by class components,\n      // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n      return (\n        // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n        // decided not to enable it.\n        (executionContext & RenderContext) !== NoContext\n      );\n    } // Use this function to schedule a task for a root. There's only one task per\n    // root; if a task was already scheduled, we'll check to make sure the priority\n    // of the existing task is the same as the priority of the next level that the\n    // root has work on. This function is called on every update, and right before\n    // exiting a task.\n\n    function ensureRootIsScheduled(root, currentTime) {\n      var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n      // expired so we know to work on those next.\n\n      markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n      var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n      if (nextLanes === NoLanes) {\n        // Special case: There's nothing to work on.\n        if (existingCallbackNode !== null) {\n          cancelCallback$1(existingCallbackNode);\n        }\n        root.callbackNode = null;\n        root.callbackPriority = NoLane;\n        return;\n      } // We use the highest priority lane to represent the priority of the callback.\n\n      var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n      var existingCallbackPriority = root.callbackPriority;\n      if (existingCallbackPriority === newCallbackPriority &&\n      // Special case related to `act`. If the currently scheduled task is a\n      // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n      // on the `act` queue.\n      !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n        {\n          // If we're going to re-use an existing task, it needs to exist.\n          // Assume that discrete update microtasks are non-cancellable and null.\n          // TODO: Temporary until we confirm this warning is not fired.\n          if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n            error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n          }\n        } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n        return;\n      }\n      if (existingCallbackNode != null) {\n        // Cancel the existing callback. We'll schedule a new one below.\n        cancelCallback$1(existingCallbackNode);\n      } // Schedule a new callback.\n\n      var newCallbackNode;\n      if (newCallbackPriority === SyncLane) {\n        // Special case: Sync React callbacks are scheduled on a special\n        // internal queue\n        if (root.tag === LegacyRoot) {\n          if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n            ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n          }\n          scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n        } else {\n          scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n        }\n        if (supportsMicrotasks) {\n          // Flush the queue in a microtask.\n          if (ReactCurrentActQueue$1.current !== null) {\n            // Inside `act`, use our internal `act` queue so that these get flushed\n            // at the end of the current scope even when using the sync version\n            // of `act`.\n            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\n          } else {\n            scheduleMicrotask(function () {\n              // In Safari, appending an iframe forces microtasks to run.\n              // https://github.com/facebook/react/issues/22459\n              // We don't support running callbacks in the middle of render\n              // or commit so we need to check against that.\n              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n                // Note that this would still prematurely flush the callbacks\n                // if this happens outside render or commit phase (e.g. in an event).\n                flushSyncCallbacks();\n              }\n            });\n          }\n        } else {\n          // Flush the queue in an Immediate task.\n          scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n        }\n        newCallbackNode = null;\n      } else {\n        var schedulerPriorityLevel;\n        switch (lanesToEventPriority(nextLanes)) {\n          case DiscreteEventPriority:\n            schedulerPriorityLevel = ImmediatePriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriorityLevel = UserBlockingPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriorityLevel = IdlePriority;\n            break;\n          default:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n        }\n        newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n      }\n      root.callbackPriority = newCallbackPriority;\n      root.callbackNode = newCallbackNode;\n    } // This is the entry point for every concurrent task, i.e. anything that\n    // goes through Scheduler.\n\n    function performConcurrentWorkOnRoot(root, didTimeout) {\n      {\n        resetNestedUpdateFlag();\n      } // Since we know we're in a React event, we can clear the current\n      // event time. The next update will compute a new event time.\n\n      currentEventTime = NoTimestamp;\n      currentEventTransitionLane = NoLanes;\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Should not already be working.');\n      } // Flush any pending passive effects before deciding which lanes to work on,\n      // in case they schedule additional work.\n\n      var originalCallbackNode = root.callbackNode;\n      var didFlushPassiveEffects = flushPassiveEffects();\n      if (didFlushPassiveEffects) {\n        // Something in the passive effect phase may have canceled the current task.\n        // Check if the task node for this root was changed.\n        if (root.callbackNode !== originalCallbackNode) {\n          // The current task was canceled. Exit. We don't need to call\n          // `ensureRootIsScheduled` because the check above implies either that\n          // there's a new task, or that there's no remaining work on this root.\n          return null;\n        }\n      } // Determine the next lanes to work on, using the fields stored\n      // on the root.\n\n      var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n      if (lanes === NoLanes) {\n        // Defensive coding. This is never expected to happen.\n        return null;\n      } // We disable time-slicing in some cases: if the work has been CPU-bound\n      // for too long (\"expired\" work, to prevent starvation), or we're in\n      // sync-updates-by-default mode.\n      // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n      // bug we're still investigating. Once the bug in Scheduler is fixed,\n      // we can remove this, since we track expiration ourselves.\n\n      var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;\n      var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n      if (exitStatus !== RootInProgress) {\n        if (exitStatus === RootErrored) {\n          // If something threw an error, try rendering one more time. We'll\n          // render synchronously to block concurrent data mutations, and we'll\n          // includes all pending updates are included. If it still fails after\n          // the second attempt, we'll give up and commit the resulting tree.\n          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n          if (errorRetryLanes !== NoLanes) {\n            lanes = errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n          }\n        }\n        if (exitStatus === RootFatalErrored) {\n          var fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended$1(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw fatalError;\n        }\n        if (exitStatus === RootDidNotComplete) {\n          // The render unwound without completing the tree. This happens in special\n          // cases where need to exit the current render without producing a\n          // consistent tree or committing.\n          //\n          // This should only happen during a concurrent render, not a discrete or\n          // synchronous update. We should have already checked for this when we\n          // unwound the stack.\n          markRootSuspended$1(root, lanes);\n        } else {\n          // The render completed.\n          // Check if this render may have yielded to a concurrent event, and if so,\n          // confirm that any newly rendered stores are consistent.\n          // TODO: It's possible that even a concurrent render may never have yielded\n          // to the main thread, if it was fast enough, or if it expired. We could\n          // skip the consistency check in that case, too.\n          var renderWasConcurrent = !includesBlockingLane(root, lanes);\n          var finishedWork = root.current.alternate;\n          if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n            // A store was mutated in an interleaved event. Render again,\n            // synchronously, to block further mutations.\n            exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n            if (exitStatus === RootErrored) {\n              var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n              if (_errorRetryLanes !== NoLanes) {\n                lanes = _errorRetryLanes;\n                exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n                // concurrent events.\n              }\n            }\n\n            if (exitStatus === RootFatalErrored) {\n              var _fatalError = workInProgressRootFatalError;\n              prepareFreshStack(root, NoLanes);\n              markRootSuspended$1(root, lanes);\n              ensureRootIsScheduled(root, now());\n              throw _fatalError;\n            }\n          } // We now have a consistent tree. The next step is either to commit it,\n          // or, if something suspended, wait to commit it after a timeout.\n\n          root.finishedWork = finishedWork;\n          root.finishedLanes = lanes;\n          finishConcurrentRender(root, exitStatus, lanes);\n        }\n      }\n      ensureRootIsScheduled(root, now());\n      if (root.callbackNode === originalCallbackNode) {\n        // The task node scheduled for this root is the same one that's\n        // currently executed. Need to return a continuation.\n        return performConcurrentWorkOnRoot.bind(null, root);\n      }\n      return null;\n    }\n    function recoverFromConcurrentError(root, errorRetryLanes) {\n      // If an error occurred during hydration, discard server response and fall\n      // back to client side render.\n      // Before rendering again, save the errors from the previous attempt.\n      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n      if (isRootDehydrated(root)) {\n        // The shell failed to hydrate. Set a flag to force a client rendering\n        // during the next attempt. To do this, we call prepareFreshStack now\n        // to create the root work-in-progress fiber. This is a bit weird in terms\n        // of factoring, because it relies on renderRootSync not calling\n        // prepareFreshStack again in the call below, which happens because the\n        // root and lanes haven't changed.\n        //\n        // TODO: I think what we should do is set ForceClientRender inside\n        // throwException, like we do for nested Suspense boundaries. The reason\n        // it's here instead is so we can switch to the synchronous work loop, too.\n        // Something to consider for a future refactor.\n        var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n        rootWorkInProgress.flags |= ForceClientRender;\n        {\n          errorHydratingContainer(root.containerInfo);\n        }\n      }\n      var exitStatus = renderRootSync(root, errorRetryLanes);\n      if (exitStatus !== RootErrored) {\n        // Successfully finished rendering on retry\n        // The errors from the failed first attempt have been recovered. Add\n        // them to the collection of recoverable errors. We'll log them in the\n        // commit phase.\n        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n        workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n        // from the first attempt, to preserve the causal sequence.\n\n        if (errorsFromSecondAttempt !== null) {\n          queueRecoverableErrors(errorsFromSecondAttempt);\n        }\n      }\n      return exitStatus;\n    }\n    function queueRecoverableErrors(errors) {\n      if (workInProgressRootRecoverableErrors === null) {\n        workInProgressRootRecoverableErrors = errors;\n      } else {\n        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n      }\n    }\n    function finishConcurrentRender(root, exitStatus, lanes) {\n      switch (exitStatus) {\n        case RootInProgress:\n        case RootFatalErrored:\n          {\n            throw new Error('Root did not complete. This is a bug in React.');\n          }\n        // Flow knows about invariant, so it complains if I add a break\n        // statement, but eslint doesn't know about invariant, so it complains\n        // if I do. eslint-disable-next-line no-fallthrough\n\n        case RootErrored:\n          {\n            // We should have already attempted to retry this tree. If we reached\n            // this point, it errored again. Commit it.\n            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n            break;\n          }\n        case RootSuspended:\n          {\n            markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n            // should immediately commit it or wait a bit.\n\n            if (includesOnlyRetries(lanes) &&\n            // do not delay if we're inside an act() scope\n            !shouldForceFlushFallbacksInDEV()) {\n              // This render only included retries, no updates. Throttle committing\n              // retries so that we don't show too many loading states too quickly.\n              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\n\n              if (msUntilTimeout > 10) {\n                var nextLanes = getNextLanes(root, NoLanes);\n                if (nextLanes !== NoLanes) {\n                  // There's additional work on this root.\n                  break;\n                }\n                var suspendedLanes = root.suspendedLanes;\n                if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n                  // We should prefer to render the fallback of at the last\n                  // suspended level. Ping the last suspended level to try\n                  // rendering it again.\n                  // FIXME: What if the suspended lanes are Idle? Should not restart.\n                  var eventTime = requestEventTime();\n                  markRootPinged(root, suspendedLanes);\n                  break;\n                } // The render is suspended, it hasn't timed out, and there's no\n                // lower priority work to do. Instead of committing the fallback\n                // immediately, wait for more data to arrive.\n\n                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);\n                break;\n              }\n            } // The work expired. Commit immediately.\n\n            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n            break;\n          }\n        case RootSuspendedWithDelay:\n          {\n            markRootSuspended$1(root, lanes);\n            if (includesOnlyTransitions(lanes)) {\n              // This is a transition, so we should exit without committing a\n              // placeholder and without scheduling a timeout. Delay indefinitely\n              // until we receive more data.\n              break;\n            }\n            if (!shouldForceFlushFallbacksInDEV()) {\n              // This is not a transition, but we did trigger an avoided state.\n              // Schedule a placeholder to display after a short delay, using the Just\n              // Noticeable Difference.\n              // TODO: Is the JND optimization worth the added complexity? If this is\n              // the only reason we track the event time, then probably not.\n              // Consider removing.\n              var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n              var eventTimeMs = mostRecentEventTime;\n              var timeElapsedMs = now() - eventTimeMs;\n              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n              if (_msUntilTimeout > 10) {\n                // Instead of committing the fallback immediately, wait for more data\n                // to arrive.\n                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);\n                break;\n              }\n            } // Commit the placeholder.\n\n            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n            break;\n          }\n        case RootCompleted:\n          {\n            // The work completed. Ready to commit.\n            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n            break;\n          }\n        default:\n          {\n            throw new Error('Unknown root exit status.');\n          }\n      }\n    }\n    function isRenderConsistentWithExternalStores(finishedWork) {\n      // Search the rendered tree for external store reads, and check whether the\n      // stores were mutated in a concurrent event. Intentionally using an iterative\n      // loop instead of recursion so we can exit early.\n      var node = finishedWork;\n      while (true) {\n        if (node.flags & StoreConsistency) {\n          var updateQueue = node.updateQueue;\n          if (updateQueue !== null) {\n            var checks = updateQueue.stores;\n            if (checks !== null) {\n              for (var i = 0; i < checks.length; i++) {\n                var check = checks[i];\n                var getSnapshot = check.getSnapshot;\n                var renderedValue = check.value;\n                try {\n                  if (!objectIs(getSnapshot(), renderedValue)) {\n                    // Found an inconsistent store.\n                    return false;\n                  }\n                } catch (error) {\n                  // If `getSnapshot` throws, return `false`. This will schedule\n                  // a re-render, and the error will be rethrown during render.\n                  return false;\n                }\n              }\n            }\n          }\n        }\n        var child = node.child;\n        if (node.subtreeFlags & StoreConsistency && child !== null) {\n          child.return = node;\n          node = child;\n          continue;\n        }\n        if (node === finishedWork) {\n          return true;\n        }\n        while (node.sibling === null) {\n          if (node.return === null || node.return === finishedWork) {\n            return true;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n      } // Flow doesn't know this is unreachable, but eslint does\n      // eslint-disable-next-line no-unreachable\n\n      return true;\n    }\n    function markRootSuspended$1(root, suspendedLanes) {\n      // When suspending, we should always exclude lanes that were pinged or (more\n      // rarely, since we try to avoid it) updated during the render phase.\n      // TODO: Lol maybe there's a better way to factor this besides this\n      // obnoxiously named function :)\n      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n      markRootSuspended(root, suspendedLanes);\n    } // This is the entry point for synchronous tasks that don't go\n    // through Scheduler\n\n    function performSyncWorkOnRoot(root) {\n      {\n        syncNestedUpdateFlag();\n      }\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Should not already be working.');\n      }\n      flushPassiveEffects();\n      var lanes = getNextLanes(root, NoLanes);\n      if (!includesSomeLane(lanes, SyncLane)) {\n        // There's no remaining sync work left.\n        ensureRootIsScheduled(root, now());\n        return null;\n      }\n      var exitStatus = renderRootSync(root, lanes);\n      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n        // If something threw an error, try rendering one more time. We'll render\n        // synchronously to block concurrent data mutations, and we'll includes\n        // all pending updates are included. If it still fails after the second\n        // attempt, we'll give up and commit the resulting tree.\n        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n        if (errorRetryLanes !== NoLanes) {\n          lanes = errorRetryLanes;\n          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n        }\n      }\n      if (exitStatus === RootFatalErrored) {\n        var fatalError = workInProgressRootFatalError;\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended$1(root, lanes);\n        ensureRootIsScheduled(root, now());\n        throw fatalError;\n      }\n      if (exitStatus === RootDidNotComplete) {\n        throw new Error('Root did not complete. This is a bug in React.');\n      } // We now have a consistent tree. Because this is a sync render, we\n      // will commit it even if something suspended.\n\n      var finishedWork = root.current.alternate;\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next\n      // pending level.\n\n      ensureRootIsScheduled(root, now());\n      return null;\n    }\n    function flushRoot(root, lanes) {\n      if (lanes !== NoLanes) {\n        markRootEntangled(root, mergeLanes(lanes, SyncLane));\n        ensureRootIsScheduled(root, now());\n        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n          resetRenderTimer();\n          flushSyncCallbacks();\n        }\n      }\n    }\n    function deferredUpdates(fn) {\n      var previousPriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DefaultEventPriority);\n        return fn();\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n      }\n    }\n    function batchedUpdates(fn, a) {\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      try {\n        return fn(a);\n      } finally {\n        executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n        // most batchedUpdates-like method.\n\n        if (executionContext === NoContext &&\n        // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n        !ReactCurrentActQueue$1.isBatchingLegacy) {\n          resetRenderTimer();\n          flushSyncCallbacksOnlyInLegacyMode();\n        }\n      }\n    }\n    function discreteUpdates(fn, a, b, c, d) {\n      var previousPriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        return fn(a, b, c, d);\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        if (executionContext === NoContext) {\n          resetRenderTimer();\n        }\n      }\n    } // Overload the definition to the two valid signatures.\n    // Warning, this opts-out of checking the function body.\n\n    // eslint-disable-next-line no-redeclare\n    function flushSync(fn) {\n      // In legacy mode, we flush pending passive effects at the beginning of the\n      // next event, not at the end of the previous one.\n      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n        flushPassiveEffects();\n      }\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      var previousPriority = getCurrentUpdatePriority();\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        if (fn) {\n          return fn();\n        } else {\n          return undefined;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n        // Note that this will happen even if batchedUpdates is higher up\n        // the stack.\n\n        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n          flushSyncCallbacks();\n        }\n      }\n    }\n    function isAlreadyRendering() {\n      // Used by the renderer to print a warning if certain APIs are called from\n      // the wrong context.\n      return (executionContext & (RenderContext | CommitContext)) !== NoContext;\n    }\n    function flushControlled(fn) {\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      var previousPriority = getCurrentUpdatePriority();\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        fn();\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        executionContext = prevExecutionContext;\n        if (executionContext === NoContext) {\n          // Flush the immediate callbacks that were scheduled during this batch\n          resetRenderTimer();\n          flushSyncCallbacks();\n        }\n      }\n    }\n    function pushRenderLanes(fiber, lanes) {\n      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n      subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n      workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\n    }\n    function popRenderLanes(fiber) {\n      subtreeRenderLanes = subtreeRenderLanesCursor.current;\n      pop(subtreeRenderLanesCursor, fiber);\n    }\n    function prepareFreshStack(root, lanes) {\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n      var timeoutHandle = root.timeoutHandle;\n      if (timeoutHandle !== noTimeout) {\n        // The root previous suspended and scheduled a timeout to commit a fallback\n        // state. Now that we have additional work, cancel the timeout.\n        root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n        cancelTimeout(timeoutHandle);\n      }\n      if (workInProgress !== null) {\n        var interruptedWork = workInProgress.return;\n        while (interruptedWork !== null) {\n          var current = interruptedWork.alternate;\n          unwindInterruptedWork(current, interruptedWork);\n          interruptedWork = interruptedWork.return;\n        }\n      }\n      workInProgressRoot = root;\n      var rootWorkInProgress = createWorkInProgress(root.current, null);\n      workInProgress = rootWorkInProgress;\n      workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n      workInProgressRootExitStatus = RootInProgress;\n      workInProgressRootFatalError = null;\n      workInProgressRootSkippedLanes = NoLanes;\n      workInProgressRootInterleavedUpdatedLanes = NoLanes;\n      workInProgressRootPingedLanes = NoLanes;\n      workInProgressRootConcurrentErrors = null;\n      workInProgressRootRecoverableErrors = null;\n      finishQueueingConcurrentUpdates();\n      {\n        ReactStrictModeWarnings.discardPendingWarnings();\n      }\n      return rootWorkInProgress;\n    }\n    function handleError(root, thrownValue) {\n      do {\n        var erroredWork = workInProgress;\n        try {\n          // Reset module-level state that was set during the render phase.\n          resetContextDependencies();\n          resetHooksAfterThrow();\n          resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n          // separate issue. Write a regression test using string refs.\n\n          ReactCurrentOwner$2.current = null;\n          if (erroredWork === null || erroredWork.return === null) {\n            // Expected to be working on a non-root fiber. This is a fatal error\n            // because there's no ancestor that can handle it; the root is\n            // supposed to capture all errors that weren't caught by an error\n            // boundary.\n            workInProgressRootExitStatus = RootFatalErrored;\n            workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n            // sibling, or the parent if there are no siblings. But since the root\n            // has no siblings nor a parent, we set it to null. Usually this is\n            // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n            // intentionally not calling those, we need set it here.\n            // TODO: Consider calling `unwindWork` to pop the contexts.\n\n            workInProgress = null;\n            return;\n          }\n          if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n            // Record the time spent rendering before an error was thrown. This\n            // avoids inaccurate Profiler durations in the case of a\n            // suspended render.\n            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n          }\n          if (enableSchedulingProfiler) {\n            markComponentRenderStopped();\n            if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n              var wakeable = thrownValue;\n              markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n            } else {\n              markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n            }\n          }\n          throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n          completeUnitOfWork(erroredWork);\n        } catch (yetAnotherThrownValue) {\n          // Something in the return path also threw.\n          thrownValue = yetAnotherThrownValue;\n          if (workInProgress === erroredWork && erroredWork !== null) {\n            // If this boundary has already errored, then we had trouble processing\n            // the error. Bubble it to the next boundary.\n            erroredWork = erroredWork.return;\n            workInProgress = erroredWork;\n          } else {\n            erroredWork = workInProgress;\n          }\n          continue;\n        } // Return to the normal work loop.\n\n        return;\n      } while (true);\n    }\n    function pushDispatcher() {\n      var prevDispatcher = ReactCurrentDispatcher$2.current;\n      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n      if (prevDispatcher === null) {\n        // The React isomorphic package does not include a default dispatcher.\n        // Instead the first renderer will lazily attach one, in order to give\n        // nicer error messages.\n        return ContextOnlyDispatcher;\n      } else {\n        return prevDispatcher;\n      }\n    }\n    function popDispatcher(prevDispatcher) {\n      ReactCurrentDispatcher$2.current = prevDispatcher;\n    }\n    function markCommitTimeOfFallback() {\n      globalMostRecentFallbackTime = now();\n    }\n    function markSkippedUpdateLanes(lane) {\n      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n    }\n    function renderDidSuspend() {\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootSuspended;\n      }\n    }\n    function renderDidSuspendDelayIfPossible() {\n      if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n        workInProgressRootExitStatus = RootSuspendedWithDelay;\n      } // Check if there are updates that we skipped tree that might have unblocked\n      // this render.\n\n      if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n        // Mark the current render as suspended so that we switch to working on\n        // the updates that were skipped. Usually we only suspend at the end of\n        // the render phase.\n        // TODO: We should probably always mark the root as suspended immediately\n        // (inside this function), since by suspending at the end of the render\n        // phase introduces a potential mistake where we suspend lanes that were\n        // pinged or updated while we were rendering.\n        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n      }\n    }\n    function renderDidError(error) {\n      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n        workInProgressRootExitStatus = RootErrored;\n      }\n      if (workInProgressRootConcurrentErrors === null) {\n        workInProgressRootConcurrentErrors = [error];\n      } else {\n        workInProgressRootConcurrentErrors.push(error);\n      }\n    } // Called during render to determine if anything has suspended.\n    // Returns false if we're not sure.\n\n    function renderHasNotSuspendedYet() {\n      // If something errored or completed, we can't really be sure,\n      // so those are false.\n      return workInProgressRootExitStatus === RootInProgress;\n    }\n    function renderRootSync(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n      // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n            // If we bailout on this work, we'll move them back (like above).\n            // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n            // That way we can keep the current update and future updates separate.\n\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n        workInProgressTransitions = getTransitionsForLanes();\n        prepareFreshStack(root, lanes);\n      }\n      {\n        markRenderStarted(lanes);\n      }\n      do {\n        try {\n          workLoopSync();\n          break;\n        } catch (thrownValue) {\n          handleError(root, thrownValue);\n        }\n      } while (true);\n      resetContextDependencies();\n      executionContext = prevExecutionContext;\n      popDispatcher(prevDispatcher);\n      if (workInProgress !== null) {\n        // This is a sync render, so we should have finished the whole tree.\n        throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n      }\n      {\n        markRenderStopped();\n      } // Set this to null to indicate there's no in-progress render.\n\n      workInProgressRoot = null;\n      workInProgressRootRenderLanes = NoLanes;\n      return workInProgressRootExitStatus;\n    } // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n    /** @noinline */\n\n    function workLoopSync() {\n      // Already timed out, so perform work without checking if we need to yield.\n      while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n    function renderRootConcurrent(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n      // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n            // If we bailout on this work, we'll move them back (like above).\n            // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n            // That way we can keep the current update and future updates separate.\n\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n        workInProgressTransitions = getTransitionsForLanes();\n        resetRenderTimer();\n        prepareFreshStack(root, lanes);\n      }\n      {\n        markRenderStarted(lanes);\n      }\n      do {\n        try {\n          workLoopConcurrent();\n          break;\n        } catch (thrownValue) {\n          handleError(root, thrownValue);\n        }\n      } while (true);\n      resetContextDependencies();\n      popDispatcher(prevDispatcher);\n      executionContext = prevExecutionContext;\n      if (workInProgress !== null) {\n        // Still work remaining.\n        {\n          markRenderYielded();\n        }\n        return RootInProgress;\n      } else {\n        // Completed the tree.\n        {\n          markRenderStopped();\n        } // Set this to null to indicate there's no in-progress render.\n\n        workInProgressRoot = null;\n        workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n        return workInProgressRootExitStatus;\n      }\n    }\n    /** @noinline */\n\n    function workLoopConcurrent() {\n      // Perform work until Scheduler asks us to yield\n      while (workInProgress !== null && !shouldYield()) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n    function performUnitOfWork(unitOfWork) {\n      // The current, flushed, state of this fiber is the alternate. Ideally\n      // nothing should rely on this, but relying on it here means that we don't\n      // need an additional field on the work in progress.\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n      if ((unitOfWork.mode & ProfileMode) !== NoMode) {\n        startProfilerTimer(unitOfWork);\n        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      } else {\n        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n      }\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n      if (next === null) {\n        // If this doesn't spawn new work, complete the current work.\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n      ReactCurrentOwner$2.current = null;\n    }\n    function completeUnitOfWork(unitOfWork) {\n      // Attempt to complete the current unit of work, then move to the next\n      // sibling. If there are no more siblings, return to the parent fiber.\n      var completedWork = unitOfWork;\n      do {\n        // The current, flushed, state of this fiber is the alternate. Ideally\n        // nothing should rely on this, but relying on it here means that we don't\n        // need an additional field on the work in progress.\n        var current = completedWork.alternate;\n        var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n        if ((completedWork.flags & Incomplete) === NoFlags) {\n          setCurrentFiber(completedWork);\n          var next = void 0;\n          if ((completedWork.mode & ProfileMode) === NoMode) {\n            next = completeWork(current, completedWork, subtreeRenderLanes);\n          } else {\n            startProfilerTimer(completedWork);\n            next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n          }\n          resetCurrentFiber();\n          if (next !== null) {\n            // Completing this fiber spawned new work. Work on that next.\n            workInProgress = next;\n            return;\n          }\n        } else {\n          // This fiber did not complete because something threw. Pop values off\n          // the stack without entering the complete phase. If this is a boundary,\n          // capture values if possible.\n          var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n          if (_next !== null) {\n            // If completing this work spawned new work, do that next. We'll come\n            // back here again.\n            // Since we're restarting, remove anything that is not a host effect\n            // from the effect tag.\n            _next.flags &= HostEffectMask;\n            workInProgress = _next;\n            return;\n          }\n          if ((completedWork.mode & ProfileMode) !== NoMode) {\n            // Record the render duration for the fiber that errored.\n            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n            var actualDuration = completedWork.actualDuration;\n            var child = completedWork.child;\n            while (child !== null) {\n              actualDuration += child.actualDuration;\n              child = child.sibling;\n            }\n            completedWork.actualDuration = actualDuration;\n          }\n          if (returnFiber !== null) {\n            // Mark the parent fiber as incomplete and clear its subtree flags.\n            returnFiber.flags |= Incomplete;\n            returnFiber.subtreeFlags = NoFlags;\n            returnFiber.deletions = null;\n          } else {\n            // We've unwound all the way to the root.\n            workInProgressRootExitStatus = RootDidNotComplete;\n            workInProgress = null;\n            return;\n          }\n        }\n        var siblingFiber = completedWork.sibling;\n        if (siblingFiber !== null) {\n          // If there is more work to do in this returnFiber, do that next.\n          workInProgress = siblingFiber;\n          return;\n        } // Otherwise, return to the parent\n\n        completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n        workInProgress = completedWork;\n      } while (completedWork !== null); // We've reached the root.\n\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootCompleted;\n      }\n    }\n    function commitRoot(root, recoverableErrors, transitions) {\n      // TODO: This no longer makes any sense. We already wrap the mutation and\n      // layout phases. Should be able to remove.\n      var previousUpdateLanePriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);\n      } finally {\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        setCurrentUpdatePriority(previousUpdateLanePriority);\n      }\n      return null;\n    }\n    function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {\n      do {\n        // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n        // means `flushPassiveEffects` will sometimes result in additional\n        // passive effects. So we need to keep flushing in a loop until there are\n        // no more pending effects.\n        // TODO: Might be better if `flushPassiveEffects` did not automatically\n        // flush synchronous work at the end, to avoid factoring hazards like this.\n        flushPassiveEffects();\n      } while (rootWithPendingPassiveEffects !== null);\n      flushRenderPhaseStrictModeWarningsInDEV();\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Should not already be working.');\n      }\n      var finishedWork = root.finishedWork;\n      var lanes = root.finishedLanes;\n      {\n        markCommitStarted(lanes);\n      }\n      if (finishedWork === null) {\n        {\n          markCommitStopped();\n        }\n        return null;\n      } else {\n        {\n          if (lanes === NoLanes) {\n            error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n          }\n        }\n      }\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n      if (finishedWork === root.current) {\n        throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n      } // commitRoot never returns a continuation; it always finishes synchronously.\n      // So we can clear these now to allow a new callback to be scheduled.\n\n      root.callbackNode = null;\n      root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n      // pending time is whatever is left on the root fiber.\n\n      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n      markRootFinished(root, remainingLanes);\n      if (root === workInProgressRoot) {\n        // We can reset these now that they are finished.\n        workInProgressRoot = null;\n        workInProgress = null;\n        workInProgressRootRenderLanes = NoLanes;\n      } // If there are pending passive effects, schedule a callback to process them.\n      // Do this as early as possible, so it is queued before anything else that\n      // might get scheduled in the commit phase. (See #16714.)\n      // TODO: Delete all other places that schedule the passive effect callback\n      // They're redundant.\n\n      if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          // to store it in pendingPassiveTransitions until they get processed\n          // We need to pass this through as an argument to commitRoot\n          // because workInProgressTransitions might have changed between\n          // the previous render and commit if we throttle the commit\n          // with setTimeout\n\n          pendingPassiveTransitions = transitions;\n          scheduleCallback$1(NormalPriority, function () {\n            flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n            // *after* passive effects fire to avoid freeing a cache pool that may\n            // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n            return null;\n          });\n        }\n      } // Check if there are any effects in the whole tree.\n      // TODO: This is left over from the effect list implementation, where we had\n      // to check for the existence of `firstEffect` to satisfy Flow. I think the\n      // only other reason this optimization exists is because it affects profiling.\n      // Reconsider whether this is necessary.\n\n      var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n      var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n      if (subtreeHasEffects || rootHasEffect) {\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        ReactCurrentBatchConfig$2.transition = null;\n        var previousPriority = getCurrentUpdatePriority();\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        var prevExecutionContext = executionContext;\n        executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n        ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n        // of the effect list for each phase: all mutation effects come before all\n        // layout effects, and so on.\n        // The first phase a \"before mutation\" phase. We use this phase to read the\n        // state of the host tree right before we mutate it. This is where\n        // getSnapshotBeforeUpdate is called.\n\n        var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);\n        {\n          // Mark the current commit time to be shared by all Profilers in this\n          // batch. This enables them to be grouped later.\n          recordCommitTime();\n        }\n        commitMutationEffects(root, finishedWork, lanes);\n        resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n        // the mutation phase, so that the previous tree is still current during\n        // componentWillUnmount, but before the layout phase, so that the finished\n        // work is current during componentDidMount/Update.\n\n        root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n        {\n          markLayoutEffectsStarted(lanes);\n        }\n        commitLayoutEffects(finishedWork, root, lanes);\n        {\n          markLayoutEffectsStopped();\n        }\n        // opportunity to paint.\n\n        requestPaint();\n        executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n      } else {\n        // No effects.\n        root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n        // no effects.\n        // TODO: Maybe there's a better way to report this.\n\n        {\n          recordCommitTime();\n        }\n      }\n      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n      if (rootDoesHavePassiveEffects) {\n        // This commit has passive effects. Stash a reference to them. But don't\n        // schedule a callback until after flushing layout work.\n        rootDoesHavePassiveEffects = false;\n        rootWithPendingPassiveEffects = root;\n        pendingPassiveEffectsLanes = lanes;\n      } else {\n        {\n          nestedPassiveUpdateCount = 0;\n          rootWithPassiveNestedUpdates = null;\n        }\n      } // Read this again, since an effect might have updated it\n\n      remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n      // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n      // is to detect whether something might have called setState inside\n      // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n      // inside `componentDidCatch` is itself flawed — that's why we recommend\n      // `getDerivedStateFromError` instead. However, it could be improved by\n      // checking if remainingLanes includes Sync work, instead of whether there's\n      // any work remaining at all (which would also include stuff like Suspense\n      // retries or transitions). It's been like this for a while, though, so fixing\n      // it probably isn't that urgent.\n\n      if (remainingLanes === NoLanes) {\n        // If there's no remaining work, we can clear the set of already failed\n        // error boundaries.\n        legacyErrorBoundariesThatAlreadyFailed = null;\n      }\n      {\n        if (!rootDidHavePassiveEffects) {\n          commitDoubleInvokeEffectsInDEV(root.current, false);\n        }\n      }\n      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n      {\n        if (isDevToolsPresent) {\n          root.memoizedUpdaters.clear();\n        }\n      }\n      {\n        onCommitRoot$1();\n      } // Always call this before exiting `commitRoot`, to ensure that any\n      // additional work on this root is scheduled.\n\n      ensureRootIsScheduled(root, now());\n      if (recoverableErrors !== null) {\n        // There were errors during this render, but recovered from them without\n        // needing to surface it to the UI. We log them here.\n        var onRecoverableError = root.onRecoverableError;\n        for (var i = 0; i < recoverableErrors.length; i++) {\n          var recoverableError = recoverableErrors[i];\n          var componentStack = recoverableError.stack;\n          var digest = recoverableError.digest;\n          onRecoverableError(recoverableError.value, {\n            componentStack: componentStack,\n            digest: digest\n          });\n        }\n      }\n      if (hasUncaughtError) {\n        hasUncaughtError = false;\n        var error$1 = firstUncaughtError;\n        firstUncaughtError = null;\n        throw error$1;\n      } // If the passive effects are the result of a discrete render, flush them\n      // synchronously at the end of the current task so that the result is\n      // immediately observable. Otherwise, we assume that they are not\n      // order-dependent and do not need to be observed by external systems, so we\n      // can wait until after paint.\n      // TODO: We can optimize this by not scheduling the callback earlier. Since we\n      // currently schedule the callback in multiple places, will wait until those\n      // are consolidated.\n\n      if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n        flushPassiveEffects();\n      } // Read this again, since a passive effect might have updated it\n\n      remainingLanes = root.pendingLanes;\n      if (includesSomeLane(remainingLanes, SyncLane)) {\n        {\n          markNestedUpdateScheduled();\n        } // Count the number of times the root synchronously re-renders without\n        // finishing. If there are too many, it indicates an infinite update loop.\n\n        if (root === rootWithNestedUpdates) {\n          nestedUpdateCount++;\n        } else {\n          nestedUpdateCount = 0;\n          rootWithNestedUpdates = root;\n        }\n      } else {\n        nestedUpdateCount = 0;\n      } // If layout work was scheduled, flush it now.\n\n      flushSyncCallbacks();\n      {\n        markCommitStopped();\n      }\n      return null;\n    }\n    function flushPassiveEffects() {\n      // Returns whether passive effects were flushed.\n      // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n      // probably just combine the two functions. I believe they were only separate\n      // in the first place because we used to wrap it with\n      // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n      // priority within React itself, so we can mutate the variable directly.\n      if (rootWithPendingPassiveEffects !== null) {\n        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        var previousPriority = getCurrentUpdatePriority();\n        try {\n          ReactCurrentBatchConfig$2.transition = null;\n          setCurrentUpdatePriority(priority);\n          return flushPassiveEffectsImpl();\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n        }\n      }\n\n      return false;\n    }\n    function enqueuePendingPassiveProfilerEffect(fiber) {\n      {\n        pendingPassiveProfilerEffects.push(fiber);\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback$1(NormalPriority, function () {\n            flushPassiveEffects();\n            return null;\n          });\n        }\n      }\n    }\n    function flushPassiveEffectsImpl() {\n      if (rootWithPendingPassiveEffects === null) {\n        return false;\n      } // Cache and clear the transitions flag\n\n      var transitions = pendingPassiveTransitions;\n      pendingPassiveTransitions = null;\n      var root = rootWithPendingPassiveEffects;\n      var lanes = pendingPassiveEffectsLanes;\n      rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n      // Figure out why and fix it. It's not causing any known issues (probably\n      // because it's only used for profiling), but it's a refactor hazard.\n\n      pendingPassiveEffectsLanes = NoLanes;\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Cannot flush passive effects while already rendering.');\n      }\n      {\n        isFlushingPassiveEffects = true;\n        didScheduleUpdateDuringPassiveEffects = false;\n      }\n      {\n        markPassiveEffectsStarted(lanes);\n      }\n      var prevExecutionContext = executionContext;\n      executionContext |= CommitContext;\n      commitPassiveUnmountEffects(root.current);\n      commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects\n\n      {\n        var profilerEffects = pendingPassiveProfilerEffects;\n        pendingPassiveProfilerEffects = [];\n        for (var i = 0; i < profilerEffects.length; i++) {\n          var _fiber = profilerEffects[i];\n          commitPassiveEffectDurations(root, _fiber);\n        }\n      }\n      {\n        markPassiveEffectsStopped();\n      }\n      {\n        commitDoubleInvokeEffectsInDEV(root.current, true);\n      }\n      executionContext = prevExecutionContext;\n      flushSyncCallbacks();\n      {\n        // If additional passive effects were scheduled, increment a counter. If this\n        // exceeds the limit, we'll fire a warning.\n        if (didScheduleUpdateDuringPassiveEffects) {\n          if (root === rootWithPassiveNestedUpdates) {\n            nestedPassiveUpdateCount++;\n          } else {\n            nestedPassiveUpdateCount = 0;\n            rootWithPassiveNestedUpdates = root;\n          }\n        } else {\n          nestedPassiveUpdateCount = 0;\n        }\n        isFlushingPassiveEffects = false;\n        didScheduleUpdateDuringPassiveEffects = false;\n      } // TODO: Move to commitPassiveMountEffects\n\n      onPostCommitRoot(root);\n      {\n        var stateNode = root.current.stateNode;\n        stateNode.effectDuration = 0;\n        stateNode.passiveEffectDuration = 0;\n      }\n      return true;\n    }\n    function isAlreadyFailedLegacyErrorBoundary(instance) {\n      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n    }\n    function markLegacyErrorBoundaryAsFailed(instance) {\n      if (legacyErrorBoundariesThatAlreadyFailed === null) {\n        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n      } else {\n        legacyErrorBoundariesThatAlreadyFailed.add(instance);\n      }\n    }\n    function prepareToThrowUncaughtError(error) {\n      if (!hasUncaughtError) {\n        hasUncaughtError = true;\n        firstUncaughtError = error;\n      }\n    }\n    var onUncaughtError = prepareToThrowUncaughtError;\n    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n      var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n      var root = enqueueUpdate(rootFiber, update, SyncLane);\n      var eventTime = requestEventTime();\n      if (root !== null) {\n        markRootUpdated(root, SyncLane, eventTime);\n        ensureRootIsScheduled(root, eventTime);\n      }\n    }\n    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n      {\n        reportUncaughtErrorInDEV(error$1);\n        setIsRunningInsertionEffect(false);\n      }\n      if (sourceFiber.tag === HostRoot) {\n        // Error was thrown at the root. There is no parent, so the root\n        // itself should capture it.\n        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n        return;\n      }\n      var fiber = null;\n      {\n        fiber = nearestMountedAncestor;\n      }\n      while (fiber !== null) {\n        if (fiber.tag === HostRoot) {\n          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n          return;\n        } else if (fiber.tag === ClassComponent) {\n          var ctor = fiber.type;\n          var instance = fiber.stateNode;\n          if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n            var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n            var root = enqueueUpdate(fiber, update, SyncLane);\n            var eventTime = requestEventTime();\n            if (root !== null) {\n              markRootUpdated(root, SyncLane, eventTime);\n              ensureRootIsScheduled(root, eventTime);\n            }\n            return;\n          }\n        }\n        fiber = fiber.return;\n      }\n      {\n        // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n        // will fire for errors that are thrown by destroy functions inside deleted\n        // trees. What it should instead do is propagate the error to the parent of\n        // the deleted tree. In the meantime, do not add this warning to the\n        // allowlist; this is only for our internal use.\n        error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n      }\n    }\n    function pingSuspendedRoot(root, wakeable, pingedLanes) {\n      var pingCache = root.pingCache;\n      if (pingCache !== null) {\n        // The wakeable resolved, so we no longer need to memoize, because it will\n        // never be thrown again.\n        pingCache.delete(wakeable);\n      }\n      var eventTime = requestEventTime();\n      markRootPinged(root, pingedLanes);\n      warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n      if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n        // Received a ping at the same priority level at which we're currently\n        // rendering. We might want to restart this render. This should mirror\n        // the logic of whether or not a root suspends once it completes.\n        // TODO: If we're rendering sync either due to Sync, Batched or expired,\n        // we should probably never restart.\n        // If we're suspended with delay, or if it's a retry, we'll always suspend\n        // so we can always restart.\n        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n          // Restart from the root.\n          prepareFreshStack(root, NoLanes);\n        } else {\n          // Even though we can't restart right now, we might get an\n          // opportunity later. So we mark this render as having a ping.\n          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n        }\n      }\n      ensureRootIsScheduled(root, eventTime);\n    }\n    function retryTimedOutBoundary(boundaryFiber, retryLane) {\n      // The boundary fiber (a Suspense component or SuspenseList component)\n      // previously was rendered in its fallback state. One of the promises that\n      // suspended it has resolved, which means at least part of the tree was\n      // likely unblocked. Try rendering again, at a new lanes.\n      if (retryLane === NoLane) {\n        // TODO: Assign this to `suspenseState.retryLane`? to avoid\n        // unnecessary entanglement?\n        retryLane = requestRetryLane(boundaryFiber);\n      } // TODO: Special case idle priority?\n\n      var eventTime = requestEventTime();\n      var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n      if (root !== null) {\n        markRootUpdated(root, retryLane, eventTime);\n        ensureRootIsScheduled(root, eventTime);\n      }\n    }\n    function retryDehydratedSuspenseBoundary(boundaryFiber) {\n      var suspenseState = boundaryFiber.memoizedState;\n      var retryLane = NoLane;\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function resolveRetryWakeable(boundaryFiber, wakeable) {\n      var retryLane = NoLane; // Default\n\n      var retryCache;\n      switch (boundaryFiber.tag) {\n        case SuspenseComponent:\n          retryCache = boundaryFiber.stateNode;\n          var suspenseState = boundaryFiber.memoizedState;\n          if (suspenseState !== null) {\n            retryLane = suspenseState.retryLane;\n          }\n          break;\n        case SuspenseListComponent:\n          retryCache = boundaryFiber.stateNode;\n          break;\n        default:\n          throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\n      }\n      if (retryCache !== null) {\n        // The wakeable resolved, so we no longer need to memoize, because it will\n        // never be thrown again.\n        retryCache.delete(wakeable);\n      }\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    } // Computes the next Just Noticeable Difference (JND) boundary.\n    // The theory is that a person can't tell the difference between small differences in time.\n    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n    // difference in the experience. However, waiting for longer might mean that we can avoid\n    // showing an intermediate loading state. The longer we have already waited, the harder it\n    // is to tell small differences in time. Therefore, the longer we've already waited,\n    // the longer we can wait additionally. At some point we have to give up though.\n    // We pick a train model where the next boundary commits at a consistent schedule.\n    // These particular numbers are vague estimates. We expect to adjust them based on research.\n\n    function jnd(timeElapsed) {\n      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n    }\n    function checkForNestedUpdates() {\n      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n        nestedUpdateCount = 0;\n        rootWithNestedUpdates = null;\n        throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n      }\n      {\n        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n          nestedPassiveUpdateCount = 0;\n          rootWithPassiveNestedUpdates = null;\n          error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n        }\n      }\n    }\n    function flushRenderPhaseStrictModeWarningsInDEV() {\n      {\n        ReactStrictModeWarnings.flushLegacyContextWarning();\n        {\n          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n        }\n      }\n    }\n    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n      {\n        // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n        // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n        // Maybe not a big deal since this is DEV only behavior.\n        setCurrentFiber(fiber);\n        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n        if (hasPassiveEffects) {\n          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n        }\n        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n        if (hasPassiveEffects) {\n          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n        }\n        resetCurrentFiber();\n      }\n    }\n    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        var current = firstChild;\n        var subtreeRoot = null;\n        while (current !== null) {\n          var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n          if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\n            current = current.child;\n          } else {\n            if ((current.flags & fiberFlags) !== NoFlags) {\n              invokeEffectFn(current);\n            }\n            if (current.sibling !== null) {\n              current = current.sibling;\n            } else {\n              current = subtreeRoot = current.return;\n            }\n          }\n        }\n      }\n    }\n    var didWarnStateUpdateForNotYetMountedComponent = null;\n    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n      {\n        if ((executionContext & RenderContext) !== NoContext) {\n          // We let the other warning about render phase updates deal with this one.\n          return;\n        }\n        if (!(fiber.mode & ConcurrentMode)) {\n          return;\n        }\n        var tag = fiber.tag;\n        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n          // Only warn for user-defined components, not internal ones like Suspense.\n          return;\n        } // We show the whole stack but dedupe on the top component's name because\n        // the problematic code almost always lies inside that component.\n\n        var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n        if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n            return;\n          }\n          didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n        } else {\n          didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n        }\n        var previousFiber = current;\n        try {\n          setCurrentFiber(fiber);\n          error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n        } finally {\n          if (previousFiber) {\n            setCurrentFiber(fiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n    var beginWork$1;\n    {\n      var dummyFiber = null;\n      beginWork$1 = function (current, unitOfWork, lanes) {\n        // If a component throws an error, we replay it again in a synchronously\n        // dispatched event, so that the debugger will treat it as an uncaught\n        // error See ReactErrorUtils for more information.\n        // Before entering the begin phase, copy the work-in-progress onto a dummy\n        // fiber. If beginWork throws, we'll use this to reset the state.\n        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n        try {\n          return beginWork(current, unitOfWork, lanes);\n        } catch (originalError) {\n          if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\n            // Don't replay promises.\n            // Don't replay errors if we are hydrating and have already suspended or handled an error\n            throw originalError;\n          } // Keep this code in sync with handleError; any changes here must have\n          // corresponding changes there.\n\n          resetContextDependencies();\n          resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n          // same fiber again.\n          // Unwind the failed stack frame\n\n          unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n\n          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n          if (unitOfWork.mode & ProfileMode) {\n            // Reset the profiler timer.\n            startProfilerTimer(unitOfWork);\n          } // Run beginWork again.\n\n          invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n          if (hasCaughtError()) {\n            var replayError = clearCaughtError();\n            if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {\n              // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n              originalError._suppressLogging = true;\n            }\n          } // We always throw the original error in case the second render pass is not idempotent.\n          // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n\n          throw originalError;\n        }\n      };\n    }\n    var didWarnAboutUpdateInRender = false;\n    var didWarnAboutUpdateInRenderForAnotherComponent;\n    {\n      didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n    }\n    function warnAboutRenderPhaseUpdatesInDEV(fiber) {\n      {\n        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n                var dedupeKey = renderingComponentName;\n                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n                  var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n                  error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n                }\n                break;\n              }\n            case ClassComponent:\n              {\n                if (!didWarnAboutUpdateInRender) {\n                  error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n                  didWarnAboutUpdateInRender = true;\n                }\n                break;\n              }\n          }\n        }\n      }\n    }\n    function restorePendingUpdaters(root, lanes) {\n      {\n        if (isDevToolsPresent) {\n          var memoizedUpdaters = root.memoizedUpdaters;\n          memoizedUpdaters.forEach(function (schedulingFiber) {\n            addFiberToLanesMap(root, schedulingFiber, lanes);\n          }); // This function intentionally does not clear memoized updaters.\n          // Those may still be relevant to the current commit\n          // and a future one (e.g. Suspense).\n        }\n      }\n    }\n\n    var fakeActCallbackNode = {};\n    function scheduleCallback$1(priorityLevel, callback) {\n      {\n        // If we're currently inside an `act` scope, bypass Scheduler and push to\n        // the `act` queue instead.\n        var actQueue = ReactCurrentActQueue$1.current;\n        if (actQueue !== null) {\n          actQueue.push(callback);\n          return fakeActCallbackNode;\n        } else {\n          return scheduleCallback(priorityLevel, callback);\n        }\n      }\n    }\n    function cancelCallback$1(callbackNode) {\n      if (callbackNode === fakeActCallbackNode) {\n        return;\n      } // In production, always call Scheduler. This function will be stripped out.\n\n      return cancelCallback(callbackNode);\n    }\n    function shouldForceFlushFallbacksInDEV() {\n      // Never force flush in production. This function should get stripped out.\n      return ReactCurrentActQueue$1.current !== null;\n    }\n    function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n      {\n        if (fiber.mode & ConcurrentMode) {\n          if (!isConcurrentActEnvironment()) {\n            // Not in an act environment. No need to warn.\n            return;\n          }\n        } else {\n          // Legacy mode has additional cases where we suppress a warning.\n          if (!isLegacyActEnvironment()) {\n            // Not in an act environment. No need to warn.\n            return;\n          }\n          if (executionContext !== NoContext) {\n            // Legacy mode doesn't warn if the update is batched, i.e.\n            // batchedUpdates or flushSync.\n            return;\n          }\n          if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n            // For backwards compatibility with pre-hooks code, legacy mode only\n            // warns for updates that originate from a hook.\n            return;\n          }\n        }\n        if (ReactCurrentActQueue$1.current === null) {\n          var previousFiber = current;\n          try {\n            setCurrentFiber(fiber);\n            error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n          } finally {\n            if (previousFiber) {\n              setCurrentFiber(fiber);\n            } else {\n              resetCurrentFiber();\n            }\n          }\n        }\n      }\n    }\n    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n      {\n        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n          error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n        }\n      }\n    }\n    function setIsRunningInsertionEffect(isRunning) {\n      {\n        isRunningInsertionEffect = isRunning;\n      }\n    }\n\n    /* eslint-disable react-internal/prod-error-codes */\n    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\n    var failedBoundaries = null;\n    var setRefreshHandler = function (handler) {\n      {\n        resolveFamily = handler;\n      }\n    };\n    function resolveFunctionForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return type;\n        }\n        var family = resolveFamily(type);\n        if (family === undefined) {\n          return type;\n        } // Use the latest known implementation.\n\n        return family.current;\n      }\n    }\n    function resolveClassForHotReloading(type) {\n      // No implementation differences.\n      return resolveFunctionForHotReloading(type);\n    }\n    function resolveForwardRefForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return type;\n        }\n        var family = resolveFamily(type);\n        if (family === undefined) {\n          // Check if we're dealing with a real forwardRef. Don't want to crash early.\n          if (type !== null && type !== undefined && typeof type.render === 'function') {\n            // ForwardRef is special because its resolved .type is an object,\n            // but it's possible that we only have its inner render function in the map.\n            // If that inner render function is different, we'll build a new forwardRef type.\n            var currentRender = resolveFunctionForHotReloading(type.render);\n            if (type.render !== currentRender) {\n              var syntheticType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: currentRender\n              };\n              if (type.displayName !== undefined) {\n                syntheticType.displayName = type.displayName;\n              }\n              return syntheticType;\n            }\n          }\n          return type;\n        } // Use the latest known implementation.\n\n        return family.current;\n      }\n    }\n    function isCompatibleFamilyForHotReloading(fiber, element) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return false;\n        }\n        var prevType = fiber.elementType;\n        var nextType = element.type; // If we got here, we know types aren't === equal.\n\n        var needsCompareFamilies = false;\n        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n        switch (fiber.tag) {\n          case ClassComponent:\n            {\n              if (typeof nextType === 'function') {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          case FunctionComponent:\n            {\n              if (typeof nextType === 'function') {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                // We don't know the inner type yet.\n                // We're going to assume that the lazy inner type is stable,\n                // and so it is sufficient to avoid reconciling it away.\n                // We're not going to unwrap or actually use the new lazy type.\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          case ForwardRef:\n            {\n              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              if ($$typeofNextType === REACT_MEMO_TYPE) {\n                // TODO: if it was but can no longer be simple,\n                // we shouldn't set this.\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          default:\n            return false;\n        } // Check if both types have a family and it's the same one.\n\n        if (needsCompareFamilies) {\n          // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n          // This means both of them need to be registered to preserve state.\n          // If we unwrapped and compared the inner types for wrappers instead,\n          // then we would risk falsely saying two separate memo(Foo)\n          // calls are equivalent because they wrap the same Foo function.\n          var prevFamily = resolveFamily(prevType);\n          if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n    function markFailedErrorBoundaryForHotReloading(fiber) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return;\n        }\n        if (typeof WeakSet !== 'function') {\n          return;\n        }\n        if (failedBoundaries === null) {\n          failedBoundaries = new WeakSet();\n        }\n        failedBoundaries.add(fiber);\n      }\n    }\n    var scheduleRefresh = function (root, update) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return;\n        }\n        var staleFamilies = update.staleFamilies,\n          updatedFamilies = update.updatedFamilies;\n        flushPassiveEffects();\n        flushSync(function () {\n          scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n        });\n      }\n    };\n    var scheduleRoot = function (root, element) {\n      {\n        if (root.context !== emptyContextObject) {\n          // Super edge case: root has a legacy _renderSubtree context\n          // but we don't know the parentComponent so we can't pass it.\n          // Just ignore. We'll delete this with _renderSubtree code path later.\n          return;\n        }\n        flushPassiveEffects();\n        flushSync(function () {\n          updateContainer(element, root, null, null);\n        });\n      }\n    };\n    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n      {\n        var alternate = fiber.alternate,\n          child = fiber.child,\n          sibling = fiber.sibling,\n          tag = fiber.tag,\n          type = fiber.type;\n        var candidateType = null;\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n        if (resolveFamily === null) {\n          throw new Error('Expected resolveFamily to be set during hot reload.');\n        }\n        var needsRender = false;\n        var needsRemount = false;\n        if (candidateType !== null) {\n          var family = resolveFamily(candidateType);\n          if (family !== undefined) {\n            if (staleFamilies.has(family)) {\n              needsRemount = true;\n            } else if (updatedFamilies.has(family)) {\n              if (tag === ClassComponent) {\n                needsRemount = true;\n              } else {\n                needsRender = true;\n              }\n            }\n          }\n        }\n        if (failedBoundaries !== null) {\n          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n            needsRemount = true;\n          }\n        }\n        if (needsRemount) {\n          fiber._debugNeedsRemount = true;\n        }\n        if (needsRemount || needsRender) {\n          var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (_root !== null) {\n            scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);\n          }\n        }\n        if (child !== null && !needsRemount) {\n          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n        }\n        if (sibling !== null) {\n          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n        }\n      }\n    }\n    var findHostInstancesForRefresh = function (root, families) {\n      {\n        var hostInstances = new Set();\n        var types = new Set(families.map(function (family) {\n          return family.current;\n        }));\n        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n        return hostInstances;\n      }\n    };\n    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n      {\n        var child = fiber.child,\n          sibling = fiber.sibling,\n          tag = fiber.tag,\n          type = fiber.type;\n        var candidateType = null;\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n        var didMatch = false;\n        if (candidateType !== null) {\n          if (types.has(candidateType)) {\n            didMatch = true;\n          }\n        }\n        if (didMatch) {\n          // We have a match. This only drills down to the closest host components.\n          // There's no need to search deeper because for the purpose of giving\n          // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n          findHostInstancesForFiberShallowly(fiber, hostInstances);\n        } else {\n          // If there's no match, maybe there will be one further down in the child tree.\n          if (child !== null) {\n            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n          }\n        }\n        if (sibling !== null) {\n          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n        }\n      }\n    }\n    function findHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n        if (foundHostInstances) {\n          return;\n        } // If we didn't find any host children, fallback to closest host parent.\n\n        var node = fiber;\n        while (true) {\n          switch (node.tag) {\n            case HostComponent:\n              hostInstances.add(node.stateNode);\n              return;\n            case HostPortal:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n            case HostRoot:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n          }\n          if (node.return === null) {\n            throw new Error('Expected to reach root first.');\n          }\n          node = node.return;\n        }\n      }\n    }\n    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var node = fiber;\n        var foundHostInstances = false;\n        while (true) {\n          if (node.tag === HostComponent) {\n            // We got a match.\n            foundHostInstances = true;\n            hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          if (node === fiber) {\n            return foundHostInstances;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === fiber) {\n              return foundHostInstances;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n      return false;\n    }\n    var hasBadMapPolyfill;\n    {\n      hasBadMapPolyfill = false;\n      try {\n        var nonExtensibleObject = Object.preventExtensions({});\n        /* eslint-disable no-new */\n\n        new Map([[nonExtensibleObject, null]]);\n        new Set([nonExtensibleObject]);\n        /* eslint-enable no-new */\n      } catch (e) {\n        // TODO: Consider warning about bad polyfills\n        hasBadMapPolyfill = true;\n      }\n    }\n    function FiberNode(tag, pendingProps, key, mode) {\n      // Instance\n      this.tag = tag;\n      this.key = key;\n      this.elementType = null;\n      this.type = null;\n      this.stateNode = null; // Fiber\n\n      this.return = null;\n      this.child = null;\n      this.sibling = null;\n      this.index = 0;\n      this.ref = null;\n      this.pendingProps = pendingProps;\n      this.memoizedProps = null;\n      this.updateQueue = null;\n      this.memoizedState = null;\n      this.dependencies = null;\n      this.mode = mode; // Effects\n\n      this.flags = NoFlags;\n      this.subtreeFlags = NoFlags;\n      this.deletions = null;\n      this.lanes = NoLanes;\n      this.childLanes = NoLanes;\n      this.alternate = null;\n      {\n        // Note: The following is done to avoid a v8 performance cliff.\n        //\n        // Initializing the fields below to smis and later updating them with\n        // double values will cause Fibers to end up having separate shapes.\n        // This behavior/bug has something to do with Object.preventExtension().\n        // Fortunately this only impacts DEV builds.\n        // Unfortunately it makes React unusably slow for some applications.\n        // To work around this, initialize the fields below with doubles.\n        //\n        // Learn more about this here:\n        // https://github.com/facebook/react/issues/14365\n        // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n        this.actualDuration = Number.NaN;\n        this.actualStartTime = Number.NaN;\n        this.selfBaseDuration = Number.NaN;\n        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n        // This won't trigger the performance cliff mentioned above,\n        // and it simplifies other profiler code (including DevTools).\n\n        this.actualDuration = 0;\n        this.actualStartTime = -1;\n        this.selfBaseDuration = 0;\n        this.treeBaseDuration = 0;\n      }\n      {\n        // This isn't directly used but is handy for debugging internals:\n        this._debugSource = null;\n        this._debugOwner = null;\n        this._debugNeedsRemount = false;\n        this._debugHookTypes = null;\n        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n          Object.preventExtensions(this);\n        }\n      }\n    } // This is a constructor function, rather than a POJO constructor, still\n    // please ensure we do the following:\n    // 1) Nobody should add any instance methods on this. Instance methods can be\n    //    more difficult to predict when they get optimized and they are almost\n    //    never inlined properly in static compilers.\n    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n    //    always know when it is a fiber.\n    // 3) We might want to experiment with using numeric keys since they are easier\n    //    to optimize in a non-JIT environment.\n    // 4) We can easily go from a constructor to a createFiber object literal if that\n    //    is faster.\n    // 5) It should be easy to port this to a C struct and keep a C implementation\n    //    compatible.\n\n    var createFiber = function (tag, pendingProps, key, mode) {\n      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n      return new FiberNode(tag, pendingProps, key, mode);\n    };\n    function shouldConstruct$1(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n    function isSimpleFunctionComponent(type) {\n      return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n    }\n    function resolveLazyComponentTag(Component) {\n      if (typeof Component === 'function') {\n        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n      } else if (Component !== undefined && Component !== null) {\n        var $$typeof = Component.$$typeof;\n        if ($$typeof === REACT_FORWARD_REF_TYPE) {\n          return ForwardRef;\n        }\n        if ($$typeof === REACT_MEMO_TYPE) {\n          return MemoComponent;\n        }\n      }\n      return IndeterminateComponent;\n    } // This is used to create an alternate fiber to do work on.\n\n    function createWorkInProgress(current, pendingProps) {\n      var workInProgress = current.alternate;\n      if (workInProgress === null) {\n        // We use a double buffering pooling technique because we know that we'll\n        // only ever need at most two versions of a tree. We pool the \"other\" unused\n        // node that we're free to reuse. This is lazily created to avoid allocating\n        // extra objects for things that are never updated. It also allow us to\n        // reclaim the extra memory if needed.\n        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n        workInProgress.elementType = current.elementType;\n        workInProgress.type = current.type;\n        workInProgress.stateNode = current.stateNode;\n        {\n          // DEV-only fields\n          workInProgress._debugSource = current._debugSource;\n          workInProgress._debugOwner = current._debugOwner;\n          workInProgress._debugHookTypes = current._debugHookTypes;\n        }\n        workInProgress.alternate = current;\n        current.alternate = workInProgress;\n      } else {\n        workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n        workInProgress.type = current.type; // We already have an alternate.\n        // Reset the effect tag.\n\n        workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n        workInProgress.subtreeFlags = NoFlags;\n        workInProgress.deletions = null;\n        {\n          // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n          // This prevents time from endlessly accumulating in new commits.\n          // This has the downside of resetting values for different priority renders,\n          // But works for yielding (the common case) and should support resuming.\n          workInProgress.actualDuration = 0;\n          workInProgress.actualStartTime = -1;\n        }\n      } // Reset all effects except static ones.\n      // Static effects are not specific to a render.\n\n      workInProgress.flags = current.flags & StaticMask;\n      workInProgress.childLanes = current.childLanes;\n      workInProgress.lanes = current.lanes;\n      workInProgress.child = current.child;\n      workInProgress.memoizedProps = current.memoizedProps;\n      workInProgress.memoizedState = current.memoizedState;\n      workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n      // it cannot be shared with the current fiber.\n\n      var currentDependencies = current.dependencies;\n      workInProgress.dependencies = currentDependencies === null ? null : {\n        lanes: currentDependencies.lanes,\n        firstContext: currentDependencies.firstContext\n      }; // These will be overridden during the parent's reconciliation\n\n      workInProgress.sibling = current.sibling;\n      workInProgress.index = current.index;\n      workInProgress.ref = current.ref;\n      {\n        workInProgress.selfBaseDuration = current.selfBaseDuration;\n        workInProgress.treeBaseDuration = current.treeBaseDuration;\n      }\n      {\n        workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n          case FunctionComponent:\n          case SimpleMemoComponent:\n            workInProgress.type = resolveFunctionForHotReloading(current.type);\n            break;\n          case ClassComponent:\n            workInProgress.type = resolveClassForHotReloading(current.type);\n            break;\n          case ForwardRef:\n            workInProgress.type = resolveForwardRefForHotReloading(current.type);\n            break;\n        }\n      }\n      return workInProgress;\n    } // Used to reuse a Fiber for a second pass.\n\n    function resetWorkInProgress(workInProgress, renderLanes) {\n      // This resets the Fiber to what createFiber or createWorkInProgress would\n      // have set the values to before during the first pass. Ideally this wouldn't\n      // be necessary but unfortunately many code paths reads from the workInProgress\n      // when they should be reading from current and writing to workInProgress.\n      // We assume pendingProps, index, key, ref, return are still untouched to\n      // avoid doing another reconciliation.\n      // Reset the effect flags but keep any Placement tags, since that's something\n      // that child fiber is setting, not the reconciliation.\n      workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n      var current = workInProgress.alternate;\n      if (current === null) {\n        // Reset to createFiber's initial values.\n        workInProgress.childLanes = NoLanes;\n        workInProgress.lanes = renderLanes;\n        workInProgress.child = null;\n        workInProgress.subtreeFlags = NoFlags;\n        workInProgress.memoizedProps = null;\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null;\n        workInProgress.dependencies = null;\n        workInProgress.stateNode = null;\n        {\n          // Note: We don't reset the actualTime counts. It's useful to accumulate\n          // actual time across multiple render passes.\n          workInProgress.selfBaseDuration = 0;\n          workInProgress.treeBaseDuration = 0;\n        }\n      } else {\n        // Reset to the cloned values that createWorkInProgress would've.\n        workInProgress.childLanes = current.childLanes;\n        workInProgress.lanes = current.lanes;\n        workInProgress.child = current.child;\n        workInProgress.subtreeFlags = NoFlags;\n        workInProgress.deletions = null;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n        workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n        // it cannot be shared with the current fiber.\n\n        var currentDependencies = current.dependencies;\n        workInProgress.dependencies = currentDependencies === null ? null : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext\n        };\n        {\n          // Note: We don't reset the actualTime counts. It's useful to accumulate\n          // actual time across multiple render passes.\n          workInProgress.selfBaseDuration = current.selfBaseDuration;\n          workInProgress.treeBaseDuration = current.treeBaseDuration;\n        }\n      }\n      return workInProgress;\n    }\n    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n      var mode;\n      if (tag === ConcurrentRoot) {\n        mode = ConcurrentMode;\n        if (isStrictMode === true) {\n          mode |= StrictLegacyMode;\n          {\n            mode |= StrictEffectsMode;\n          }\n        }\n      } else {\n        mode = NoMode;\n      }\n      if (isDevToolsPresent) {\n        // Always collect profile timings when DevTools are present.\n        // This enables DevTools to start capturing timing at any point–\n        // Without some nodes in the tree having empty base times.\n        mode |= ProfileMode;\n      }\n      return createFiber(HostRoot, null, null, mode);\n    }\n    function createFiberFromTypeAndProps(type,\n    // React$ElementType\n    key, pendingProps, owner, mode, lanes) {\n      var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n      var resolvedType = type;\n      if (typeof type === 'function') {\n        if (shouldConstruct$1(type)) {\n          fiberTag = ClassComponent;\n          {\n            resolvedType = resolveClassForHotReloading(resolvedType);\n          }\n        } else {\n          {\n            resolvedType = resolveFunctionForHotReloading(resolvedType);\n          }\n        }\n      } else if (typeof type === 'string') {\n        fiberTag = HostComponent;\n      } else {\n        getTag: switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n          case REACT_STRICT_MODE_TYPE:\n            fiberTag = Mode;\n            mode |= StrictLegacyMode;\n            if ((mode & ConcurrentMode) !== NoMode) {\n              // Strict effects should never run on legacy roots\n              mode |= StrictEffectsMode;\n            }\n            break;\n          case REACT_PROFILER_TYPE:\n            return createFiberFromProfiler(pendingProps, mode, lanes, key);\n          case REACT_SUSPENSE_TYPE:\n            return createFiberFromSuspense(pendingProps, mode, lanes, key);\n          case REACT_SUSPENSE_LIST_TYPE:\n            return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n          case REACT_OFFSCREEN_TYPE:\n            return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n          case REACT_LEGACY_HIDDEN_TYPE:\n\n          // eslint-disable-next-line no-fallthrough\n\n          case REACT_SCOPE_TYPE:\n\n          // eslint-disable-next-line no-fallthrough\n\n          case REACT_CACHE_TYPE:\n\n          // eslint-disable-next-line no-fallthrough\n\n          case REACT_TRACING_MARKER_TYPE:\n\n          // eslint-disable-next-line no-fallthrough\n\n          case REACT_DEBUG_TRACING_MODE_TYPE:\n\n          // eslint-disable-next-line no-fallthrough\n\n          default:\n            {\n              if (typeof type === 'object' && type !== null) {\n                switch (type.$$typeof) {\n                  case REACT_PROVIDER_TYPE:\n                    fiberTag = ContextProvider;\n                    break getTag;\n                  case REACT_CONTEXT_TYPE:\n                    // This is a consumer\n                    fiberTag = ContextConsumer;\n                    break getTag;\n                  case REACT_FORWARD_REF_TYPE:\n                    fiberTag = ForwardRef;\n                    {\n                      resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                    }\n                    break getTag;\n                  case REACT_MEMO_TYPE:\n                    fiberTag = MemoComponent;\n                    break getTag;\n                  case REACT_LAZY_TYPE:\n                    fiberTag = LazyComponent;\n                    resolvedType = null;\n                    break getTag;\n                }\n              }\n              var info = '';\n              {\n                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n                  info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n                }\n                var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n                if (ownerName) {\n                  info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n                }\n              }\n              throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n            }\n        }\n      }\n      var fiber = createFiber(fiberTag, pendingProps, key, mode);\n      fiber.elementType = type;\n      fiber.type = resolvedType;\n      fiber.lanes = lanes;\n      {\n        fiber._debugOwner = owner;\n      }\n      return fiber;\n    }\n    function createFiberFromElement(element, mode, lanes) {\n      var owner = null;\n      {\n        owner = element._owner;\n      }\n      var type = element.type;\n      var key = element.key;\n      var pendingProps = element.props;\n      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n      {\n        fiber._debugSource = element._source;\n        fiber._debugOwner = element._owner;\n      }\n      return fiber;\n    }\n    function createFiberFromFragment(elements, mode, lanes, key) {\n      var fiber = createFiber(Fragment, elements, key, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromProfiler(pendingProps, mode, lanes, key) {\n      {\n        if (typeof pendingProps.id !== 'string') {\n          error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n        }\n      }\n      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n      fiber.elementType = REACT_PROFILER_TYPE;\n      fiber.lanes = lanes;\n      {\n        fiber.stateNode = {\n          effectDuration: 0,\n          passiveEffectDuration: 0\n        };\n      }\n      return fiber;\n    }\n    function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_OFFSCREEN_TYPE;\n      fiber.lanes = lanes;\n      var primaryChildInstance = {\n        isHidden: false\n      };\n      fiber.stateNode = primaryChildInstance;\n      return fiber;\n    }\n    function createFiberFromText(content, mode, lanes) {\n      var fiber = createFiber(HostText, content, null, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromHostInstanceForDeletion() {\n      var fiber = createFiber(HostComponent, null, null, NoMode);\n      fiber.elementType = 'DELETED';\n      return fiber;\n    }\n    function createFiberFromDehydratedFragment(dehydratedNode) {\n      var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n      fiber.stateNode = dehydratedNode;\n      return fiber;\n    }\n    function createFiberFromPortal(portal, mode, lanes) {\n      var pendingProps = portal.children !== null ? portal.children : [];\n      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n      fiber.lanes = lanes;\n      fiber.stateNode = {\n        containerInfo: portal.containerInfo,\n        pendingChildren: null,\n        // Used by persistent updates\n        implementation: portal.implementation\n      };\n      return fiber;\n    } // Used for stashing WIP properties to replay failed work in DEV.\n\n    function assignFiberPropertiesInDEV(target, source) {\n      if (target === null) {\n        // This Fiber's initial properties will always be overwritten.\n        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n        target = createFiber(IndeterminateComponent, null, null, NoMode);\n      } // This is intentionally written as a list of all properties.\n      // We tried to use Object.assign() instead but this is called in\n      // the hottest path, and Object.assign() was too slow:\n      // https://github.com/facebook/react/issues/12502\n      // This code is DEV-only so size is not a concern.\n\n      target.tag = source.tag;\n      target.key = source.key;\n      target.elementType = source.elementType;\n      target.type = source.type;\n      target.stateNode = source.stateNode;\n      target.return = source.return;\n      target.child = source.child;\n      target.sibling = source.sibling;\n      target.index = source.index;\n      target.ref = source.ref;\n      target.pendingProps = source.pendingProps;\n      target.memoizedProps = source.memoizedProps;\n      target.updateQueue = source.updateQueue;\n      target.memoizedState = source.memoizedState;\n      target.dependencies = source.dependencies;\n      target.mode = source.mode;\n      target.flags = source.flags;\n      target.subtreeFlags = source.subtreeFlags;\n      target.deletions = source.deletions;\n      target.lanes = source.lanes;\n      target.childLanes = source.childLanes;\n      target.alternate = source.alternate;\n      {\n        target.actualDuration = source.actualDuration;\n        target.actualStartTime = source.actualStartTime;\n        target.selfBaseDuration = source.selfBaseDuration;\n        target.treeBaseDuration = source.treeBaseDuration;\n      }\n      target._debugSource = source._debugSource;\n      target._debugOwner = source._debugOwner;\n      target._debugNeedsRemount = source._debugNeedsRemount;\n      target._debugHookTypes = source._debugHookTypes;\n      return target;\n    }\n    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n      this.tag = tag;\n      this.containerInfo = containerInfo;\n      this.pendingChildren = null;\n      this.current = null;\n      this.pingCache = null;\n      this.finishedWork = null;\n      this.timeoutHandle = noTimeout;\n      this.context = null;\n      this.pendingContext = null;\n      this.callbackNode = null;\n      this.callbackPriority = NoLane;\n      this.eventTimes = createLaneMap(NoLanes);\n      this.expirationTimes = createLaneMap(NoTimestamp);\n      this.pendingLanes = NoLanes;\n      this.suspendedLanes = NoLanes;\n      this.pingedLanes = NoLanes;\n      this.expiredLanes = NoLanes;\n      this.mutableReadLanes = NoLanes;\n      this.finishedLanes = NoLanes;\n      this.entangledLanes = NoLanes;\n      this.entanglements = createLaneMap(NoLanes);\n      this.identifierPrefix = identifierPrefix;\n      this.onRecoverableError = onRecoverableError;\n      if (supportsHydration) {\n        this.mutableSourceEagerHydrationData = null;\n      }\n      {\n        this.effectDuration = 0;\n        this.passiveEffectDuration = 0;\n      }\n      {\n        this.memoizedUpdaters = new Set();\n        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n        for (var _i = 0; _i < TotalLanes; _i++) {\n          pendingUpdatersLaneMap.push(new Set());\n        }\n      }\n      {\n        switch (tag) {\n          case ConcurrentRoot:\n            this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n            break;\n          case LegacyRoot:\n            this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n            break;\n        }\n      }\n    }\n    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride,\n    // TODO: We have several of these arguments that are conceptually part of the\n    // host config, but because they are passed in at runtime, we have to thread\n    // them through the root constructor. Perhaps we should put them all into a\n    // single type, like a DynamicHostConfig that is defined by the renderer.\n    identifierPrefix, onRecoverableError, transitionCallbacks) {\n      var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\n      // stateNode is any.\n\n      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n      root.current = uninitializedFiber;\n      uninitializedFiber.stateNode = root;\n      {\n        var _initialState = {\n          element: initialChildren,\n          isDehydrated: hydrate,\n          cache: null,\n          // not enabled yet\n          transitions: null,\n          pendingSuspenseBoundaries: null\n        };\n        uninitializedFiber.memoizedState = _initialState;\n      }\n      initializeUpdateQueue(uninitializedFiber);\n      return root;\n    }\n    var ReactVersion = '18.2.0';\n    function createPortal(children, containerInfo,\n    // TODO: figure out the API for cross-renderer implementation.\n    implementation) {\n      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      {\n        checkKeyStringCoercion(key);\n      }\n      return {\n        // This tag allow us to uniquely identify this as a React Portal\n        $$typeof: REACT_PORTAL_TYPE,\n        key: key == null ? null : '' + key,\n        children: children,\n        containerInfo: containerInfo,\n        implementation: implementation\n      };\n    }\n    var didWarnAboutNestedUpdates;\n    var didWarnAboutFindNodeInStrictMode;\n    {\n      didWarnAboutNestedUpdates = false;\n      didWarnAboutFindNodeInStrictMode = {};\n    }\n    function getContextForSubtree(parentComponent) {\n      if (!parentComponent) {\n        return emptyContextObject;\n      }\n      var fiber = get(parentComponent);\n      var parentContext = findCurrentUnmaskedContext(fiber);\n      if (fiber.tag === ClassComponent) {\n        var Component = fiber.type;\n        if (isContextProvider(Component)) {\n          return processChildContext(fiber, Component, parentContext);\n        }\n      }\n      return parentContext;\n    }\n    function findHostInstance(component) {\n      var fiber = get(component);\n      if (fiber === undefined) {\n        if (typeof component.render === 'function') {\n          throw new Error('Unable to find node on an unmounted component.');\n        } else {\n          var keys = Object.keys(component).join(',');\n          throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n        }\n      }\n      var hostFiber = findCurrentHostFiber(fiber);\n      if (hostFiber === null) {\n        return null;\n      }\n      return hostFiber.stateNode;\n    }\n    function findHostInstanceWithWarning(component, methodName) {\n      {\n        var fiber = get(component);\n        if (fiber === undefined) {\n          if (typeof component.render === 'function') {\n            throw new Error('Unable to find node on an unmounted component.');\n          } else {\n            var keys = Object.keys(component).join(',');\n            throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n          }\n        }\n        var hostFiber = findCurrentHostFiber(fiber);\n        if (hostFiber === null) {\n          return null;\n        }\n        if (hostFiber.mode & StrictLegacyMode) {\n          var componentName = getComponentNameFromFiber(fiber) || 'Component';\n          if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n            didWarnAboutFindNodeInStrictMode[componentName] = true;\n            var previousFiber = current;\n            try {\n              setCurrentFiber(hostFiber);\n              if (fiber.mode & StrictLegacyMode) {\n                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n              } else {\n                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n              }\n            } finally {\n              // Ideally this should reset to previous but this shouldn't be called in\n              // render and there's another warning for that anyway.\n              if (previousFiber) {\n                setCurrentFiber(previousFiber);\n              } else {\n                resetCurrentFiber();\n              }\n            }\n          }\n        }\n        return hostFiber.stateNode;\n      }\n    }\n    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n      var hydrate = false;\n      var initialChildren = null;\n      return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n    }\n    function createHydrationContainer(initialChildren,\n    // TODO: Remove `callback` when we delete legacy mode.\n    callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n      var hydrate = true;\n      var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\n\n      root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n      // a regular update because the initial render must match was was rendered\n      // on the server.\n      // NOTE: This update intentionally doesn't have a payload. We're only using\n      // the update to schedule work on the root fiber (and, for legacy roots, to\n      // enqueue the callback if one is provided).\n\n      var current = root.current;\n      var eventTime = requestEventTime();\n      var lane = requestUpdateLane(current);\n      var update = createUpdate(eventTime, lane);\n      update.callback = callback !== undefined && callback !== null ? callback : null;\n      enqueueUpdate(current, update, lane);\n      scheduleInitialHydrationOnRoot(root, lane, eventTime);\n      return root;\n    }\n    function updateContainer(element, container, parentComponent, callback) {\n      {\n        onScheduleRoot(container, element);\n      }\n      var current$1 = container.current;\n      var eventTime = requestEventTime();\n      var lane = requestUpdateLane(current$1);\n      {\n        markRenderScheduled(lane);\n      }\n      var context = getContextForSubtree(parentComponent);\n      if (container.context === null) {\n        container.context = context;\n      } else {\n        container.pendingContext = context;\n      }\n      {\n        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n          didWarnAboutNestedUpdates = true;\n          error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n        }\n      }\n      var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      update.payload = {\n        element: element\n      };\n      callback = callback === undefined ? null : callback;\n      if (callback !== null) {\n        {\n          if (typeof callback !== 'function') {\n            error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n          }\n        }\n        update.callback = callback;\n      }\n      var root = enqueueUpdate(current$1, update, lane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, current$1, lane, eventTime);\n        entangleTransitions(root, current$1, lane);\n      }\n      return lane;\n    }\n    function getPublicRootInstance(container) {\n      var containerFiber = container.current;\n      if (!containerFiber.child) {\n        return null;\n      }\n      switch (containerFiber.child.tag) {\n        case HostComponent:\n          return getPublicInstance(containerFiber.child.stateNode);\n        default:\n          return containerFiber.child.stateNode;\n      }\n    }\n    function attemptSynchronousHydration(fiber) {\n      switch (fiber.tag) {\n        case HostRoot:\n          {\n            var root = fiber.stateNode;\n            if (isRootDehydrated(root)) {\n              // Flush the first scheduled \"update\".\n              var lanes = getHighestPriorityPendingLanes(root);\n              flushRoot(root, lanes);\n            }\n            break;\n          }\n        case SuspenseComponent:\n          {\n            flushSync(function () {\n              var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n              if (root !== null) {\n                var eventTime = requestEventTime();\n                scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n              }\n            }); // If we're still blocked after this, we need to increase\n            // the priority of any promises resolving within this\n            // boundary so that they next attempt also has higher pri.\n\n            var retryLane = SyncLane;\n            markRetryLaneIfNotHydrated(fiber, retryLane);\n            break;\n          }\n      }\n    }\n    function markRetryLaneImpl(fiber, retryLane) {\n      var suspenseState = fiber.memoizedState;\n      if (suspenseState !== null && suspenseState.dehydrated !== null) {\n        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n      }\n    } // Increases the priority of thenables when they resolve within this boundary.\n\n    function markRetryLaneIfNotHydrated(fiber, retryLane) {\n      markRetryLaneImpl(fiber, retryLane);\n      var alternate = fiber.alternate;\n      if (alternate) {\n        markRetryLaneImpl(alternate, retryLane);\n      }\n    }\n    function attemptDiscreteHydration(fiber) {\n      if (fiber.tag !== SuspenseComponent) {\n        // We ignore HostRoots here because we can't increase\n        // their priority and they should not suspend on I/O,\n        // since you have to wrap anything that might suspend in\n        // Suspense.\n        return;\n      }\n      var lane = SyncLane;\n      var root = enqueueConcurrentRenderForLane(fiber, lane);\n      if (root !== null) {\n        var eventTime = requestEventTime();\n        scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      }\n      markRetryLaneIfNotHydrated(fiber, lane);\n    }\n    function attemptContinuousHydration(fiber) {\n      if (fiber.tag !== SuspenseComponent) {\n        // We ignore HostRoots here because we can't increase\n        // their priority and they should not suspend on I/O,\n        // since you have to wrap anything that might suspend in\n        // Suspense.\n        return;\n      }\n      var lane = SelectiveHydrationLane;\n      var root = enqueueConcurrentRenderForLane(fiber, lane);\n      if (root !== null) {\n        var eventTime = requestEventTime();\n        scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      }\n      markRetryLaneIfNotHydrated(fiber, lane);\n    }\n    function attemptHydrationAtCurrentPriority(fiber) {\n      if (fiber.tag !== SuspenseComponent) {\n        // We ignore HostRoots here because we can't increase\n        // their priority other than synchronously flush it.\n        return;\n      }\n      var lane = requestUpdateLane(fiber);\n      var root = enqueueConcurrentRenderForLane(fiber, lane);\n      if (root !== null) {\n        var eventTime = requestEventTime();\n        scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      }\n      markRetryLaneIfNotHydrated(fiber, lane);\n    }\n    function findHostInstanceWithNoPortals(fiber) {\n      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n      if (hostFiber === null) {\n        return null;\n      }\n      return hostFiber.stateNode;\n    }\n    var shouldErrorImpl = function (fiber) {\n      return null;\n    };\n    function shouldError(fiber) {\n      return shouldErrorImpl(fiber);\n    }\n    var shouldSuspendImpl = function (fiber) {\n      return false;\n    };\n    function shouldSuspend(fiber) {\n      return shouldSuspendImpl(fiber);\n    }\n    var overrideHookState = null;\n    var overrideHookStateDeletePath = null;\n    var overrideHookStateRenamePath = null;\n    var overrideProps = null;\n    var overridePropsDeletePath = null;\n    var overridePropsRenamePath = null;\n    var scheduleUpdate = null;\n    var setErrorHandler = null;\n    var setSuspenseHandler = null;\n    {\n      var copyWithDeleteImpl = function (obj, path, index) {\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n        if (index + 1 === path.length) {\n          if (isArray(updated)) {\n            updated.splice(key, 1);\n          } else {\n            delete updated[key];\n          }\n          return updated;\n        } // $FlowFixMe number or string is fine here\n\n        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n        return updated;\n      };\n      var copyWithDelete = function (obj, path) {\n        return copyWithDeleteImpl(obj, path, 0);\n      };\n      var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n        var oldKey = oldPath[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n        if (index + 1 === oldPath.length) {\n          var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n          updated[newKey] = updated[oldKey];\n          if (isArray(updated)) {\n            updated.splice(oldKey, 1);\n          } else {\n            delete updated[oldKey];\n          }\n        } else {\n          // $FlowFixMe number or string is fine here\n          updated[oldKey] = copyWithRenameImpl(\n          // $FlowFixMe number or string is fine here\n          obj[oldKey], oldPath, newPath, index + 1);\n        }\n        return updated;\n      };\n      var copyWithRename = function (obj, oldPath, newPath) {\n        if (oldPath.length !== newPath.length) {\n          warn('copyWithRename() expects paths of the same length');\n          return;\n        } else {\n          for (var i = 0; i < newPath.length - 1; i++) {\n            if (oldPath[i] !== newPath[i]) {\n              warn('copyWithRename() expects paths to be the same except for the deepest key');\n              return;\n            }\n          }\n        }\n        return copyWithRenameImpl(obj, oldPath, newPath, 0);\n      };\n      var copyWithSetImpl = function (obj, path, index, value) {\n        if (index >= path.length) {\n          return value;\n        }\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n        return updated;\n      };\n      var copyWithSet = function (obj, path, value) {\n        return copyWithSetImpl(obj, path, 0, value);\n      };\n      var findHook = function (fiber, id) {\n        // For now, the \"id\" of stateful hooks is just the stateful hook index.\n        // This may change in the future with e.g. nested hooks.\n        var currentHook = fiber.memoizedState;\n        while (currentHook !== null && id > 0) {\n          currentHook = currentHook.next;\n          id--;\n        }\n        return currentHook;\n      }; // Support DevTools editable values for useState and useReducer.\n\n      overrideHookState = function (fiber, id, path, value) {\n        var hook = findHook(fiber, id);\n        if (hook !== null) {\n          var newState = copyWithSet(hook.memoizedState, path, value);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n          }\n        }\n      };\n      overrideHookStateDeletePath = function (fiber, id, path) {\n        var hook = findHook(fiber, id);\n        if (hook !== null) {\n          var newState = copyWithDelete(hook.memoizedState, path);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n          }\n        }\n      };\n      overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n        var hook = findHook(fiber, id);\n        if (hook !== null) {\n          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n          }\n        }\n      }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n      overrideProps = function (fiber, path, value) {\n        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n        }\n      };\n      overridePropsDeletePath = function (fiber, path) {\n        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n        }\n      };\n      overridePropsRenamePath = function (fiber, oldPath, newPath) {\n        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n        }\n      };\n      scheduleUpdate = function (fiber) {\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n        }\n      };\n      setErrorHandler = function (newShouldErrorImpl) {\n        shouldErrorImpl = newShouldErrorImpl;\n      };\n      setSuspenseHandler = function (newShouldSuspendImpl) {\n        shouldSuspendImpl = newShouldSuspendImpl;\n      };\n    }\n    function findHostInstanceByFiber(fiber) {\n      var hostFiber = findCurrentHostFiber(fiber);\n      if (hostFiber === null) {\n        return null;\n      }\n      return hostFiber.stateNode;\n    }\n    function emptyFindFiberByHostInstance(instance) {\n      return null;\n    }\n    function getCurrentFiberForDevTools() {\n      return current;\n    }\n    function injectIntoDevTools(devToolsConfig) {\n      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n      return injectInternals({\n        bundleType: devToolsConfig.bundleType,\n        version: devToolsConfig.version,\n        rendererPackageName: devToolsConfig.rendererPackageName,\n        rendererConfig: devToolsConfig.rendererConfig,\n        overrideHookState: overrideHookState,\n        overrideHookStateDeletePath: overrideHookStateDeletePath,\n        overrideHookStateRenamePath: overrideHookStateRenamePath,\n        overrideProps: overrideProps,\n        overridePropsDeletePath: overridePropsDeletePath,\n        overridePropsRenamePath: overridePropsRenamePath,\n        setErrorHandler: setErrorHandler,\n        setSuspenseHandler: setSuspenseHandler,\n        scheduleUpdate: scheduleUpdate,\n        currentDispatcherRef: ReactCurrentDispatcher,\n        findHostInstanceByFiber: findHostInstanceByFiber,\n        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n        // React Refresh\n        findHostInstancesForRefresh: findHostInstancesForRefresh,\n        scheduleRefresh: scheduleRefresh,\n        scheduleRoot: scheduleRoot,\n        setRefreshHandler: setRefreshHandler,\n        // Enables DevTools to append owner stacks to error messages in DEV mode.\n        getCurrentFiber: getCurrentFiberForDevTools,\n        // Enables DevTools to detect reconciler version rather than renderer version\n        // which may not match for third party renderers.\n        reconcilerVersion: ReactVersion\n      });\n    }\n    exports.attemptContinuousHydration = attemptContinuousHydration;\n    exports.attemptDiscreteHydration = attemptDiscreteHydration;\n    exports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\n    exports.attemptSynchronousHydration = attemptSynchronousHydration;\n    exports.batchedUpdates = batchedUpdates;\n    exports.createComponentSelector = createComponentSelector;\n    exports.createContainer = createContainer;\n    exports.createHasPseudoClassSelector = createHasPseudoClassSelector;\n    exports.createHydrationContainer = createHydrationContainer;\n    exports.createPortal = createPortal;\n    exports.createRoleSelector = createRoleSelector;\n    exports.createTestNameSelector = createTestNameSelector;\n    exports.createTextSelector = createTextSelector;\n    exports.deferredUpdates = deferredUpdates;\n    exports.discreteUpdates = discreteUpdates;\n    exports.findAllNodes = findAllNodes;\n    exports.findBoundingRects = findBoundingRects;\n    exports.findHostInstance = findHostInstance;\n    exports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\n    exports.findHostInstanceWithWarning = findHostInstanceWithWarning;\n    exports.flushControlled = flushControlled;\n    exports.flushPassiveEffects = flushPassiveEffects;\n    exports.flushSync = flushSync;\n    exports.focusWithin = focusWithin;\n    exports.getCurrentUpdatePriority = getCurrentUpdatePriority;\n    exports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\n    exports.getPublicRootInstance = getPublicRootInstance;\n    exports.injectIntoDevTools = injectIntoDevTools;\n    exports.isAlreadyRendering = isAlreadyRendering;\n    exports.observeVisibleRects = observeVisibleRects;\n    exports.registerMutableSourceForHydration = registerMutableSourceForHydration;\n    exports.runWithPriority = runWithPriority;\n    exports.shouldError = shouldError;\n    exports.shouldSuspend = shouldSuspend;\n    exports.updateContainer = updateContainer;\n    return exports;\n  };\n}","map":{"version":3,"names":["process","env","NODE_ENV","module","exports","$$$reconciler","$$$hostConfig","React","require","Scheduler","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","suppressWarning","setSuppressWarning","newSuppressWarning","warn","format","_len","arguments","length","args","Array","_key","printWarning","error","_len2","_key2","level","ReactDebugCurrentFrame","stack","getStackAddendum","concat","argsWithFormat","map","item","String","unshift","Function","prototype","apply","call","console","assign","Object","get","key","_reactInternals","set","value","enableNewReconciler","enableLazyContextPropagation","enableLegacyHidden","enableSuspenseAvoidThisFallback","warnAboutStringRefs","enableSchedulingProfiler","enableProfilerTimer","enableProfilerCommitHooks","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","name","getContextName","type","getComponentNameFromType","tag","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","getWrappedName$1","getContextName$1","getComponentNameFromFiber","fiber","NoFlags","PerformedWork","Placement","Update","ChildDeletion","ContentReset","Callback","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","Visibility","StoreConsistency","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","MountLayoutDev","MountPassiveDev","BeforeMutationMask","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","owner","current","ownerFiber","instance","stateNode","_warnedAboutRefsInRender","assertIsMounted","Error","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","_child","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","findCurrentHostFiberWithNoPortals","findCurrentHostFiberWithNoPortalsImpl","isArrayImpl","isArray","getPublicInstance","getRootHostContext","getChildHostContext","prepareForCommit","resetAfterCommit","createInstance","appendInitialChild","finalizeInitialChildren","prepareUpdate","shouldSetTextContent","createTextInstance","scheduleTimeout","cancelTimeout","noTimeout","isPrimaryRenderer","warnsIfNotActing","supportsMutation","supportsPersistence","supportsHydration","getInstanceFromNode","beforeActiveInstanceBlur","afterActiveInstanceBlur","preparePortalMount","prepareScopeUpdate","getInstanceFromScope","getCurrentEventPriority","detachDeletedInstance","supportsMicrotasks","scheduleMicrotask","supportsTestSelectors","findFiberRoot","getBoundingRect","getTextContent","isHiddenSubtree","matchAccessibilityRole","setFocusIfFocusable","setupIntersectionObserver","appendChild","appendChildToContainer","commitTextUpdate","commitMount","commitUpdate","insertBefore","insertInContainerBefore","removeChild","removeChildFromContainer","resetTextContent","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","clearContainer","cloneInstance","createContainerChildSet","appendChildToContainerChildSet","finalizeContainerChildren","replaceContainerChildren","cloneHiddenInstance","cloneHiddenTextInstance","canHydrateInstance","canHydrateTextInstance","canHydrateSuspenseInstance","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","getNextHydratableSibling","getFirstHydratableChild","getFirstHydratableChildWithinContainer","getFirstHydratableChildWithinSuspenseInstance","hydrateInstance","hydrateTextInstance","hydrateSuspenseInstance","getNextHydratableInstanceAfterSuspenseInstance","commitHydratedContainer","commitHydratedSuspenseInstance","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","shouldDeleteUnhydratedTailInstances","didNotMatchHydratedContainerTextInstance","didNotMatchHydratedTextInstance","didNotHydrateInstanceWithinContainer","didNotHydrateInstanceWithinSuspenseInstance","didNotHydrateInstance","didNotFindHydratableInstanceWithinContainer","didNotFindHydratableTextInstanceWithinContainer","didNotFindHydratableSuspenseInstanceWithinContainer","didNotFindHydratableInstanceWithinSuspenseInstance","didNotFindHydratableTextInstanceWithinSuspenseInstance","didNotFindHydratableSuspenseInstanceWithinSuspenseInstance","didNotFindHydratableInstance","didNotFindHydratableTextInstance","didNotFindHydratableSuspenseInstance","errorHydratingContainer","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","__reactDisabledLog","disableLogs","log","info","group","groupCollapsed","groupEnd","props","configurable","enumerable","writable","defineProperties","reenableLogs","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","source","ownerFn","undefined","trim","reentry","componentFrameCache","PossiblyWeakMap","WeakMap","Map","describeNativeComponentFrame","fn","construct","frame","control","previousPrepareStackTrace","prepareStackTrace","previousDispatcher","Fake","defineProperty","Reflect","sample","sampleLines","split","controlLines","s","c","_frame","replace","includes","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","shouldConstruct","Component","isReactComponent","describeUnknownElementTypeFrameInDEV","hasOwnProperty","loggedTypeFailures","setCurrentlyValidatingElement","element","_owner","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","bind","typeSpecName","error$1","err","ex","message","valueStack","fiberStack","index","createCursor","defaultValue","pop","cursor","push","warnedAboutMissingGetChildContext","emptyContextObject","freeze","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","StrictEffectsMode","clz32","Math","clz32Fallback","LN2","asUint","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","getLabelForLane","lane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","getHighestPriorityLane","getNextLanes","root","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","entangledLanes","entanglements","pickArbitraryLaneIndex","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getHighestPriorityPendingLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyNonUrgentLanes","UrgentLanes","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","higherPriorityLane","createLaneMap","initial","laneMap","i","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootFinished","remainingLanes","noLongerPendingLanes","mutableReadLanes","markRootEntangled","rootEntangledLanes","getBumpedLaneForHydration","renderLanes","renderLane","addFiberToLanesMap","isDevToolsPresent","pendingUpdatersLaneMap","updaters","add","movePendingFibersToMemoized","memoizedUpdaters","size","forEach","clear","getTransitionsForLanes","DiscreteEventPriority","ContinuousEventPriority","DefaultEventPriority","IdleEventPriority","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","runWithPriority","priority","previousPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","scheduleCallback","unstable_scheduleCallback","cancelCallback","unstable_cancelCallback","shouldYield","unstable_shouldYield","requestPaint","unstable_requestPaint","now","unstable_now","ImmediatePriority","unstable_ImmediatePriority","UserBlockingPriority","unstable_UserBlockingPriority","NormalPriority","unstable_NormalPriority","IdlePriority","unstable_IdlePriority","unstable_yieldValue","unstable_setDisableYieldValue","rendererID","injectedHook","injectedProfilingHooks","hasLoggedError","__REACT_DEVTOOLS_GLOBAL_HOOK__","injectInternals","internals","hook","isDisabled","supportsFiber","getLaneLabelMap","injectProfilingHooks","inject","checkDCE","onScheduleRoot","children","onScheduleFiberRoot","onCommitRoot","eventPriority","onCommitFiberRoot","didError","schedulerPriority","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","setIsStrictModeForDevtools","newIsStrictMode","setStrictMode","profilingHooks","label","markCommitStarted","markCommitStopped","markComponentRenderStarted","markComponentRenderStopped","markComponentPassiveEffectMountStarted","markComponentPassiveEffectMountStopped","markComponentPassiveEffectUnmountStarted","markComponentPassiveEffectUnmountStopped","markComponentLayoutEffectMountStarted","markComponentLayoutEffectMountStopped","markComponentLayoutEffectUnmountStarted","markComponentLayoutEffectUnmountStopped","markComponentErrored","thrownValue","markComponentSuspended","wakeable","markLayoutEffectsStarted","markLayoutEffectsStopped","markPassiveEffectsStarted","markPassiveEffectsStopped","markRenderStarted","markRenderYielded","markRenderStopped","markRenderScheduled","markForceUpdateScheduled","markStateUpdateScheduled","is","y","objectIs","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","callback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","slice","isRootDehydrated","currentState","memoizedState","isDehydrated","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","isForkedChild","warnIfNotHydrating","getForksAtLevel","getTreeId","overflow","idWithLeadingBit","id","getLeadingBit","toString","pushTreeFork","totalChildren","pushTreeId","baseIdWithLeadingBit","baseOverflow","baseLength","getBitLength","baseId","slot","numberOfOverflowBits","newOverflowBits","newOverflow","restOfBaseId","restOfBaseLength","restOfLength","restOfNewBits","newBits","_id","_overflow","pushMaterializedTreeId","returnFiber","numberOfForks","slotIndex","number","popTreeContext","getSuspendedTreeContext","restoreSuspendedTreeContext","suspendedContext","getIsHydrating","hydrationParentFiber","nextHydratableInstance","isHydrating","didSuspendOrErrorDEV","hydrationErrors","warnIfHydrating","markDidThrowWhileHydratingDEV","didSuspendOrErrorWhileHydratingDEV","enterHydrationState","parentInstance","containerInfo","reenterHydrationStateFromDehydratedSuspenseInstance","suspenseInstance","treeContext","warnUnhydratedInstance","isConcurrentMode","mode","memoizedProps","suspenseState","dehydrated","deleteHydratableInstance","childToDelete","createFiberFromHostInstanceForDeletion","deletions","warnNonhydratedInstance","parentContainer","pendingProps","text","parentType","parentProps","_type","_props","_text","_isConcurrentMode","_parentInstance","_type2","_props2","_text2","insertNonHydratedInstance","tryHydrate","nextInstance","textInstance","retryLane","dehydratedFragment","createFiberFromDehydratedFragment","shouldClientRenderOnMismatch","throwOnHydrationMismatch","tryToClaimNextHydratableInstance","firstAttemptedInstance","prevHydrationParentFiber","prepareToHydrateHostInstance","rootContainerInstance","hostContext","shouldWarnIfMismatchDev","updatePayload","updateQueue","prepareToHydrateHostTextInstance","textContent","shouldUpdate","_isConcurrentMode2","prepareToHydrateHostSuspenseInstance","skipPastDehydratedSuspenseInstance","popToNextHostParent","popHydrationState","warnIfUnhydratedTailNodes","hasUnhydratedTailNodes","resetHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","queueHydrationError","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","ReactDebugCurrentFrame$1","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","getCurrentFiber","setIsRendering","rendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","setToSortedString","array","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","sortedNames","_sortedNames","_sortedNames2","_sortedNames3","_sortedNames4","_sortedNames5","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","typeName","hasToStringTag","toStringTag","constructor","willCoercionThrow","testStringCoercion","e","checkKeyStringCoercion","checkPropStringCoercion","propName","resolveDefaultProps","baseProps","defaultProps","valueCursor","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","_currentValue","_currentRenderer","_currentValue2","_currentRenderer2","popProvider","currentValue","scheduleContextWorkOnParentPath","propagationRoot","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","update","createUpdate","ForceUpdate","sharedQueue","shared","pending","next","parentSuspense","_alternate","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","contextItem","memoizedValue","concurrentQueues","pushConcurrentUpdateQueue","finishQueueingConcurrentUpdates","lastInterleavedUpdate","interleaved","firstInterleavedUpdate","lastPendingUpdate","firstPendingUpdate","enqueueConcurrentHookUpdate","markUpdateLaneFromFiberToRoot","enqueueConcurrentHookUpdateAndEagerlyBailout","enqueueConcurrentClassUpdate","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","warnAboutUpdateOnNotYetMountedFiberInDEV","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","isUnsafeClassRenderPhaseUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","_clone","_lastPendingUpdate","_firstPendingUpdate","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","fakeInternalInstance","emptyRefsObject","refs","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","callerName","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","inst","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldProps","newProps","oldState","nextContext","shouldComponentUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","state","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","_state","adoptClassInstance","updater","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","_componentName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","fiberFlags","resumeMountClassInstance","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","_fiberFlags","_fiberFlags2","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","nextUnmaskedContext","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","_store","validated","coerceRef","mixedRef","ref","_self","resolvedInst","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","warnOnFunctionType","resolveLazy","lazyType","ChildReconciler","shouldTrackSideEffects","deleteChild","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","created","createFiberFromText","existing","updateElement","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","_created","_created2","_created3","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","_matchedFiber","_matchedFiber2","_matchedFiber3","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","_newFiber","_numberOfForks","_newFiber2","delete","_numberOfForks2","reconcileChildrenIterator","newChildrenIterable","iteratorFn","entries","_newChildren","_step","done","step","_newFiber3","_numberOfForks3","_newFiber4","_numberOfForks4","reconcileSingleTextNode","reconcileSingleElement","_existing","_created4","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","NO_CONTEXT","contextStackCursor$1","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","findFirstSuspended","row","revealOrder","didSuspend","NoFlags$1","HasEffect","Insertion","Layout","Passive$1","workInProgressSources","resetWorkInProgressVersions","mutableSource","_workInProgressVersionPrimary","_workInProgressVersionSecondary","registerMutableSourceForHydration","getVersion","_getVersion","version","mutableSourceEagerHydrationData","ReactCurrentDispatcher$1","ReactCurrentBatchConfig$1","didWarnAboutMismatchedHooksForComponent","didWarnUncachedGetSnapshot","currentlyRenderingFiber$1","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","localIdCounter","globalClientIdCounter","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","checkDidRenderIdHook","didRenderIdHook","bailoutHooks","resetHooksAfterThrow","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountMutableSource","getSnapshot","subscribe","updateMutableSource","mountSyncExternalStore","getServerSnapshot","nextSnapshot","cachedSnapshot","getWorkInProgressRoot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","mountState","dispatchSetState","updateState","rerenderState","create","destroy","firstEffect","mountRef","initialValue","_ref2","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","mountInsertionEffect","updateInsertionEffect","mountLayoutEffect","updateLayoutEffect","imperativeHandleEffect","refCallback","_inst","refObject","_inst2","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","updateDeferredValue","resolvedCurrentHook","updateDeferredValueImpl","rerenderDeferredValue","shouldDeferValue","deferredLane","startTransition","setPending","options","prevTransition","currentTransition","_updatedFibers","updatedFibersCount","mountTransition","_mountState","isPending","start","updateTransition","_updateState","rerenderTransition","_rerenderState","getIsUpdatingOpaqueValueInRenderPhaseInDEV","mountId","identifierPrefix","treeId","localId","globalClientId","updateId","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","markUpdateInDevTools","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","now$1","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","parentFiber","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","createCapturedValueAtFiber","digest","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","setTimeout","PossiblyWeakMap$1","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","markFailedErrorBoundaryForHotReloading","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","pingCache","threadIDs","ping","pingSuspendedRoot","restorePendingUpdaters","then","attachRetryListener","suspenseBoundary","wakeables","resetSuspendedComponent","rootRenderLanes","currentSource","getNearestSuspenseBoundaryToCapture","markSuspenseBoundaryShouldCapture","currentSourceFiber","throwException","renderDidSuspendDelayIfPossible","uncaughtSuspenseError","_suspenseBoundary","renderDidError","_errorInfo","isAlreadyFailedLegacyErrorBoundary","_lane","_update","getSuspendedCache","ReactCurrentOwner$1","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","hasId","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","_innerPropTypes","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","prevProps","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","baseLanes","cachePool","transitions","pushRenderLanes","spawnedCachePool","nextBaseLanes","prevBaseLanes","_nextState","_nextState2","subtreeRenderLanes","_subtreeRenderLanes","updateMode","updateProfiler","markRef","updateClassComponent","shouldError","_instance","tempInstance","hasContext","resetSuspendedCurrentOnMountInLegacyMode","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","overrideState","cache","pendingSuspenseBoundaries","recoverableError","mountHostRootWithoutHydrating","_recoverableError","updateHostComponent","isDirectTextChild","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","_componentName2","ownerName","warningKey","debugSource","fileName","lineNumber","_componentName3","_componentName4","SUSPENDED_MARKER","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseContext","getRemainingWorkInPrimaryTree","updateSuspenseComponent","shouldSuspend","showFallback","mountDehydratedSuspenseComponent","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","mountSuspensePrimaryChildren","_dehydrated","updateDehydratedSuspenseComponent","_nextFallbackChildren","_nextPrimaryChildren","fallbackChildFragment","updateSuspenseFallbackChildren","_primaryChildFragment2","_nextPrimaryChildren2","_primaryChildFragment3","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","treeBaseDuration","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","subtreeFlags","retrySuspenseComponentWithoutHydrating","mountSuspenseFallbackAfterRetryWithoutHydrating","fiberMode","_getSuspenseInstanceF","capturedValue","attemptHydrationAtLane","_capturedValue","retry","retryDehydratedSuspenseBoundary","_capturedValue2","_primaryChildFragment4","scheduleSuspenseWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","toLowerCase","validateTailOptions","tailMode","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","validateSuspenseListChildren","childrenIterator","_i","initSuspenseListRenderState","isBackwards","tail","renderState","renderingStartTime","last","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","_tail","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerType","newValue","providerPropTypes","oldValue","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","Consumer","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","_hasChildWork","beginWork","_debugNeedsRemount","unresolvedProps","_Component","_unresolvedProps","_resolvedProps","_unresolvedProps2","_resolvedProps2","_unresolvedProps3","_resolvedProps3","_Component2","_unresolvedProps4","_resolvedProps4","markUpdate","markRef$1","hadNoMutationsEffects","completedWork","didBailout","appendAllChildren","updateHostContainer","updateHostComponent$1","updateHostText$1","needsVisibilityToggle","isHidden","currentHostContext","oldText","newText","appendAllChildrenToContainer","containerChildSet","_instance2","portalOrRoot","childrenUnchanged","container","newChildSet","pendingChildren","currentInstance","recyclableInstance","newInstance","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","_tailNode","_lastTailNode","bubbleProperties","newChildLanes","_treeBaseDuration","_child2","_child3","completeDehydratedSuspenseBoundary","wasHydrated","isTimedOutSuspense","_isTimedOutSuspense","_primaryChildFragment","completeWork","fiberRoot","_wasHydrated","_rootContainerInstance","_currentHostContext","_wasHydrated2","fallthroughToNormalSuspensePath","nextDidTimeout","prevDidTimeout","_offscreenFiber2","hasInvisibleChildContext","unstable_avoidThisFallback","renderDidSuspend","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","_suspended","_newThenables","previousSibling","popRenderLanes","nextIsHidden","_prevState","prevIsHidden","unwindWork","_flags","_flags2","unwindInterruptedWork","interruptedWork","invokeGuardedCallbackProd","func","d","f","funcArgs","onError","invokeGuardedCallbackImpl","window","dispatchEvent","document","createEvent","fakeNode","createElement","invokeGuardedCallbackDev","evt","didCall","windowEvent","event","windowEventDescriptor","getOwnPropertyDescriptor","restoreAfterDispatch","removeEventListener","evtType","didSetError","isCrossOriginError","handleWindowError","colno","lineno","defaultPrevented","inner","addEventListener","initEvent","invokeGuardedCallbackImpl$1","hasError","caughtError","reporter","invokeGuardedCallback","hasCaughtError","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","inProgressLanes","inProgressRoot","reportUncaughtErrorInDEV","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallCommitHookLayoutEffectListMount","nearestMountedAncestor","commitHookEffectListMount","captureCommitPhaseError","safelyCallComponentWillUnmount","safelyCallComponentDidMount","safelyAttachRef","commitAttachRef","safelyDetachRef","retVal","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","commitBeforeMutationEffects_complete","commitBeforeMutationEffectsOnFiber","snapshot","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","setIsRunningInsertionEffect","commitPassiveEffectDurations","finishedRoot","_finishedWork$memoize","onPostCommit","phase","outer","commitLayoutEffectOnFiber","committedLanes","_updateQueue","_finishedWork$memoize2","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitSuspenseHydrationCallbacks","reappearLayoutEffectsOnFiber","hideOrUnhideAllChildren","hostSubtreeRoot","_instance3","instanceToUse","detachFiberMutation","detachFiberAfterEffects","hostInstance","emptyPortalContainer","emptyChildSet","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","before","insertOrAppendPlacementNode","_parent","_before","insertOrAppendPlacementNodeIntoContainer","isHost","hostParent","hostParentIsContainer","commitDeletionEffects","deletedFiber","findParent","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","prevHostParent","prevHostParentIsContainer","_prevHostParent","_prevHostParentIsContainer","_effect","prevOffscreenSubtreeWasHidden","commitSuspenseCallback","attachSuspenseRetryListeners","retryCache","resolveRetryWakeable","commitMutationEffects","commitMutationEffectsOnFiber","recursivelyTraverseMutationEffects","prevDebugFiber","commitReconciliationEffects","_instance4","prevRootState","_containerInfo","_pendingChildren","offscreenFiber","offscreenInstance","wasHidden","markCommitTimeOfFallback","_wasHidden","_offscreenInstance","_newState","_isHidden","offscreenBoundary","offscreenChild","disappearLayoutEffects_begin","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","newOffscreenSubtreeIsHidden","commitLayoutMountEffects_complete","newOffscreenSubtreeWasHidden","prevOffscreenSubtreeIsHidden","reappearLayoutEffects_begin","disappearLayoutEffects_complete","reappearLayoutEffects_complete","commitPassiveMountEffects","committedTransitions","commitPassiveMountEffects_begin","commitPassiveMountEffects_complete","commitPassiveMountOnFiber","commitPassiveUnmountEffects","commitPassiveUnmountEffects_begin","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountOnFiber","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","invokeLayoutEffectMountInDEV","invokePassiveEffectMountInDEV","invokeLayoutEffectUnmountInDEV","invokePassiveEffectUnmountInDEV","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","symbolFor","createComponentSelector","createHasPseudoClassSelector","selectors","createRoleSelector","role","createTextSelector","createTestNameSelector","findFiberRootForHostRoot","hostRoot","maybeFiber","matchSelector","selector","hasMatchingPaths","indexOf","dataTestID","selectorToString","findPaths","matchingFibers","selectorIndex","findAllNodes","instanceRoots","from","getFindAllNodesFailureDescription","maxSelectorIndex","matchedNames","unmatchedNames","findBoundingRects","boundingRects","targetRect","targetLeft","targetRight","width","targetTop","targetBottom","height","j","otherRect","otherLeft","otherRight","otherTop","otherBottom","splice","focusWithin","commitHooks","onCommitRoot$1","commitHook","observeVisibleRects","_setupIntersectionObs","disconnect","observe","unobserve","nextInstanceRoots","target","ReactCurrentActQueue","isLegacyActEnvironment","isReactActEnvironmentGlobal","IS_REACT_ACT_ENVIRONMENT","jestIsDefined","jest","isConcurrentActEnvironment","ceil","ReactCurrentDispatcher$2","ReactCurrentOwner$2","ReactCurrentBatchConfig$2","ReactCurrentActQueue$1","NoContext","BatchedContext","RenderContext","CommitContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","pendingPassiveTransitions","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","isFlushingPassiveEffects","didScheduleUpdateDuringPassiveEffects","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","rootWithPassiveNestedUpdates","currentEventTime","currentEventTransitionLane","isRunningInsertionEffect","isTransition","eventLane","requestRetryLane","checkForNestedUpdates","warnAboutRenderPhaseUpdatesInDEV","warnIfUpdatesNotWrappedWithActDEV","markRootSuspended$1","ensureRootIsScheduled","isBatchingLegacy","scheduleInitialHydrationOnRoot","existingCallbackNode","callbackNode","cancelCallback$1","callbackPriority","newCallbackPriority","existingCallbackPriority","fakeActCallbackNode","newCallbackNode","didScheduleLegacyUpdate","performSyncWorkOnRoot","scheduleCallback$1","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","exitStatus","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","prepareFreshStack","renderWasConcurrent","isRenderConsistentWithExternalStores","_errorRetryLanes","_fatalError","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","rootWorkInProgress","errorsFromSecondAttempt","errors","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","_msUntilTimeout","jnd","checks","renderedValue","flushRoot","deferredUpdates","batchedUpdates","prevExecutionContext","discreteUpdates","flushSync","isAlreadyRendering","flushControlled","handleError","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","beginWork$1","_next","siblingFiber","recoverableErrors","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","subtreeHasEffects","rootHasEffect","rootDidHavePassiveEffects","commitDoubleInvokeEffectsInDEV","onRecoverableError","renderPriority","flushPassiveEffectsImpl","profilerEffects","_fiber","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","timeElapsed","hasPassiveEffects","invokeEffectsInDev","invokeEffectFn","primarySubtreeFlag","didWarnStateUpdateForNotYetMountedComponent","dummyFiber","originalWorkInProgressCopy","assignFiberPropertiesInDEV","originalError","replayError","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","renderingComponentName","dedupeKey","setStateComponentName","schedulingFiber","priorityLevel","actQueue","isRunning","resolveFamily","failedBoundaries","setRefreshHandler","handler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","_root","findHostInstancesForRefresh","families","hostInstances","types","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","FiberNode","Number","NaN","createFiber","shouldConstruct$1","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","elements","primaryChildInstance","content","dehydratedNode","FiberRootNode","hydrate","_debugRootType","createFiberRoot","initialChildren","hydrationCallbacks","transitionCallbacks","uninitializedFiber","_initialState","ReactVersion","createPortal","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","findHostInstance","hostFiber","findHostInstanceWithWarning","methodName","createContainer","createHydrationContainer","current$1","getPublicRootInstance","containerFiber","attemptSynchronousHydration","markRetryLaneIfNotHydrated","markRetryLaneImpl","attemptDiscreteHydration","attemptContinuousHydration","attemptHydrationAtCurrentPriority","findHostInstanceWithNoPortals","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","obj","path","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldErrorImpl","newShouldSuspendImpl","findHostInstanceByFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","reconcilerVersion"],"sources":["/Users/nicolasgrenier/Documents/Code/fighting_RPG/node_modules/react-reconciler/cjs/react-reconciler.development.js"],"sourcesContent":["/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  module.exports = function $$$reconciler($$$hostConfig) {\n    var exports = {};\n'use strict';\n\nvar React = require('react');\nvar Scheduler = require('scheduler');\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nvar suppressWarning = false;\nfunction setSuppressWarning(newSuppressWarning) {\n  {\n    suppressWarning = newSuppressWarning;\n  }\n} // In DEV, calls to console.warn and console.error get replaced\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    if (!suppressWarning) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    if (!suppressWarning) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar assign = Object.assign;\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\nfunction get(key) {\n  return key._reactInternals;\n}\nfunction set(key, value) {\n  key._reactInternals = value;\n}\n\n// -----------------------------------------------------------------------------\n// the react-reconciler package.\n\nvar enableNewReconciler = false; // Support legacy Primer support on internal FB www\n\nvar enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\nvar enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\nvar warnAboutStringRefs = false; // -----------------------------------------------------------------------------\n// Debugging and DevTools\n// -----------------------------------------------------------------------------\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\n\nvar enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n\nvar enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n\nvar enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\nvar FunctionComponent = 0;\nvar ClassComponent = 1;\nvar IndeterminateComponent = 2; // Before we know whether it is function or class\n\nvar HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\nvar HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\nvar HostComponent = 5;\nvar HostText = 6;\nvar Fragment = 7;\nvar Mode = 8;\nvar ContextConsumer = 9;\nvar ContextProvider = 10;\nvar ForwardRef = 11;\nvar Profiler = 12;\nvar SuspenseComponent = 13;\nvar MemoComponent = 14;\nvar SimpleMemoComponent = 15;\nvar LazyComponent = 16;\nvar IncompleteClassComponent = 17;\nvar DehydratedFragment = 18;\nvar SuspenseListComponent = 19;\nvar ScopeComponent = 21;\nvar OffscreenComponent = 22;\nvar LegacyHiddenComponent = 23;\nvar CacheComponent = 24;\nvar TracingMarkerComponent = 25;\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_SCOPE_TYPE = Symbol.for('react.scope');\nvar REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nfunction getWrappedName$1(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n} // Keep in sync with shared/getComponentNameFromType\n\n\nfunction getContextName$1(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentNameFromFiber(fiber) {\n  var tag = fiber.tag,\n      type = fiber.type;\n\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n\n    case ContextConsumer:\n      var context = type;\n      return getContextName$1(context) + '.Consumer';\n\n    case ContextProvider:\n      var provider = type;\n      return getContextName$1(provider._context) + '.Provider';\n\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n\n    case ForwardRef:\n      return getWrappedName$1(type, type.render, 'ForwardRef');\n\n    case Fragment:\n      return 'Fragment';\n\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n\n    case HostPortal:\n      return 'Portal';\n\n    case HostRoot:\n      return 'Root';\n\n    case HostText:\n      return 'Text';\n\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n\n      return 'Mode';\n\n    case OffscreenComponent:\n      return 'Offscreen';\n\n    case Profiler:\n      return 'Profiler';\n\n    case ScopeComponent:\n      return 'Scope';\n\n    case SuspenseComponent:\n      return 'Suspense';\n\n    case SuspenseListComponent:\n      return 'SuspenseList';\n\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      break;\n\n  }\n\n  return null;\n}\n\n// Don't change these two values. They're used by React Dev Tools.\nvar NoFlags =\n/*                      */\n0;\nvar PerformedWork =\n/*                */\n1; // You can change the rest (and add more).\n\nvar Placement =\n/*                    */\n2;\nvar Update =\n/*                       */\n4;\nvar ChildDeletion =\n/*                */\n16;\nvar ContentReset =\n/*                 */\n32;\nvar Callback =\n/*                     */\n64;\nvar DidCapture =\n/*                   */\n128;\nvar ForceClientRender =\n/*            */\n256;\nvar Ref =\n/*                          */\n512;\nvar Snapshot =\n/*                     */\n1024;\nvar Passive =\n/*                      */\n2048;\nvar Hydrating =\n/*                    */\n4096;\nvar Visibility =\n/*                   */\n8192;\nvar StoreConsistency =\n/*             */\n16384;\nvar LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\nvar HostEffectMask =\n/*               */\n32767; // These are not really side effects, but we still reuse this field.\n\nvar Incomplete =\n/*                   */\n32768;\nvar ShouldCapture =\n/*                */\n65536;\nvar ForceUpdateForLegacySuspense =\n/* */\n131072;\nvar Forked =\n/*                       */\n1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\n\nvar RefStatic =\n/*                    */\n2097152;\nvar LayoutStatic =\n/*                 */\n4194304;\nvar PassiveStatic =\n/*                */\n8388608; // These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\n\nvar MountLayoutDev =\n/*               */\n16777216;\nvar MountPassiveDev =\n/*              */\n33554432; // Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nvar BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n// flag logic (see #20043)\nUpdate | Snapshot | ( 0);\nvar MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\nvar LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\nvar PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\n\nvar StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nfunction getNearestMountedFiber(fiber) {\n  var node = fiber;\n  var nearestMounted = fiber;\n\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    var nextNode = node;\n\n    do {\n      node = nextNode;\n\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  } // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n\n\n  return null;\n}\nfunction isFiberMounted(fiber) {\n  return getNearestMountedFiber(fiber) === fiber;\n}\nfunction isMounted(component) {\n  {\n    var owner = ReactCurrentOwner.current;\n\n    if (owner !== null && owner.tag === ClassComponent) {\n      var ownerFiber = owner;\n      var instance = ownerFiber.stateNode;\n\n      if (!instance._warnedAboutRefsInRender) {\n        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n      }\n\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  var fiber = get(component);\n\n  if (!fiber) {\n    return false;\n  }\n\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nfunction findCurrentFiberUsingSlowPath(fiber) {\n  var alternate = fiber.alternate;\n\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    var nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n\n    return fiber;\n  } // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n\n\n  var a = fiber;\n  var b = alternate;\n\n  while (true) {\n    var parentA = a.return;\n\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n\n    var parentB = parentA.alternate;\n\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      var nextParent = parentA.return;\n\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      } // If there's no parent, we're at the root.\n\n\n      break;\n    } // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n\n\n    if (parentA.child === parentB.child) {\n      var child = parentA.child;\n\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n\n        child = child.sibling;\n      } // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n\n\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      var didFindChild = false;\n      var _child = parentA.child;\n\n      while (_child) {\n        if (_child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n\n        if (_child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n\n        _child = _child.sibling;\n      }\n\n      if (!didFindChild) {\n        // Search parent B's child set\n        _child = parentB.child;\n\n        while (_child) {\n          if (_child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n\n          if (_child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n\n          _child = _child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  } // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n\n\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  } // Otherwise B has to be current branch.\n\n\n  return alternate;\n}\nfunction findCurrentHostFiber(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n}\n\nfunction findCurrentHostFiberImpl(node) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  var child = node.child;\n\n  while (child !== null) {\n    var match = findCurrentHostFiberImpl(child);\n\n    if (match !== null) {\n      return match;\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nfunction findCurrentHostFiberWithNoPortals(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  var child = node.child;\n\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      var match = findCurrentHostFiberWithNoPortalsImpl(child);\n\n      if (match !== null) {\n        return match;\n      }\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// This is a host config that's used for the `react-reconciler` package on npm.\n// It is only used by third-party renderers.\n//\n// Its API lets you pass the host config as an argument.\n// However, inside the `react-reconciler` we treat host config as a module.\n// This file is a shim between two worlds.\n//\n// It works because the `react-reconciler` bundle is wrapped in something like:\n//\n// module.exports = function ($$$config) {\n//   /* reconciler code */\n// }\n//\n// So `$$$config` looks like a global variable, but it's\n// really an argument to a top-level wrapping function.\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\nvar getPublicInstance = $$$hostConfig.getPublicInstance;\nvar getRootHostContext = $$$hostConfig.getRootHostContext;\nvar getChildHostContext = $$$hostConfig.getChildHostContext;\nvar prepareForCommit = $$$hostConfig.prepareForCommit;\nvar resetAfterCommit = $$$hostConfig.resetAfterCommit;\nvar createInstance = $$$hostConfig.createInstance;\nvar appendInitialChild = $$$hostConfig.appendInitialChild;\nvar finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\nvar prepareUpdate = $$$hostConfig.prepareUpdate;\nvar shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\nvar createTextInstance = $$$hostConfig.createTextInstance;\nvar scheduleTimeout = $$$hostConfig.scheduleTimeout;\nvar cancelTimeout = $$$hostConfig.cancelTimeout;\nvar noTimeout = $$$hostConfig.noTimeout;\nvar isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\nvar warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\nvar supportsMutation = $$$hostConfig.supportsMutation;\nvar supportsPersistence = $$$hostConfig.supportsPersistence;\nvar supportsHydration = $$$hostConfig.supportsHydration;\nvar getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\nvar beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;\nvar afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;\nvar preparePortalMount = $$$hostConfig.preparePortalMount;\nvar prepareScopeUpdate = $$$hostConfig.prepareScopeUpdate;\nvar getInstanceFromScope = $$$hostConfig.getInstanceFromScope;\nvar getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\nvar detachDeletedInstance = $$$hostConfig.detachDeletedInstance; // -------------------\n//      Microtasks\n//     (optional)\n// -------------------\n\nvar supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\nvar scheduleMicrotask = $$$hostConfig.scheduleMicrotask; // -------------------\n//      Test selectors\n//     (optional)\n// -------------------\n\nvar supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\nvar findFiberRoot = $$$hostConfig.findFiberRoot;\nvar getBoundingRect = $$$hostConfig.getBoundingRect;\nvar getTextContent = $$$hostConfig.getTextContent;\nvar isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\nvar matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\nvar setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\nvar setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------\n//      Mutation\n//     (optional)\n// -------------------\n\nvar appendChild = $$$hostConfig.appendChild;\nvar appendChildToContainer = $$$hostConfig.appendChildToContainer;\nvar commitTextUpdate = $$$hostConfig.commitTextUpdate;\nvar commitMount = $$$hostConfig.commitMount;\nvar commitUpdate = $$$hostConfig.commitUpdate;\nvar insertBefore = $$$hostConfig.insertBefore;\nvar insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\nvar removeChild = $$$hostConfig.removeChild;\nvar removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\nvar resetTextContent = $$$hostConfig.resetTextContent;\nvar hideInstance = $$$hostConfig.hideInstance;\nvar hideTextInstance = $$$hostConfig.hideTextInstance;\nvar unhideInstance = $$$hostConfig.unhideInstance;\nvar unhideTextInstance = $$$hostConfig.unhideTextInstance;\nvar clearContainer = $$$hostConfig.clearContainer; // -------------------\n//     Persistence\n//     (optional)\n// -------------------\n\nvar cloneInstance = $$$hostConfig.cloneInstance;\nvar createContainerChildSet = $$$hostConfig.createContainerChildSet;\nvar appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\nvar finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\nvar replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\nvar cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\nvar cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance; // -------------------\n//     Hydration\n//     (optional)\n// -------------------\n\nvar canHydrateInstance = $$$hostConfig.canHydrateInstance;\nvar canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\nvar canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;\nvar isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;\nvar isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;\nvar getSuspenseInstanceFallbackErrorDetails = $$$hostConfig.getSuspenseInstanceFallbackErrorDetails;\nvar registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;\nvar getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\nvar getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\nvar getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;\nvar getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\nvar hydrateInstance = $$$hostConfig.hydrateInstance;\nvar hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\nvar hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\nvar getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\nvar commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\nvar commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;\nvar clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\nvar clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;\nvar shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;\nvar didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\nvar didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\nvar didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;\nvar didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\nvar didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\nvar didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\nvar didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\nvar didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\nvar didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\nvar didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\nvar didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\nvar didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\nvar didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\nvar didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;\nvar errorHydratingContainer = $$$hostConfig.errorHydratingContainer;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\n\nfunction describeClassComponentFrame(ctor, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(ctor, true);\n  }\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar valueStack = [];\nvar fiberStack;\n\n{\n  fiberStack = [];\n}\n\nvar index = -1;\n\nfunction createCursor(defaultValue) {\n  return {\n    current: defaultValue\n  };\n}\n\nfunction pop(cursor, fiber) {\n  if (index < 0) {\n    {\n      error('Unexpected pop.');\n    }\n\n    return;\n  }\n\n  {\n    if (fiber !== fiberStack[index]) {\n      error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n  valueStack[index] = null;\n\n  {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push(cursor, value, fiber) {\n  index++;\n  valueStack[index] = cursor.current;\n\n  {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nvar warnedAboutMissingGetChildContext;\n\n{\n  warnedAboutMissingGetChildContext = {};\n}\n\nvar emptyContextObject = {};\n\n{\n  Object.freeze(emptyContextObject);\n} // A cursor to the current merged context object on the stack.\n\n\nvar contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\nvar didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\n\nvar previousContext = emptyContextObject;\n\nfunction getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n  {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(workInProgress, unmaskedContext, maskedContext) {\n  {\n    var instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(workInProgress, unmaskedContext) {\n  {\n    var type = workInProgress.type;\n    var contextTypes = type.contextTypes;\n\n    if (!contextTypes) {\n      return emptyContextObject;\n    } // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n    var instance = workInProgress.stateNode;\n\n    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    var context = {};\n\n    for (var key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    {\n      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n\n\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged() {\n  {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type) {\n  {\n    var childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(fiber, context, didChange) {\n  {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(fiber, type, parentContext) {\n  {\n    var instance = fiber.stateNode;\n    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n    if (typeof instance.getChildContext !== 'function') {\n      {\n        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n\n          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n        }\n      }\n\n      return parentContext;\n    }\n\n    var childContext = instance.getChildContext();\n\n    for (var contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n      }\n    }\n\n    {\n      var name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return assign({}, parentContext, childContext);\n  }\n}\n\nfunction pushContextProvider(workInProgress) {\n  {\n    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n\n    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(workInProgress, type, didChange) {\n  {\n    var instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      var mergedContext = processChildContext(workInProgress, type, previousContext);\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber) {\n  {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    var node = fiber;\n\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n\n        case ClassComponent:\n          {\n            var Component = node.type;\n\n            if (isContextProvider(Component)) {\n              return node.stateNode.__reactInternalMemoizedMergedChildContext;\n            }\n\n            break;\n          }\n      }\n\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\nvar LegacyRoot = 0;\nvar ConcurrentRoot = 1;\n\nvar NoMode =\n/*                         */\n0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\nvar ConcurrentMode =\n/*                 */\n1;\nvar ProfileMode =\n/*                    */\n2;\nvar StrictLegacyMode =\n/*               */\n8;\nvar StrictEffectsMode =\n/*              */\n16;\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\nvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nfunction clz32Fallback(x) {\n  var asUint = x >>> 0;\n\n  if (asUint === 0) {\n    return 32;\n  }\n\n  return 31 - (log(asUint) / LN2 | 0) | 0;\n}\n\n// If those values are changed that package should be rebuilt and redeployed.\n\nvar TotalLanes = 31;\nvar NoLanes =\n/*                        */\n0;\nvar NoLane =\n/*                          */\n0;\nvar SyncLane =\n/*                        */\n1;\nvar InputContinuousHydrationLane =\n/*    */\n2;\nvar InputContinuousLane =\n/*             */\n4;\nvar DefaultHydrationLane =\n/*            */\n8;\nvar DefaultLane =\n/*                     */\n16;\nvar TransitionHydrationLane =\n/*                */\n32;\nvar TransitionLanes =\n/*                       */\n4194240;\nvar TransitionLane1 =\n/*                        */\n64;\nvar TransitionLane2 =\n/*                        */\n128;\nvar TransitionLane3 =\n/*                        */\n256;\nvar TransitionLane4 =\n/*                        */\n512;\nvar TransitionLane5 =\n/*                        */\n1024;\nvar TransitionLane6 =\n/*                        */\n2048;\nvar TransitionLane7 =\n/*                        */\n4096;\nvar TransitionLane8 =\n/*                        */\n8192;\nvar TransitionLane9 =\n/*                        */\n16384;\nvar TransitionLane10 =\n/*                       */\n32768;\nvar TransitionLane11 =\n/*                       */\n65536;\nvar TransitionLane12 =\n/*                       */\n131072;\nvar TransitionLane13 =\n/*                       */\n262144;\nvar TransitionLane14 =\n/*                       */\n524288;\nvar TransitionLane15 =\n/*                       */\n1048576;\nvar TransitionLane16 =\n/*                       */\n2097152;\nvar RetryLanes =\n/*                            */\n130023424;\nvar RetryLane1 =\n/*                             */\n4194304;\nvar RetryLane2 =\n/*                             */\n8388608;\nvar RetryLane3 =\n/*                             */\n16777216;\nvar RetryLane4 =\n/*                             */\n33554432;\nvar RetryLane5 =\n/*                             */\n67108864;\nvar SomeRetryLane = RetryLane1;\nvar SelectiveHydrationLane =\n/*          */\n134217728;\nvar NonIdleLanes =\n/*                          */\n268435455;\nvar IdleHydrationLane =\n/*               */\n268435456;\nvar IdleLane =\n/*                        */\n536870912;\nvar OffscreenLane =\n/*                   */\n1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n// It should be kept in sync with the Lanes values above.\n\nfunction getLabelForLane(lane) {\n  {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\nvar NoTimestamp = -1;\nvar nextTransitionLane = TransitionLane1;\nvar nextRetryLane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes) {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n\n    case InputContinuousLane:\n      return InputContinuousLane;\n\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n\n    case DefaultLane:\n      return DefaultLane;\n\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n\n    case IdleLane:\n      return IdleLane;\n\n    case OffscreenLane:\n      return OffscreenLane;\n\n    default:\n      {\n        error('Should have found matching lanes. This is a bug in React.');\n      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n\n      return lanes;\n  }\n}\n\nfunction getNextLanes(root, wipLanes) {\n  // Early bailout if there's no pending work left.\n  var pendingLanes = root.pendingLanes;\n\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  var nextLanes = NoLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n\n  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n  if (nonIdlePendingLanes !== NoLanes) {\n    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  } // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n\n\n  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n  // bother waiting until the root is complete.\n  (wipLanes & suspendedLanes) === NoLanes) {\n    var nextLane = getHighestPriorityLane(nextLanes);\n    var wipLane = getHighestPriorityLane(wipLanes);\n\n    if ( // Tests whether the next lane is equal or lower priority than the wip\n    // one. This works because the bits decrease in priority as you go left.\n    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n    // only difference between default updates and transition updates is that\n    // default updates do not support refresh transitions.\n    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  } // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n\n\n  var entangledLanes = root.entangledLanes;\n\n  if (entangledLanes !== NoLanes) {\n    var entanglements = root.entanglements;\n    var lanes = nextLanes & entangledLanes;\n\n    while (lanes > 0) {\n      var index = pickArbitraryLaneIndex(lanes);\n      var lane = 1 << index;\n      nextLanes |= entanglements[index];\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\nfunction getMostRecentEventTime(root, lanes) {\n  var eventTimes = root.eventTimes;\n  var mostRecentEventTime = NoTimestamp;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var eventTime = eventTimes[index];\n\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane, currentTime) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n\n    default:\n      {\n        error('Should have found matching lanes. This is a bug in React.');\n      }\n\n      return NoTimestamp;\n  }\n}\n\nfunction markStarvedLanesAsExpired(root, currentTime) {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n  var pendingLanes = root.pendingLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes;\n  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n\n  var lanes = pendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var expirationTime = expirationTimes[index];\n\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n} // This returns the highest priority pending lanes regardless of whether they\n// are suspended.\n\nfunction getHighestPriorityPendingLanes(root) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\nfunction getLanesToRetrySynchronouslyOnError(root) {\n  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n\n  return NoLanes;\n}\nfunction includesSyncLane(lanes) {\n  return (lanes & SyncLane) !== NoLanes;\n}\nfunction includesNonIdleWork(lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nfunction includesOnlyRetries(lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nfunction includesOnlyNonUrgentLanes(lanes) {\n  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n  return (lanes & UrgentLanes) === NoLanes;\n}\nfunction includesOnlyTransitions(lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\nfunction includesBlockingLane(root, lanes) {\n\n  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\nfunction includesExpiredLane(root, lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\nfunction isTransitionLane(lane) {\n  return (lane & TransitionLanes) !== NoLanes;\n}\nfunction claimNextTransitionLane() {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  var lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n    nextTransitionLane = TransitionLane1;\n  }\n\n  return lane;\n}\nfunction claimNextRetryLane() {\n  var lane = nextRetryLane;\n  nextRetryLane <<= 1;\n\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\n    nextRetryLane = RetryLane1;\n  }\n\n  return lane;\n}\nfunction getHighestPriorityLane(lanes) {\n  return lanes & -lanes;\n}\nfunction pickArbitraryLane(lanes) {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nfunction includesSomeLane(a, b) {\n  return (a & b) !== NoLanes;\n}\nfunction isSubsetOfLanes(set, subset) {\n  return (set & subset) === subset;\n}\nfunction mergeLanes(a, b) {\n  return a | b;\n}\nfunction removeLanes(set, subset) {\n  return set & ~subset;\n}\nfunction intersectLanes(a, b) {\n  return a & b;\n} // Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\n\nfunction laneToLanes(lane) {\n  return lane;\n}\nfunction higherPriorityLane(a, b) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\nfunction createLaneMap(initial) {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  var laneMap = [];\n\n  for (var i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n\n  return laneMap;\n}\nfunction markRootUpdated(root, updateLane, eventTime) {\n  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  var eventTimes = root.eventTimes;\n  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n\n  eventTimes[index] = eventTime;\n}\nfunction markRootSuspended(root, suspendedLanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n  var expirationTimes = root.expirationTimes;\n  var lanes = suspendedLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootPinged(root, pingedLanes, eventTime) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\nfunction markRootFinished(root, remainingLanes) {\n  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n  root.pendingLanes = remainingLanes; // Let's try everything again\n\n  root.suspendedLanes = NoLanes;\n  root.pingedLanes = NoLanes;\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n  root.entangledLanes &= remainingLanes;\n  var entanglements = root.entanglements;\n  var eventTimes = root.eventTimes;\n  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n  var lanes = noLongerPendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootEntangled(root, entangledLanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n  var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n  var entanglements = root.entanglements;\n  var lanes = rootEntangledLanes;\n\n  while (lanes) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n\n    if ( // Is this one of the newly entangled lanes?\n    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n    entanglements[index] & entangledLanes) {\n      entanglements[index] |= entangledLanes;\n    }\n\n    lanes &= ~lane;\n  }\n}\nfunction getBumpedLaneForHydration(root, renderLanes) {\n  var renderLane = getHighestPriorityLane(renderLanes);\n  var lane;\n\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  } // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n\n\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\nfunction addFiberToLanesMap(root, fiber, lanes) {\n\n  if (!isDevToolsPresent) {\n    return;\n  }\n\n  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\n  while (lanes > 0) {\n    var index = laneToIndex(lanes);\n    var lane = 1 << index;\n    var updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n    lanes &= ~lane;\n  }\n}\nfunction movePendingFibersToMemoized(root, lanes) {\n\n  if (!isDevToolsPresent) {\n    return;\n  }\n\n  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  var memoizedUpdaters = root.memoizedUpdaters;\n\n  while (lanes > 0) {\n    var index = laneToIndex(lanes);\n    var lane = 1 << index;\n    var updaters = pendingUpdatersLaneMap[index];\n\n    if (updaters.size > 0) {\n      updaters.forEach(function (fiber) {\n        var alternate = fiber.alternate;\n\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\nfunction getTransitionsForLanes(root, lanes) {\n  {\n    return null;\n  }\n}\n\nvar DiscreteEventPriority = SyncLane;\nvar ContinuousEventPriority = InputContinuousLane;\nvar DefaultEventPriority = DefaultLane;\nvar IdleEventPriority = IdleLane;\nvar currentUpdatePriority = NoLane;\nfunction getCurrentUpdatePriority() {\n  return currentUpdatePriority;\n}\nfunction setCurrentUpdatePriority(newPriority) {\n  currentUpdatePriority = newPriority;\n}\nfunction runWithPriority(priority, fn) {\n  var previousPriority = currentUpdatePriority;\n\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\nfunction higherEventPriority(a, b) {\n  return a !== 0 && a < b ? a : b;\n}\nfunction lowerEventPriority(a, b) {\n  return a === 0 || a > b ? a : b;\n}\nfunction isHigherEventPriority(a, b) {\n  return a !== 0 && a < b;\n}\nfunction lanesToEventPriority(lanes) {\n  var lane = getHighestPriorityLane(lanes);\n\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n\n  return IdleEventPriority;\n}\n\n// This module only exists as an ESM wrapper around the external CommonJS\nvar scheduleCallback = Scheduler.unstable_scheduleCallback;\nvar cancelCallback = Scheduler.unstable_cancelCallback;\nvar shouldYield = Scheduler.unstable_shouldYield;\nvar requestPaint = Scheduler.unstable_requestPaint;\nvar now = Scheduler.unstable_now;\nvar ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nvar UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nvar NormalPriority = Scheduler.unstable_NormalPriority;\nvar IdlePriority = Scheduler.unstable_IdlePriority;\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nvar unstable_yieldValue = Scheduler.unstable_yieldValue;\nvar unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n\nvar rendererID = null;\nvar injectedHook = null;\nvar injectedProfilingHooks = null;\nvar hasLoggedError = false;\nvar isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\nfunction injectInternals(internals) {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n\n  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n\n  if (!hook.supportsFiber) {\n    {\n      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n    } // DevTools exists, even though it doesn't support Fiber.\n\n\n    return true;\n  }\n\n  try {\n    if (enableSchedulingProfiler) {\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n      // This gives DevTools a way to feature detect that isn't tied to version number\n      // (since profiling and timeline are controlled by different feature flags).\n      internals = assign({}, internals, {\n        getLaneLabelMap: getLaneLabelMap,\n        injectProfilingHooks: injectProfilingHooks\n      });\n    }\n\n    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    {\n      error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\nfunction onScheduleRoot(root, children) {\n  {\n    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if ( !hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitRoot(root, eventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      var didError = (root.current.flags & DidCapture) === DidCapture;\n\n      if (enableProfilerTimer) {\n        var schedulerPriority;\n\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediatePriority;\n            break;\n\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingPriority;\n            break;\n\n          case DefaultEventPriority:\n            schedulerPriority = NormalPriority;\n            break;\n\n          case IdleEventPriority:\n            schedulerPriority = IdlePriority;\n            break;\n\n          default:\n            schedulerPriority = NormalPriority;\n            break;\n        }\n\n        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onPostCommitRoot(root) {\n  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitUnmount(fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction setIsStrictModeForDevtools(newIsStrictMode) {\n  {\n    if (typeof unstable_yieldValue === 'function') {\n      // We're in a test because Scheduler.unstable_yieldValue only exists\n      // in SchedulerMock. To reduce the noise in strict mode tests,\n      // suppress warnings and disable scheduler yielding during the double render\n      unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n      try {\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n      } catch (err) {\n        {\n          if (!hasLoggedError) {\n            hasLoggedError = true;\n\n            error('React instrumentation encountered an error: %s', err);\n          }\n        }\n      }\n    }\n  }\n} // Profiler API hooks\n\nfunction injectProfilingHooks(profilingHooks) {\n  injectedProfilingHooks = profilingHooks;\n}\n\nfunction getLaneLabelMap() {\n  {\n    var map = new Map();\n    var lane = 1;\n\n    for (var index = 0; index < TotalLanes; index++) {\n      var label = getLabelForLane(lane);\n      map.set(lane, label);\n      lane *= 2;\n    }\n\n    return map;\n  }\n}\n\nfunction markCommitStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\n      injectedProfilingHooks.markCommitStarted(lanes);\n    }\n  }\n}\nfunction markCommitStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\n      injectedProfilingHooks.markCommitStopped();\n    }\n  }\n}\nfunction markComponentRenderStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n  }\n}\nfunction markComponentRenderStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\n      injectedProfilingHooks.markComponentRenderStopped();\n    }\n  }\n}\nfunction markComponentPassiveEffectMountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n    }\n  }\n}\nfunction markComponentPassiveEffectMountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n    }\n  }\n}\nfunction markComponentPassiveEffectUnmountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n    }\n  }\n}\nfunction markComponentPassiveEffectUnmountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n    }\n  }\n}\nfunction markComponentLayoutEffectMountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n    }\n  }\n}\nfunction markComponentLayoutEffectMountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n    }\n  }\n}\nfunction markComponentLayoutEffectUnmountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n    }\n  }\n}\nfunction markComponentLayoutEffectUnmountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n    }\n  }\n}\nfunction markComponentErrored(fiber, thrownValue, lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n    }\n  }\n}\nfunction markComponentSuspended(fiber, wakeable, lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n    }\n  }\n}\nfunction markLayoutEffectsStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n    }\n  }\n}\nfunction markLayoutEffectsStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\n      injectedProfilingHooks.markLayoutEffectsStopped();\n    }\n  }\n}\nfunction markPassiveEffectsStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n    }\n  }\n}\nfunction markPassiveEffectsStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\n      injectedProfilingHooks.markPassiveEffectsStopped();\n    }\n  }\n}\nfunction markRenderStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\n      injectedProfilingHooks.markRenderStarted(lanes);\n    }\n  }\n}\nfunction markRenderYielded() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\n      injectedProfilingHooks.markRenderYielded();\n    }\n  }\n}\nfunction markRenderStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\n      injectedProfilingHooks.markRenderStopped();\n    }\n  }\n}\nfunction markRenderScheduled(lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\n      injectedProfilingHooks.markRenderScheduled(lane);\n    }\n  }\n}\nfunction markForceUpdateScheduled(fiber, lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n    }\n  }\n}\nfunction markStateUpdateScheduled(fiber, lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n  }\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar syncQueue = null;\nvar includesLegacySyncCallbacks = false;\nvar isFlushingSyncQueue = false;\nfunction scheduleSyncCallback(callback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\nfunction scheduleLegacySyncCallback(callback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\nfunction flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\nfunction flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    var i = 0;\n    var previousUpdatePriority = getCurrentUpdatePriority();\n\n    try {\n      var isSync = true;\n      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n\n      setCurrentUpdatePriority(DiscreteEventPriority);\n\n      for (; i < queue.length; i++) {\n        var callback = queue[i];\n\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      } // Resume flushing in the next tick\n\n\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n\n  return null;\n}\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nfunction isRootDehydrated(root) {\n  var currentState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nvar forkStack = [];\nvar forkStackIndex = 0;\nvar treeForkProvider = null;\nvar treeForkCount = 0;\nvar idStack = [];\nvar idStackIndex = 0;\nvar treeContextProvider = null;\nvar treeContextId = 1;\nvar treeContextOverflow = '';\nfunction isForkedChild(workInProgress) {\n  warnIfNotHydrating();\n  return (workInProgress.flags & Forked) !== NoFlags;\n}\nfunction getForksAtLevel(workInProgress) {\n  warnIfNotHydrating();\n  return treeForkCount;\n}\nfunction getTreeId() {\n  var overflow = treeContextOverflow;\n  var idWithLeadingBit = treeContextId;\n  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\nfunction pushTreeFork(workInProgress, totalChildren) {\n  // This is called right after we reconcile an array (or iterator) of child\n  // fibers, because that's the only place where we know how many children in\n  // the whole set without doing extra work later, or storing addtional\n  // information on the fiber.\n  //\n  // That's why this function is separate from pushTreeId — it's called during\n  // the render phase of the fork parent, not the child, which is where we push\n  // the other context values.\n  //\n  // In the Fizz implementation this is much simpler because the child is\n  // rendered in the same callstack as the parent.\n  //\n  // It might be better to just add a `forks` field to the Fiber type. It would\n  // make this module simpler.\n  warnIfNotHydrating();\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\nfunction pushTreeId(workInProgress, totalChildren, index) {\n  warnIfNotHydrating();\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextProvider = workInProgress;\n  var baseIdWithLeadingBit = treeContextId;\n  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n\n  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n  var slot = index + 1;\n  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n    var restOfBaseId = baseId >> numberOfOverflowBits;\n    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n\n    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    var restOfNewBits = slot << restOfBaseLength;\n    var id = restOfNewBits | restOfBaseId;\n    var overflow = newOverflow + baseOverflow;\n    treeContextId = 1 << restOfLength | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    var newBits = slot << baseLength;\n\n    var _id = newBits | baseId;\n\n    var _overflow = baseOverflow;\n    treeContextId = 1 << length | _id;\n    treeContextOverflow = _overflow;\n  }\n}\nfunction pushMaterializedTreeId(workInProgress) {\n  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n  // in its children.\n\n  var returnFiber = workInProgress.return;\n\n  if (returnFiber !== null) {\n    var numberOfForks = 1;\n    var slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number) {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id) {\n  return 1 << getBitLength(id) - 1;\n}\n\nfunction popTreeContext(workInProgress) {\n  // Restore the previous values.\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\nfunction getSuspendedTreeContext() {\n  warnIfNotHydrating();\n\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow\n    };\n  } else {\n    return null;\n  }\n}\nfunction restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n  warnIfNotHydrating();\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\nfunction warnIfNotHydrating() {\n  {\n    if (!getIsHydrating()) {\n      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\n    }\n  }\n}\n\n// This may have been an insertion or a hydration.\n\nvar hydrationParentFiber = null;\nvar nextHydratableInstance = null;\nvar isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n// due to earlier mismatches or a suspended fiber.\n\nvar didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary\n\nvar hydrationErrors = null;\n\nfunction warnIfHydrating() {\n  {\n    if (isHydrating) {\n      error('We should not be hydrating here. This is a bug in React. Please file a bug.');\n    }\n  }\n}\n\nfunction markDidThrowWhileHydratingDEV() {\n  {\n    didSuspendOrErrorDEV = true;\n  }\n}\nfunction didSuspendOrErrorWhileHydratingDEV() {\n  {\n    return didSuspendOrErrorDEV;\n  }\n}\n\nfunction enterHydrationState(fiber) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  var parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n\n  return true;\n}\n\nfunction warnUnhydratedInstance(returnFiber, instance) {\n  {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        {\n          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\n          break;\n        }\n\n      case HostComponent:\n        {\n          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.\n          isConcurrentMode);\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          var suspenseState = returnFiber.memoizedState;\n          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\n          break;\n        }\n    }\n  }\n}\n\nfunction deleteHydratableInstance(returnFiber, instance) {\n  warnUnhydratedInstance(returnFiber, instance);\n  var childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n  var deletions = returnFiber.deletions;\n\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction warnNonhydratedInstance(returnFiber, fiber) {\n  {\n    if (didSuspendOrErrorDEV) {\n      // Inside a boundary that already suspended. We're currently rendering the\n      // siblings of a suspended node. The mismatch may be due to the missing\n      // data, so it's probably a false positive.\n      return;\n    }\n\n    switch (returnFiber.tag) {\n      case HostRoot:\n        {\n          var parentContainer = returnFiber.stateNode.containerInfo;\n\n          switch (fiber.tag) {\n            case HostComponent:\n              var type = fiber.type;\n              var props = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinContainer(parentContainer, type, props);\n              break;\n\n            case HostText:\n              var text = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\n              break;\n\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);\n              break;\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          var parentType = returnFiber.type;\n          var parentProps = returnFiber.memoizedProps;\n          var parentInstance = returnFiber.stateNode;\n\n          switch (fiber.tag) {\n            case HostComponent:\n              {\n                var _type = fiber.type;\n                var _props = fiber.pendingProps;\n                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.\n                isConcurrentMode);\n                break;\n              }\n\n            case HostText:\n              {\n                var _text = fiber.pendingProps;\n\n                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.\n                _isConcurrentMode);\n                break;\n              }\n\n            case SuspenseComponent:\n              {\n                didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);\n                break;\n              }\n          }\n\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          var suspenseState = returnFiber.memoizedState;\n          var _parentInstance = suspenseState.dehydrated;\n          if (_parentInstance !== null) switch (fiber.tag) {\n            case HostComponent:\n              var _type2 = fiber.type;\n              var _props2 = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);\n              break;\n\n            case HostText:\n              var _text2 = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\n              break;\n\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);\n              break;\n          }\n          break;\n        }\n\n      default:\n        return;\n    }\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber, fiber) {\n  fiber.flags = fiber.flags & ~Hydrating | Placement;\n  warnNonhydratedInstance(returnFiber, fiber);\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent:\n      {\n        var type = fiber.type;\n        var props = fiber.pendingProps;\n        var instance = canHydrateInstance(nextInstance, type, props);\n\n        if (instance !== null) {\n          fiber.stateNode = instance;\n          hydrationParentFiber = fiber;\n          nextHydratableInstance = getFirstHydratableChild(instance);\n          return true;\n        }\n\n        return false;\n      }\n\n    case HostText:\n      {\n        var text = fiber.pendingProps;\n        var textInstance = canHydrateTextInstance(nextInstance, text);\n\n        if (textInstance !== null) {\n          fiber.stateNode = textInstance;\n          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n\n          nextHydratableInstance = null;\n          return true;\n        }\n\n        return false;\n      }\n\n    case SuspenseComponent:\n      {\n        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\n\n        if (suspenseInstance !== null) {\n          var suspenseState = {\n            dehydrated: suspenseInstance,\n            treeContext: getSuspendedTreeContext(),\n            retryLane: OffscreenLane\n          };\n          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n          // This simplifies the code for getHostSibling and deleting nodes,\n          // since it doesn't have to consider all Suspense boundaries and\n          // check if they're dehydrated ones or not.\n\n          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n          dehydratedFragment.return = fiber;\n          fiber.child = dehydratedFragment;\n          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n          // it during the first pass. Instead, we'll reenter it later.\n\n          nextHydratableInstance = null;\n          return true;\n        }\n\n        return false;\n      }\n\n    default:\n      return false;\n  }\n}\n\nfunction shouldClientRenderOnMismatch(fiber) {\n  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\n}\n\nfunction throwOnHydrationMismatch(fiber) {\n  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');\n}\n\nfunction tryToClaimNextHydratableInstance(fiber) {\n  if (!isHydrating) {\n    return;\n  }\n\n  var nextInstance = nextHydratableInstance;\n\n  if (!nextInstance) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance(hydrationParentFiber, fiber);\n      throwOnHydrationMismatch();\n    } // Nothing to hydrate. Make it an insertion.\n\n\n    insertNonHydratedInstance(hydrationParentFiber, fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n\n  var firstAttemptedInstance = nextInstance;\n\n  if (!tryHydrate(fiber, nextInstance)) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance(hydrationParentFiber, fiber);\n      throwOnHydrationMismatch();\n    } // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n\n\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    var prevHydrationParentFiber = hydrationParentFiber;\n\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance(hydrationParentFiber, fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    } // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n\n\n    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n  }\n}\n\nfunction prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n  if (!supportsHydration) {\n    throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var instance = fiber.stateNode;\n  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\n\n  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n\n  if (updatePayload !== null) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber) {\n  if (!supportsHydration) {\n    throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var textInstance = fiber.stateNode;\n  var textContent = fiber.memoizedProps;\n  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);\n\n  if (shouldUpdate) {\n    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n    // hydration parent is the parent host component of this host text.\n    var returnFiber = hydrationParentFiber;\n\n    if (returnFiber !== null) {\n      switch (returnFiber.tag) {\n        case HostRoot:\n          {\n            var parentContainer = returnFiber.stateNode.containerInfo;\n            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode);\n            break;\n          }\n\n        case HostComponent:\n          {\n            var parentType = returnFiber.type;\n            var parentProps = returnFiber.memoizedProps;\n            var parentInstance = returnFiber.stateNode;\n\n            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n            _isConcurrentMode2);\n            break;\n          }\n      }\n    }\n  }\n\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber) {\n  if (!supportsHydration) {\n    throw new Error('Expected prepareToHydrateHostSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var suspenseState = fiber.memoizedState;\n  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(fiber) {\n  if (!supportsHydration) {\n    throw new Error('Expected skipPastDehydratedSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var suspenseState = fiber.memoizedState;\n  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\n    parent = parent.return;\n  }\n\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  } // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n\n\n  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n    var nextInstance = nextHydratableInstance;\n\n    if (nextInstance) {\n      if (shouldClientRenderOnMismatch(fiber)) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch();\n      } else {\n        while (nextInstance) {\n          deleteHydratableInstance(fiber, nextInstance);\n          nextInstance = getNextHydratableSibling(nextInstance);\n        }\n      }\n    }\n  }\n\n  popToNextHostParent(fiber);\n\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n  }\n\n  return true;\n}\n\nfunction hasUnhydratedTailNodes() {\n  return isHydrating && nextHydratableInstance !== null;\n}\n\nfunction warnIfUnhydratedTailNodes(fiber) {\n  var nextInstance = nextHydratableInstance;\n\n  while (nextInstance) {\n    warnUnhydratedInstance(fiber, nextInstance);\n    nextInstance = getNextHydratableSibling(nextInstance);\n  }\n}\n\nfunction resetHydrationState() {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n  didSuspendOrErrorDEV = false;\n}\n\nfunction upgradeHydrationErrorsToRecoverable() {\n  if (hydrationErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(hydrationErrors);\n    hydrationErrors = null;\n  }\n}\n\nfunction getIsHydrating() {\n  return isHydrating;\n}\n\nfunction queueHydrationError(error) {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\nvar ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\nvar NoTransition = null;\nfunction requestCurrentTransition() {\n  return ReactCurrentBatchConfig.transition;\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\n\nfunction shallowEqual(objA, objB) {\n  if (objectIs(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    var currentKey = keysA[i];\n\n    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction describeFiber(fiber) {\n  var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;\n  var source =  fiber._debugSource ;\n\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type);\n\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy');\n\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList');\n\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type);\n\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render);\n\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type);\n\n    default:\n      return '';\n  }\n}\n\nfunction getStackByFiberInDevAndProd(workInProgress) {\n  try {\n    var info = '';\n    var node = workInProgress;\n\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\nvar current = null;\nvar isRendering = false;\nfunction getCurrentFiberOwnerNameInDevOrNull() {\n  {\n    if (current === null) {\n      return null;\n    }\n\n    var owner = current._debugOwner;\n\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n\n  return null;\n}\n\nfunction getCurrentFiberStackInDev() {\n  {\n    if (current === null) {\n      return '';\n    } // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n\n\n    return getStackByFiberInDevAndProd(current);\n  }\n}\n\nfunction resetCurrentFiber() {\n  {\n    ReactDebugCurrentFrame$1.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\nfunction setCurrentFiber(fiber) {\n  {\n    ReactDebugCurrentFrame$1.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\nfunction getCurrentFiber() {\n  {\n    return current;\n  }\n}\nfunction setIsRendering(rendering) {\n  {\n    isRendering = rendering;\n  }\n}\n\nvar ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n  flushPendingUnsafeLifecycleWarnings: function () {},\n  recordLegacyContextWarning: function (fiber, instance) {},\n  flushLegacyContextWarning: function () {},\n  discardPendingWarnings: function () {}\n};\n\n{\n  var findStrictRoot = function (fiber) {\n    var maybeStrictRoot = null;\n    var node = fiber;\n\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  var setToSortedString = function (set) {\n    var array = [];\n    set.forEach(function (value) {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  var pendingComponentWillMountWarnings = [];\n  var pendingUNSAFE_ComponentWillMountWarnings = [];\n  var pendingComponentWillReceivePropsWarnings = [];\n  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n  var pendingComponentWillUpdateWarnings = [];\n  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n  var didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n    instance.componentWillMount.__suppressDeprecationWarning !== true) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n    // We do an initial pass to gather component names\n    var componentWillMountUniqueNames = new Set();\n\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(function (fiber) {\n        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    var UNSAFE_componentWillMountUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    var componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    var componentWillUpdateUniqueNames = new Set();\n\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    } // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n\n      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n\n      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n\n      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n\n      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n\n      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n\n      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n    }\n  };\n\n  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n  var didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n    var strictRoot = findStrictRoot(fiber);\n\n    if (strictRoot === null) {\n      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n      return;\n    } // Dedup strategy: Warn once per component.\n\n\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n      if (fiberArray.length === 0) {\n        return;\n      }\n\n      var firstFiber = fiberArray[0];\n      var uniqueNames = new Set();\n      fiberArray.forEach(function (fiber) {\n        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutLegacyContext.add(fiber.type);\n      });\n      var sortedNames = setToSortedString(uniqueNames);\n\n      try {\n        setCurrentFiber(firstFiber);\n\n        error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n      } finally {\n        resetCurrentFiber();\n      }\n    });\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = function () {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkPropStringCoercion(value, propName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nfunction resolveDefaultProps(Component, baseProps) {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    var props = assign({}, baseProps);\n    var defaultProps = Component.defaultProps;\n\n    for (var propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    return props;\n  }\n\n  return baseProps;\n}\n\nvar valueCursor = createCursor(null);\nvar rendererSigil;\n\n{\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nvar currentlyRenderingFiber = null;\nvar lastContextDependency = null;\nvar lastFullyObservedContext = null;\nvar isDisallowedContextReadInDEV = false;\nfunction resetContextDependencies() {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction enterDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = true;\n  }\n}\nfunction exitDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction pushProvider(providerFiber, context, nextValue) {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n    context._currentValue = nextValue;\n\n    {\n      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n    context._currentValue2 = nextValue;\n\n    {\n      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\nfunction popProvider(context, providerFiber) {\n  var currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n\n  if (isPrimaryRenderer) {\n    {\n      context._currentValue = currentValue;\n    }\n  } else {\n    {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\nfunction scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  var node = parent;\n\n  while (node !== null) {\n    var alternate = node.alternate;\n\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    }\n\n    if (node === propagationRoot) {\n      break;\n    }\n\n    node = node.return;\n  }\n\n  {\n    if (node !== propagationRoot) {\n      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n}\nfunction propagateContextChange(workInProgress, context, renderLanes) {\n  {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager(workInProgress, context, renderLanes) {\n\n  var fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    var nextFiber = void 0; // Visit this fiber.\n\n    var list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      var dependency = list.firstContext;\n\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            var lane = pickArbitraryLane(renderLanes);\n            var update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            // Inlined `enqueueUpdate` to remove interleaved update check\n\n            var updateQueue = fiber.updateQueue;\n\n            if (updateQueue === null) ; else {\n              var sharedQueue = updateQueue.shared;\n              var pending = sharedQueue.pending;\n\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          var alternate = fiber.alternate;\n\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n\n          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n          // dependency list.\n\n          break;\n        }\n\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      var parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      var _alternate = parentSuspense.alternate;\n\n      if (_alternate !== null) {\n        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n      } // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n\n\n      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        var sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\nfunction prepareToReadContext(workInProgress, renderLanes) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  var dependencies = workInProgress.dependencies;\n\n  if (dependencies !== null) {\n    {\n      var firstContext = dependencies.firstContext;\n\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        } // Reset the work-in-progress list\n\n\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\nfunction readContext(context) {\n  {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n\n  if (lastFullyObservedContext === context) ; else {\n    var contextItem = {\n      context: context,\n      memoizedValue: value,\n      next: null\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n      } // This is the first dependency for this component. Create a new list.\n\n\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n\n  return value;\n}\n\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\n\nvar concurrentQueues = null;\nfunction pushConcurrentUpdateQueue(queue) {\n  if (concurrentQueues === null) {\n    concurrentQueues = [queue];\n  } else {\n    concurrentQueues.push(queue);\n  }\n}\nfunction finishQueueingConcurrentUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (concurrentQueues !== null) {\n    for (var i = 0; i < concurrentQueues.length; i++) {\n      var queue = concurrentQueues[i];\n      var lastInterleavedUpdate = queue.interleaved;\n\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        var firstInterleavedUpdate = lastInterleavedUpdate.next;\n        var lastPendingUpdate = queue.pending;\n\n        if (lastPendingUpdate !== null) {\n          var firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = firstInterleavedUpdate;\n          lastInterleavedUpdate.next = firstPendingUpdate;\n        }\n\n        queue.pending = lastInterleavedUpdate;\n      }\n    }\n\n    concurrentQueues = null;\n  }\n}\nfunction enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n  var interleaved = queue.interleaved;\n\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update; // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n\n  queue.interleaved = update;\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\nfunction enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {\n  var interleaved = queue.interleaved;\n\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update; // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n\n  queue.interleaved = update;\n}\nfunction enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n  var interleaved = queue.interleaved;\n\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update; // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n\n  queue.interleaved = update;\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\nfunction enqueueConcurrentRenderForLane(fiber, lane) {\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n} // Calling this function outside this module should only be done for backwards\n// compatibility and should always be accompanied by a warning.\n\nvar unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\n\nfunction markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  var alternate = sourceFiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n\n  {\n    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  } // Walk the parent path to the root and update the child lanes.\n\n\n  var node = sourceFiber;\n  var parent = sourceFiber.return;\n\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n\n    node = parent;\n    parent = parent.return;\n  }\n\n  if (node.tag === HostRoot) {\n    var root = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\nvar UpdateState = 0;\nvar ReplaceState = 1;\nvar ForceUpdate = 2;\nvar CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\n\nvar hasForceUpdate = false;\nvar didWarnUpdateInsideUpdate;\nvar currentlyProcessingQueue;\n\n{\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n}\n\nfunction initializeUpdateQueue(fiber) {\n  var queue = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes\n    },\n    effects: null\n  };\n  fiber.updateQueue = queue;\n}\nfunction cloneUpdateQueue(current, workInProgress) {\n  // Clone the update queue from current. Unless it's already a clone.\n  var queue = workInProgress.updateQueue;\n  var currentQueue = current.updateQueue;\n\n  if (queue === currentQueue) {\n    var clone = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\nfunction createUpdate(eventTime, lane) {\n  var update = {\n    eventTime: eventTime,\n    lane: lane,\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n    next: null\n  };\n  return update;\n}\nfunction enqueueUpdate(fiber, update, lane) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return null;\n  }\n\n  var sharedQueue = updateQueue.shared;\n\n  {\n    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  if (isUnsafeClassRenderPhaseUpdate()) {\n    // This is an unsafe render phase update. Add directly to the update\n    // queue so we can process it immediately during the current render.\n    var pending = sharedQueue.pending;\n\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n\n    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n    // this fiber. This is for backwards compatibility in the case where you\n    // update a different component during render phase than the one that is\n    // currently renderings (a pattern that is accompanied by a warning).\n\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n  } else {\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n  }\n}\nfunction entangleTransitions(root, fiber, lane) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  var sharedQueue = updateQueue.shared;\n\n  if (isTransitionLane(lane)) {\n    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    var newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\nfunction enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n  var current = workInProgress.alternate;\n\n  if (current !== null) {\n    var currentQueue = current.updateQueue;\n\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      var newFirst = null;\n      var newLast = null;\n      var firstBaseUpdate = queue.firstBaseUpdate;\n\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        var update = firstBaseUpdate;\n\n        do {\n          var clone = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n\n          update = update.next;\n        } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  } // Append the update to the end of the list.\n\n\n  var lastBaseUpdate = queue.lastBaseUpdate;\n\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n  switch (update.tag) {\n    case ReplaceState:\n      {\n        var payload = update.payload;\n\n        if (typeof payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          var nextState = payload.call(instance, prevState, nextProps);\n\n          {\n            if ( workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n\n              try {\n                payload.call(instance, prevState, nextProps);\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n\n            exitDisallowedContextReadInDEV();\n          }\n\n          return nextState;\n        } // State object\n\n\n        return payload;\n      }\n\n    case CaptureUpdate:\n      {\n        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n      }\n    // Intentional fallthrough\n\n    case UpdateState:\n      {\n        var _payload = update.payload;\n        var partialState;\n\n        if (typeof _payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          partialState = _payload.call(instance, prevState, nextProps);\n\n          {\n            if ( workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n\n              try {\n                _payload.call(instance, prevState, nextProps);\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n\n            exitDisallowedContextReadInDEV();\n          }\n        } else {\n          // Partial state object\n          partialState = _payload;\n        }\n\n        if (partialState === null || partialState === undefined) {\n          // Null and undefined are treated as no-ops.\n          return prevState;\n        } // Merge the partial state and the previous state.\n\n\n        return assign({}, prevState, partialState);\n      }\n\n    case ForceUpdate:\n      {\n        hasForceUpdate = true;\n        return prevState;\n      }\n  }\n\n  return prevState;\n}\n\nfunction processUpdateQueue(workInProgress, props, instance, renderLanes) {\n  // This is always non-null on a ClassComponent or HostRoot\n  var queue = workInProgress.updateQueue;\n  hasForceUpdate = false;\n\n  {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  var firstBaseUpdate = queue.firstBaseUpdate;\n  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n  var pendingQueue = queue.shared.pending;\n\n  if (pendingQueue !== null) {\n    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n\n    var lastPendingUpdate = pendingQueue;\n    var firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null; // Append pending updates to base queue\n\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n\n    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n\n    var current = workInProgress.alternate;\n\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      var currentQueue = current.updateQueue;\n      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  } // These values may change as we process the queue.\n\n\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n\n    var newLanes = NoLanes;\n    var newBaseState = null;\n    var newFirstBaseUpdate = null;\n    var newLastBaseUpdate = null;\n    var update = firstBaseUpdate;\n\n    do {\n      var updateLane = update.lane;\n      var updateEventTime = update.eventTime;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n          next: null\n        };\n\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        } // Update the remaining priority in the queue.\n\n\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newLastBaseUpdate !== null) {\n          var _clone = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n        } // Process this update.\n\n\n        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n        var callback = update.callback;\n\n        if (callback !== null && // If the update was already committed, we should not queue its\n        // callback again.\n        update.lane !== NoLane) {\n          workInProgress.flags |= Callback;\n          var effects = queue.effects;\n\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n\n      update = update.next;\n\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n\n          var _firstPendingUpdate = _lastPendingUpdate.next;\n          _lastPendingUpdate.next = null;\n          update = _firstPendingUpdate;\n          queue.lastBaseUpdate = _lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = newBaseState;\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n\n    var lastInterleaved = queue.shared.interleaved;\n\n    if (lastInterleaved !== null) {\n      var interleaved = lastInterleaved;\n\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = interleaved.next;\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    } // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n\n\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n  }\n\n  callback.call(context);\n}\n\nfunction resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\nfunction checkHasForceUpdateAfterProcessing() {\n  return hasForceUpdate;\n}\nfunction commitUpdateQueue(finishedWork, finishedQueue, instance) {\n  // Commit the effects\n  var effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n\n  if (effects !== null) {\n    for (var i = 0; i < effects.length; i++) {\n      var effect = effects[i];\n      var callback = effect.callback;\n\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n\nvar fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\n\nvar emptyRefsObject = new React.Component().refs;\nvar didWarnAboutStateAssignmentForComponent;\nvar didWarnAboutUninitializedState;\nvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nvar didWarnAboutLegacyLifecyclesAndDerivedState;\nvar didWarnAboutUndefinedDerivedState;\nvar warnOnUndefinedDerivedState;\nvar warnOnInvalidCallback;\nvar didWarnAboutDirectlyAssigningPropsToState;\nvar didWarnAboutContextTypeAndContextTypes;\nvar didWarnAboutInvalidateContextType;\n\n{\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n  var didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function (callback, callerName) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n\n    var key = callerName + '_' + callback;\n\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n\n      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n    }\n  };\n\n  warnOnUndefinedDerivedState = function (type, partialState) {\n    if (partialState === undefined) {\n      var componentName = getComponentNameFromType(type) || 'Component';\n\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n\n        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n      }\n    }\n  }; // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n\n\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function () {\n      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n    }\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n  var prevState = workInProgress.memoizedState;\n  var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  {\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    warnOnUndefinedDerivedState(ctor, partialState);\n  } // Merge the partial state and the previous state.\n\n\n  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n  // base state.\n\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    var updateQueue = workInProgress.updateQueue;\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nvar classComponentUpdater = {\n  isMounted: isMounted,\n  enqueueSetState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n\n      update.callback = callback;\n    }\n\n    var root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n\n      update.callback = callback;\n    }\n\n    var root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate: function (inst, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n\n      update.callback = callback;\n    }\n\n    var root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  }\n};\n\nfunction checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n  var instance = workInProgress.stateNode;\n\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\n    {\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      if (shouldUpdate === undefined) {\n        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress, ctor, newProps) {\n  var instance = workInProgress.stateNode;\n\n  {\n    var name = getComponentNameFromType(ctor) || 'Component';\n    var renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n      } else {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n      }\n    }\n\n    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n    }\n\n    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n    }\n\n    if (instance.propTypes) {\n      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n    }\n\n    if (instance.contextType) {\n      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n    }\n\n    {\n      if (instance.contextTypes) {\n        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n      }\n\n      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n    }\n\n    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n    }\n\n    if (typeof instance.componentDidUnmount === 'function') {\n      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n    }\n\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n    }\n\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n    }\n\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n    }\n\n    var hasMutatedProps = instance.props !== newProps;\n\n    if (instance.props !== undefined && hasMutatedProps) {\n      error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n    }\n\n    if (instance.defaultProps) {\n      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n    }\n\n    var _state = instance.state;\n\n    if (_state && (typeof _state !== 'object' || isArray(_state))) {\n      error('%s.state: must be set to an object or null', name);\n    }\n\n    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress, instance) {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n  set(instance, workInProgress);\n\n  {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(workInProgress, ctor, props) {\n  var isLegacyContextConsumer = false;\n  var unmaskedContext = emptyContextObject;\n  var context = emptyContextObject;\n  var contextType = ctor.contextType;\n\n  {\n    if ('contextType' in ctor) {\n      var isValid = // Allow null for conditional declaration\n      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n        var addendum = '';\n\n        if (contextType === undefined) {\n          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n        }\n\n        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext(contextType);\n  } else {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    var contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n  }\n\n  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n  {\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n  adoptClassInstance(workInProgress, instance);\n\n  {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n\n        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n      }\n    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n      var foundWillMountName = null;\n      var foundWillReceivePropsName = null;\n      var foundWillUpdateName = null;\n\n      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n\n      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n\n      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n\n      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n        var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n        }\n      }\n    }\n  } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    {\n      error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    {\n      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n\n        error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n      }\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\nfunction mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  var instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n  initializeUpdateQueue(workInProgress);\n  var contextType = ctor.contextType;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else {\n    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  {\n    if (instance.state === newProps) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n    }\n\n    {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    instance.state = workInProgress.memoizedState;\n  } // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n    // process them now.\n\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    var fiberFlags = Update;\n\n    {\n      fiberFlags |= LayoutStatic;\n    }\n\n    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n      fiberFlags |= MountLayoutDev;\n    }\n\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  var oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      var fiberFlags = Update;\n\n      {\n        fiberFlags |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= fiberFlags;\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n\n    if (typeof instance.componentDidMount === 'function') {\n      var _fiberFlags = Update;\n\n      {\n        _fiberFlags |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        _fiberFlags |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= _fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      var _fiberFlags2 = Update;\n\n      {\n        _fiberFlags2 |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        _fiberFlags2 |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= _fiberFlags2;\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n} // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\nfunction updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  cloneUpdateQueue(current, workInProgress);\n  var unresolvedOldProps = workInProgress.memoizedProps;\n  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  var unresolvedNewProps = workInProgress.pendingProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n  // both before and after `shouldComponentUpdate` has been called. Not ideal,\n  // but I'm loath to refactor this function. This only happens for memoized\n  // components so it's not that common.\n  enableLazyContextPropagation   ;\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n}\n\nvar didWarnAboutMaps;\nvar didWarnAboutGenerators;\nvar didWarnAboutStringRefs;\nvar ownerHasKeyUseWarning;\nvar ownerHasFunctionTypeWarning;\n\nvar warnForMissingKey = function (child, returnFiber) {};\n\n{\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = function (child, returnFiber) {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    child._store.validated = true;\n    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[componentName] = true;\n\n    error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n  };\n}\n\nfunction coerceRef(returnFiber, current, element) {\n  var mixedRef = element.ref;\n\n  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n    {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n      // because these cannot be automatically converted to an arrow function\n      // using a codemod. Therefore, we don't have to warn about string refs again.\n      !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n        if (!didWarnAboutStringRefs[componentName]) {\n          {\n            error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n          }\n\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      var owner = element._owner;\n      var inst;\n\n      if (owner) {\n        var ownerFiber = owner;\n\n        if (ownerFiber.tag !== ClassComponent) {\n          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n      } // Assigning this to a const so Flow knows it won't change in the closure\n\n\n      var resolvedInst = inst;\n\n      {\n        checkPropStringCoercion(mixedRef, 'ref');\n      }\n\n      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n        return current.ref;\n      }\n\n      var ref = function (value) {\n        var refs = resolvedInst.refs;\n\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = resolvedInst.refs = {};\n        }\n\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (typeof mixedRef !== 'string') {\n        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n      }\n\n      if (!element._owner) {\n        throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n      }\n    }\n  }\n\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber, newChild) {\n  var childString = Object.prototype.toString.call(newChild);\n  throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n}\n\nfunction warnOnFunctionType(returnFiber) {\n  {\n    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  var payload = lazyType._payload;\n  var init = lazyType._init;\n  return init(payload);\n} // This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\n\n\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber, childToDelete) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n\n    var deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n\n\n    var childToDelete = currentFirstChild;\n\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n\n    return null;\n  }\n\n  function mapRemainingChildren(returnFiber, currentFirstChild) {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    var existingChildren = new Map();\n    var existingChild = currentFirstChild;\n\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n\n      existingChild = existingChild.sibling;\n    }\n\n    return existingChildren;\n  }\n\n  function useFiber(fiber, pendingProps) {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    var clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex;\n\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n\n    var current = newFiber.alternate;\n\n    if (current !== null) {\n      var oldIndex = current.index;\n\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber) {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n\n    return newFiber;\n  }\n\n  function updateTextNode(returnFiber, current, textContent, lanes) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(returnFiber, current, element, lanes) {\n    var elementType = element.type;\n\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n    }\n\n    if (current !== null) {\n      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.\n      // We need to do this after the Hot Reloading check above,\n      // because hot reloading has different semantics than prod because\n      // it doesn't resuspend. So we can't let the call below suspend.\n      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n        // Move based on index\n        var existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n\n        {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n\n        return existing;\n      }\n    } // Insert\n\n\n    var created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(returnFiber, current, portal, lanes) {\n    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n      // Insert\n      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(returnFiber, current, fragment, lanes, key) {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(returnFiber, newChild, lanes) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n\n            _created.ref = coerceRef(returnFiber, null, newChild);\n            _created.return = returnFiber;\n            return _created;\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n\n            _created2.return = returnFiber;\n            return _created2;\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            var payload = newChild._payload;\n            var init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n\n        _created3.return = returnFiber;\n        return _created3;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n    // Update the fiber if the keys match, otherwise return null.\n    var key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            if (newChild.key === key) {\n              return updateElement(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            if (newChild.key === key) {\n              return updatePortal(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            var payload = newChild._payload;\n            var init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      var matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n          }\n\n        case REACT_LAZY_TYPE:\n          var payload = newChild._payload;\n          var init = newChild._init;\n          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n\n\n  function warnOnInvalidKey(child, knownKeys, returnFiber) {\n    {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          var key = child.key;\n\n          if (typeof key !== 'string') {\n            break;\n          }\n\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n\n          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n\n          break;\n\n        case REACT_LAZY_TYPE:\n          var payload = child._payload;\n          var init = child._init;\n          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n          break;\n      }\n    }\n\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n    {\n      // First, validate keys.\n      var knownKeys = null;\n\n      for (var i = 0; i < newChildren.length; i++) {\n        var child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      if (getIsHydrating()) {\n        var numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n        if (_newFiber === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber;\n        } else {\n          previousNewFiber.sibling = _newFiber;\n        }\n\n        previousNewFiber = _newFiber;\n      }\n\n      if (getIsHydrating()) {\n        var _numberOfForks = newIdx;\n        pushTreeFork(returnFiber, _numberOfForks);\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; newIdx < newChildren.length; newIdx++) {\n      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n      if (_newFiber2 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber2.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber2;\n        } else {\n          previousNewFiber.sibling = _newFiber2;\n        }\n\n        previousNewFiber = _newFiber2;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    if (getIsHydrating()) {\n      var _numberOfForks2 = newIdx;\n      pushTreeFork(returnFiber, _numberOfForks2);\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n    var iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n    }\n\n    {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n      newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n        if (!didWarnAboutGenerators) {\n          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n        }\n\n        didWarnAboutGenerators = true;\n      } // Warn about using Maps as children\n\n\n      if (newChildrenIterable.entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n        }\n\n        didWarnAboutMaps = true;\n      } // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n\n\n      var _newChildren = iteratorFn.call(newChildrenIterable);\n\n      if (_newChildren) {\n        var knownKeys = null;\n\n        var _step = _newChildren.next();\n\n        for (; !_step.done; _step = _newChildren.next()) {\n          var child = _step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    var newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n    var step = newChildren.next();\n\n    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      if (getIsHydrating()) {\n        var numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n        if (_newFiber3 === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber3;\n        } else {\n          previousNewFiber.sibling = _newFiber3;\n        }\n\n        previousNewFiber = _newFiber3;\n      }\n\n      if (getIsHydrating()) {\n        var _numberOfForks3 = newIdx;\n        pushTreeFork(returnFiber, _numberOfForks3);\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n      if (_newFiber4 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber4.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber4;\n        } else {\n          previousNewFiber.sibling = _newFiber4;\n        }\n\n        previousNewFiber = _newFiber4;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    if (getIsHydrating()) {\n      var _numberOfForks4 = newIdx;\n      pushTreeFork(returnFiber, _numberOfForks4);\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      var existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    } // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n\n\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n    var key = element.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        var elementType = element.type;\n\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            var existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n\n            {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n\n            return existing;\n          }\n        } else {\n          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.\n          // We need to do this after the Hot Reloading check above,\n          // because hot reloading has different semantics than prod because\n          // it doesn't resuspend. So we can't let the call below suspend.\n          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n\n            var _existing = useFiber(child, element.props);\n\n            _existing.ref = coerceRef(returnFiber, child, element);\n            _existing.return = returnFiber;\n\n            {\n              _existing._debugSource = element._source;\n              _existing._debugOwner = element._owner;\n            }\n\n            return _existing;\n          }\n        } // Didn't match.\n\n\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n\n      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n      _created4.return = returnFiber;\n      return _created4;\n    }\n  }\n\n  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n    var key = portal.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  } // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n\n\n  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    } // Handle object types\n\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_LAZY_TYPE:\n          var payload = newChild._payload;\n          var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    } // Remaining cases are all treated as empty.\n\n\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nvar reconcileChildFibers = ChildReconciler(true);\nvar mountChildFibers = ChildReconciler(false);\nfunction cloneChildFibers(current, workInProgress) {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  var currentChild = workInProgress.child;\n  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n  newChild.return = workInProgress;\n\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n    newChild.return = workInProgress;\n  }\n\n  newChild.sibling = null;\n} // Reset a workInProgress child set to prepare it for a second pass.\n\nfunction resetChildFibers(workInProgress, lanes) {\n  var child = workInProgress.child;\n\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n\nvar NO_CONTEXT = {};\nvar contextStackCursor$1 = createCursor(NO_CONTEXT);\nvar contextFiberStackCursor = createCursor(NO_CONTEXT);\nvar rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\nfunction requiredContext(c) {\n  if (c === NO_CONTEXT) {\n    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n\n  return c;\n}\n\nfunction getRootHostContainer() {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber, nextRootInstance) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n\n  push(contextStackCursor$1, NO_CONTEXT, fiber);\n  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n  pop(contextStackCursor$1, fiber);\n  push(contextStackCursor$1, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber) {\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext() {\n  var context = requiredContext(contextStackCursor$1.current);\n  return context;\n}\n\nfunction pushHostContext(fiber) {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  var context = requiredContext(contextStackCursor$1.current);\n  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n\n  if (context === nextContext) {\n    return;\n  } // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor$1, nextContext, fiber);\n}\n\nfunction popHostContext(fiber) {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nvar DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\n\nvar SubtreeSuspenseContextMask = 1; // Subtree Flags:\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\n\nvar InvisibleParentSuspenseContext = 1; // Shallow Flags:\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\n\nvar ForceSuspenseFallback = 2;\nvar suspenseStackCursor = createCursor(DefaultSuspenseContext);\nfunction hasSuspenseContext(parentContext, flag) {\n  return (parentContext & flag) !== 0;\n}\nfunction setDefaultShallowSuspenseContext(parentContext) {\n  return parentContext & SubtreeSuspenseContextMask;\n}\nfunction setShallowSuspenseContext(parentContext, shallowContext) {\n  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n}\nfunction addSubtreeSuspenseContext(parentContext, subtreeContext) {\n  return parentContext | subtreeContext;\n}\nfunction pushSuspenseContext(fiber, newContext) {\n  push(suspenseStackCursor, newContext, fiber);\n}\nfunction popSuspenseContext(fiber) {\n  pop(suspenseStackCursor, fiber);\n}\n\nfunction shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  var nextState = workInProgress.memoizedState;\n\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n\n    return false;\n  }\n\n  var props = workInProgress.memoizedProps; // Regular boundaries always capture.\n\n  {\n    return true;\n  } // If it's a boundary we should avoid, then we prefer to bubble up to the\n}\nfunction findFirstSuspended(row) {\n  var node = row;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        var dehydrated = state.dehydrated;\n\n        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n          return node;\n        }\n      }\n    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n    // keep track of whether it suspended or not.\n    node.memoizedProps.revealOrder !== undefined) {\n      var didSuspend = (node.flags & DidCapture) !== NoFlags;\n\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === row) {\n      return null;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n\n  return null;\n}\n\nvar NoFlags$1 =\n/*   */\n0; // Represents whether effect should fire.\n\nvar HasEffect =\n/* */\n1; // Represents the phase in which the effect (not the clean-up) fires.\n\nvar Insertion =\n/*  */\n2;\nvar Layout =\n/*    */\n4;\nvar Passive$1 =\n/*   */\n8;\n\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\n\nvar workInProgressSources = [];\nfunction resetWorkInProgressVersions() {\n  for (var i = 0; i < workInProgressSources.length; i++) {\n    var mutableSource = workInProgressSources[i];\n\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n\n  workInProgressSources.length = 0;\n}\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\n\nfunction registerMutableSourceForHydration(root, mutableSource) {\n  var getVersion = mutableSource._getVersion;\n  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\nvar didWarnAboutMismatchedHooksForComponent;\nvar didWarnUncachedGetSnapshot;\n\n{\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\n// These are set right before calling the component.\nvar renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\n\nvar currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\n\nvar currentHook = null;\nvar workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\n\nvar didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\nvar didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n\nvar localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\n\nvar globalClientIdCounter = 0;\nvar RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\nvar currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\n\nvar hookTypesDev = null;\nvar hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\nvar ignorePreviousDependencies = false;\n\nfunction mountHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps) {\n  {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName) {\n  {\n    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        var table = '';\n        var secondColumnStart = 30;\n\n        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n          var oldHookName = hookTypesDev[i];\n          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n          var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n          table += row;\n        }\n\n        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n}\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    {\n      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n    }\n\n    return false;\n  }\n\n  {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n    }\n  }\n\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (objectIs(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber$1 = workInProgress;\n\n  {\n    hookTypesDev = current !== null ? current._debugHookTypes : null;\n    hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes; // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n\n  {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n    }\n  }\n\n  var children = Component(props, secondArg); // Check if there was a render phase update\n\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    var numberOfReRenders = 0;\n\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n      }\n\n      numberOfReRenders += 1;\n\n      {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      } // Start over from the beginning of the list\n\n\n      currentHook = null;\n      workInProgressHook = null;\n      workInProgress.updateQueue = null;\n\n      {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  } // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n\n\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  {\n    workInProgress._debugHookTypes = hookTypesDev;\n  } // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n\n  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n\n    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n    // and creates false positives. To make this work in legacy mode, we'd\n    // need to mark fibers that commit in an incomplete state, somehow. For\n    // now I'll disable the warning that most of the bugs that would trigger\n    // it are either exclusive to concurrent mode or exist in both.\n    (current.mode & ConcurrentMode) !== NoMode) {\n      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  if (didRenderTooFewHooks) {\n    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n  }\n\n  return children;\n}\nfunction checkDidRenderIdHook() {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  var didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\nfunction bailoutHooks(current, workInProgress, lanes) {\n  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n\n  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\n  } else {\n    workInProgress.flags &= ~(Passive | Update);\n  }\n\n  current.lanes = removeLanes(current.lanes, lanes);\n}\nfunction resetHooksAfterThrow() {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    var hook = currentlyRenderingFiber$1.memoizedState;\n\n    while (hook !== null) {\n      var queue = hook.queue;\n\n      if (queue !== null) {\n        queue.pending = null;\n      }\n\n      hook = hook.next;\n    }\n\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n    currentHookNameInDev = null;\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n}\n\nfunction mountWorkInProgressHook() {\n  var hook = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook() {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  var nextCurrentHook;\n\n  if (currentHook === null) {\n    var current = currentlyRenderingFiber$1.alternate;\n\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  var nextWorkInProgressHook;\n\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n    if (nextCurrentHook === null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    currentHook = nextCurrentHook;\n    var newHook = {\n      memoizedState: currentHook.memoizedState,\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n      next: null\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue() {\n  return {\n    lastEffect: null,\n    stores: null\n  };\n}\n\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer(reducer, initialArg, init) {\n  var hook = mountWorkInProgressHook();\n  var initialState;\n\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = initialArg;\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n  }\n\n  queue.lastRenderedReducer = reducer;\n  var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n  var pendingQueue = queue.pending;\n\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      var baseFirst = baseQueue.next;\n      var pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n\n    {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n      }\n    }\n\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    var first = baseQueue.next;\n    var newState = current.baseState;\n    var newBaseState = null;\n    var newBaseQueueFirst = null;\n    var newBaseQueueLast = null;\n    var update = first;\n\n    do {\n      var updateLane = update.lane;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          lane: updateLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: null\n        };\n\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        } // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n\n\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newBaseQueueLast !== null) {\n          var _clone = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: null\n          };\n          newBaseQueueLast = newBaseQueueLast.next = _clone;\n        } // Process this update.\n\n\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = update.eagerState;\n        } else {\n          var action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = newBaseQueueFirst;\n    } // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n    queue.lastRenderedState = newState;\n  } // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n\n\n  var lastInterleaved = queue.interleaved;\n\n  if (lastInterleaved !== null) {\n    var interleaved = lastInterleaved;\n\n    do {\n      var interleavedLane = interleaved.lane;\n      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = interleaved.next;\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  var dispatch = queue.dispatch;\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n  }\n\n  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n\n  var dispatch = queue.dispatch;\n  var lastRenderPhaseUpdate = queue.pending;\n  var newState = hook.memoizedState;\n\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    var update = firstRenderPhaseUpdate;\n\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      var action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n\n  return [newState, dispatch];\n}\n\nfunction mountMutableSource(source, getSnapshot, subscribe) {\n  {\n    return undefined;\n  }\n}\n\nfunction updateMutableSource(source, getSnapshot, subscribe) {\n  {\n    return undefined;\n  }\n}\n\nfunction mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1;\n  var hook = mountWorkInProgressHook();\n  var nextSnapshot;\n  var isHydrating = getIsHydrating();\n\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n    }\n\n    nextSnapshot = getServerSnapshot();\n\n    {\n      if (!didWarnUncachedGetSnapshot) {\n        if (nextSnapshot !== getServerSnapshot()) {\n          error('The result of getServerSnapshot should be cached to avoid an infinite loop');\n\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  } else {\n    nextSnapshot = getSnapshot();\n\n    {\n      if (!didWarnUncachedGetSnapshot) {\n        var cachedSnapshot = getSnapshot();\n\n        if (!objectIs(nextSnapshot, cachedSnapshot)) {\n          error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    } // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n\n\n    var root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  } // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n\n  hook.memoizedState = nextSnapshot;\n  var inst = {\n    value: nextSnapshot,\n    getSnapshot: getSnapshot\n  };\n  hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  // TODO: We can move this to the passive phase once we add a pre-commit\n  // consistency check. See the next comment.\n\n  fiber.flags |= Passive;\n  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1;\n  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n  var nextSnapshot = getSnapshot();\n\n  {\n    if (!didWarnUncachedGetSnapshot) {\n      var cachedSnapshot = getSnapshot();\n\n      if (!objectIs(nextSnapshot, cachedSnapshot)) {\n        error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  var prevSnapshot = hook.memoizedState;\n  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n\n  var inst = hook.queue;\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n\n  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\n  // checking whether we scheduled a subscription effect above.\n  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n    fiber.flags |= Passive;\n    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n\n    var root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n  fiber.flags |= StoreConsistency;\n  var check = {\n    getSnapshot: getSnapshot,\n    value: renderedSnapshot\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.stores = [check];\n  } else {\n    var stores = componentUpdateQueue.stores;\n\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  var handleStoreChange = function () {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  }; // Subscribe to the store and return a clean-up function.\n\n\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  var prevValue = inst.value;\n\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n  }\n}\n\nfunction mountState(initialState) {\n  var hook = mountWorkInProgressHook();\n\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState(initialState) {\n  return updateReducer(basicStateReducer);\n}\n\nfunction rerenderState(initialState) {\n  return rerenderReducer(basicStateReducer);\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  var effect = {\n    tag: tag,\n    create: create,\n    destroy: destroy,\n    deps: deps,\n    // Circular\n    next: null\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    var lastEffect = componentUpdateQueue.lastEffect;\n\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      var firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n\n  return effect;\n}\n\nfunction mountRef(initialValue) {\n  var hook = mountWorkInProgressHook();\n\n  {\n    var _ref2 = {\n      current: initialValue\n    };\n    hook.memoizedState = _ref2;\n    return _ref2;\n  }\n}\n\nfunction updateRef(initialValue) {\n  var hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var destroy = undefined;\n\n  if (currentHook !== null) {\n    var prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n\n    if (nextDeps !== null) {\n      var prevDeps = prevEffect.deps;\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n}\n\nfunction mountEffect(create, deps) {\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\n  } else {\n    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n  }\n}\n\nfunction updateEffect(create, deps) {\n  return updateEffectImpl(Passive, Passive$1, create, deps);\n}\n\nfunction mountInsertionEffect(create, deps) {\n  return mountEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction updateInsertionEffect(create, deps) {\n  return updateEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction mountLayoutEffect(create, deps) {\n  var fiberFlags = Update;\n\n  {\n    fiberFlags |= LayoutStatic;\n  }\n\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    fiberFlags |= MountLayoutDev;\n  }\n\n  return mountEffectImpl(fiberFlags, Layout, create, deps);\n}\n\nfunction updateLayoutEffect(create, deps) {\n  return updateEffectImpl(Update, Layout, create, deps);\n}\n\nfunction imperativeHandleEffect(create, ref) {\n  if (typeof ref === 'function') {\n    var refCallback = ref;\n\n    var _inst = create();\n\n    refCallback(_inst);\n    return function () {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    var refObject = ref;\n\n    {\n      if (!refObject.hasOwnProperty('current')) {\n        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n      }\n    }\n\n    var _inst2 = create();\n\n    refObject.current = _inst2;\n    return function () {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  var fiberFlags = Update;\n\n  {\n    fiberFlags |= LayoutStatic;\n  }\n\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    fiberFlags |= MountLayoutDev;\n  }\n\n  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction updateImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nvar updateDebugValue = mountDebugValue;\n\nfunction mountCallback(callback, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback(callback, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo(nextCreate, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo(nextCreate, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue(value) {\n  var hook = mountWorkInProgressHook();\n  hook.memoizedState = value;\n  return value;\n}\n\nfunction updateDeferredValue(value) {\n  var hook = updateWorkInProgressHook();\n  var resolvedCurrentHook = currentHook;\n  var prevValue = resolvedCurrentHook.memoizedState;\n  return updateDeferredValueImpl(hook, prevValue, value);\n}\n\nfunction rerenderDeferredValue(value) {\n  var hook = updateWorkInProgressHook();\n\n  if (currentHook === null) {\n    // This is a rerender during a mount.\n    hook.memoizedState = value;\n    return value;\n  } else {\n    // This is a rerender during an update.\n    var prevValue = currentHook.memoizedState;\n    return updateDeferredValueImpl(hook, prevValue, value);\n  }\n}\n\nfunction updateDeferredValueImpl(hook, prevValue, value) {\n  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n\n  if (shouldDeferValue) {\n    // This is an urgent update. If the value has changed, keep using the\n    // previous value and spawn a deferred render to update it later.\n    if (!objectIs(value, prevValue)) {\n      // Schedule a deferred render\n      var deferredLane = claimNextTransitionLane();\n      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent\n      // from the latest value. The name \"baseState\" doesn't really match how we\n      // use it because we're reusing a state hook field instead of creating a\n      // new one.\n\n      hook.baseState = true;\n    } // Reuse the previous value\n\n\n    return prevValue;\n  } else {\n    // This is not an urgent update, so we can use the latest value regardless\n    // of what it is. No need to defer it.\n    // However, if we're currently inside a spawned render, then we need to mark\n    // this as an update to prevent the fiber from bailing out.\n    //\n    // `baseState` is true when the current value is different from the rendered\n    // value. The name doesn't really match how we use it because we're reusing\n    // a state hook field instead of creating a new one.\n    if (hook.baseState) {\n      // Flip this back to false.\n      hook.baseState = false;\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = value;\n    return value;\n  }\n}\n\nfunction startTransition(setPending, callback, options) {\n  var previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n  setPending(true);\n  var prevTransition = ReactCurrentBatchConfig$1.transition;\n  ReactCurrentBatchConfig$1.transition = {};\n  var currentTransition = ReactCurrentBatchConfig$1.transition;\n\n  {\n    ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n  }\n\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$1.transition = prevTransition;\n\n    {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n        if (updatedFibersCount > 10) {\n          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n        }\n\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition() {\n  var _mountState = mountState(false),\n      isPending = _mountState[0],\n      setPending = _mountState[1]; // The `start` method never changes.\n\n\n  var start = startTransition.bind(null, setPending);\n  var hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition() {\n  var _updateState = updateState(),\n      isPending = _updateState[0];\n\n  var hook = updateWorkInProgressHook();\n  var start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition() {\n  var _rerenderState = rerenderState(),\n      isPending = _rerenderState[0];\n\n  var hook = updateWorkInProgressHook();\n  var start = hook.memoizedState;\n  return [isPending, start];\n}\n\nvar isUpdatingOpaqueValueInRenderPhase = false;\nfunction getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n  {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction mountId() {\n  var hook = mountWorkInProgressHook();\n  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n\n  var identifierPrefix = root.identifierPrefix;\n  var id;\n\n  if (getIsHydrating()) {\n    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n\n    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n\n    var localId = localIdCounter++;\n\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += ':';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    var globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId() {\n  var hook = updateWorkInProgressHook();\n  var id = hook.memoizedState;\n  return id;\n}\n\nfunction dispatchReducerAction(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n    if (root !== null) {\n      var eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane);\n}\n\nfunction dispatchSetState(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    var alternate = fiber.alternate;\n\n    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      var lastRenderedReducer = queue.lastRenderedReducer;\n\n      if (lastRenderedReducer !== null) {\n        var prevDispatcher;\n\n        {\n          prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n\n        try {\n          var currentState = queue.lastRenderedState;\n          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n\n          if (objectIs(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            // TODO: Do we still need to entangle transitions in this case?\n            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);\n            return;\n          }\n        } catch (error) {// Suppress the error. It will throw again in the render phase.\n        } finally {\n          {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n    if (root !== null) {\n      var eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane);\n}\n\nfunction isRenderPhaseUpdate(fiber) {\n  var alternate = fiber.alternate;\n  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n}\n\nfunction enqueueRenderPhaseUpdate(queue, update) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  var pending = queue.pending;\n\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n\n  queue.pending = update;\n} // TODO: Move to ReactFiberConcurrentUpdates?\n\n\nfunction entangleTransitionUpdate(root, queue, lane) {\n  if (isTransitionLane(lane)) {\n    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    var newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nfunction markUpdateInDevTools(fiber, lane, action) {\n\n  {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nvar ContextOnlyDispatcher = {\n  readContext: readContext,\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n  unstable_isNewReconciler: enableNewReconciler\n};\n\nvar HooksDispatcherOnMountInDEV = null;\nvar HooksDispatcherOnMountWithHookTypesInDEV = null;\nvar HooksDispatcherOnUpdateInDEV = null;\nvar HooksDispatcherOnRerenderInDEV = null;\nvar InvalidNestedHooksDispatcherOnMountInDEV = null;\nvar InvalidNestedHooksDispatcherOnUpdateInDEV = null;\nvar InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n\n{\n  var warnInvalidContextAccess = function () {\n    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n  };\n\n  var warnInvalidHookAccess = function () {\n    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n}\n\nvar now$1 = Scheduler.unstable_now;\nvar commitTime = 0;\nvar layoutEffectStartTime = -1;\nvar profilerStartTime = -1;\nvar passiveEffectStartTime = -1;\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\n\nvar currentUpdateIsNested = false;\nvar nestedUpdateScheduled = false;\n\nfunction isCurrentUpdateNested() {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled() {\n  {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag() {\n  {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag() {\n  {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime() {\n  return commitTime;\n}\n\nfunction recordCommitTime() {\n\n  commitTime = now$1();\n}\n\nfunction startProfilerTimer(fiber) {\n\n  profilerStartTime = now$1();\n\n  if (fiber.actualStartTime < 0) {\n    fiber.actualStartTime = now$1();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber) {\n\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n\n  if (profilerStartTime >= 0) {\n    var elapsedTime = now$1() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber) {\n\n  if (layoutEffectStartTime >= 0) {\n    var elapsedTime = now$1() - layoutEffectStartTime;\n    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n\n    var parentFiber = fiber.return;\n\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          var root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n\n        case Profiler:\n          var parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber) {\n\n  if (passiveEffectStartTime >= 0) {\n    var elapsedTime = now$1() - passiveEffectStartTime;\n    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n\n    var parentFiber = fiber.return;\n\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          var root = parentFiber.stateNode;\n\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n\n          return;\n\n        case Profiler:\n          var parentStateNode = parentFiber.stateNode;\n\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n\n          return;\n      }\n\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer() {\n\n  layoutEffectStartTime = now$1();\n}\n\nfunction startPassiveEffectTimer() {\n\n  passiveEffectStartTime = now$1();\n}\n\nfunction transferActualDuration(fiber) {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  var child = fiber.child;\n\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nfunction createCapturedValueAtFiber(value, source) {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value: value,\n    source: source,\n    stack: getStackByFiberInDevAndProd(source),\n    digest: null\n  };\n}\nfunction createCapturedValue(value, digest, stack) {\n  return {\n    value: value,\n    source: null,\n    stack: stack != null ? stack : null,\n    digest: digest != null ? digest : null\n  };\n}\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\nfunction showErrorDialog(boundary, errorInfo) {\n  return true;\n}\n\nfunction logCapturedError(boundary, errorInfo) {\n  try {\n    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n\n    if (logError === false) {\n      return;\n    }\n\n    var error = errorInfo.value;\n\n    if (true) {\n      var source = errorInfo.source;\n      var stack = errorInfo.stack;\n      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        } // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n\n\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      var componentName = source ? getComponentNameFromFiber(source) : null;\n      var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n      var errorBoundaryMessage;\n\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n      }\n\n      var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nvar PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: null\n  };\n  var error = errorInfo.value;\n\n  update.callback = function () {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n\n  return update;\n}\n\nfunction createClassErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n  if (typeof getDerivedStateFromError === 'function') {\n    var error$1 = errorInfo.value;\n\n    update.payload = function () {\n      return getDerivedStateFromError(error$1);\n    };\n\n    update.callback = function () {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  var inst = fiber.stateNode;\n\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      logCapturedError(fiber, errorInfo);\n\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n\n      var error$1 = errorInfo.value;\n      var stack = errorInfo.stack;\n      this.componentDidCatch(error$1, {\n        componentStack: stack !== null ? stack : ''\n      });\n\n      {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, SyncLane)) {\n            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n          }\n        }\n      }\n    };\n  }\n\n  return update;\n}\n\nfunction attachPingListener(root, wakeable, lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  var pingCache = root.pingCache;\n  var threadIDs;\n\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap$1();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n\n    {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n  // Retry listener\n  //\n  // If the fallback does commit, we need to attach a different type of\n  // listener. This one schedules an update on the Suspense boundary to turn\n  // the fallback state off.\n  //\n  // Stash the wakeable on the boundary fiber so we can access it in the\n  // commit phase.\n  //\n  // When the wakeable resolves, we'll attempt to render the boundary\n  // again (\"retry\").\n  var wakeables = suspenseBoundary.updateQueue;\n\n  if (wakeables === null) {\n    var updateQueue = new Set();\n    updateQueue.add(wakeable);\n    suspenseBoundary.updateQueue = updateQueue;\n  } else {\n    wakeables.add(wakeable);\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n  // A legacy mode Suspense quirk, only relevant to hook components.\n\n\n  var tag = sourceFiber.tag;\n\n  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n    var currentSource = sourceFiber.alternate;\n\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction getNearestSuspenseBoundaryToCapture(returnFiber) {\n  var node = returnFiber;\n\n  do {\n    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n      return node;\n    } // This boundary already captured during this render. Continue to the next\n    // boundary.\n\n\n    node = node.return;\n  } while (node !== null);\n\n  return null;\n}\n\nfunction markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        var currentSourceFiber = sourceFiber.alternate;\n\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          var update = createUpdate(NoTimestamp, SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update, SyncLane);\n        }\n      } // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n\n\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n\n    return suspenseBoundary;\n  } // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n\n\n  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n    // This is a wakeable. The component suspended.\n    var wakeable = value;\n    resetSuspendedComponent(sourceFiber);\n\n    {\n      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n        markDidThrowWhileHydratingDEV();\n      }\n    }\n\n\n    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n\n    if (suspenseBoundary !== null) {\n      suspenseBoundary.flags &= ~ForceClientRender;\n      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n\n      if (suspenseBoundary.mode & ConcurrentMode) {\n        attachPingListener(root, wakeable, rootRenderLanes);\n      }\n\n      attachRetryListener(suspenseBoundary, root, wakeable);\n      return;\n    } else {\n      // No boundary was found. Unless this is a sync update, this is OK.\n      // We can suspend and wait for more data to arrive.\n      if (!includesSyncLane(rootRenderLanes)) {\n        // This is not a sync update. Suspend. Since we're not activating a\n        // Suspense boundary, this will unwind all the way to the root without\n        // performing a second pass to render a fallback. (This is arguably how\n        // refresh transitions should work, too, since we're not going to commit\n        // the fallbacks anyway.)\n        //\n        // This case also applies to initial hydration.\n        attachPingListener(root, wakeable, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return;\n      } // This is a sync/discrete update. We treat this case like an error\n      // because discrete renders are expected to produce a complete tree\n      // synchronously to maintain consistency with external state.\n\n\n      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n      // The error will be caught by the nearest suspense boundary.\n\n      value = uncaughtSuspenseError;\n    }\n  } else {\n    // This is a regular error, not a Suspense wakeable.\n    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n      markDidThrowWhileHydratingDEV();\n\n      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\n      // discarding the dehydrated content and switching to a client render.\n      // Instead of surfacing the error, find the nearest Suspense boundary\n      // and render it again without hydration.\n\n\n      if (_suspenseBoundary !== null) {\n        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n          // Set a flag to indicate that we should try rendering the normal\n          // children again, not the fallback.\n          _suspenseBoundary.flags |= ForceClientRender;\n        }\n\n        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n        // still log it so it can be fixed.\n\n        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n        return;\n      }\n    }\n  }\n\n  value = createCapturedValueAtFiber(value, sourceFiber);\n  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n\n  var workInProgress = returnFiber;\n\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot:\n        {\n          var _errorInfo = value;\n          workInProgress.flags |= ShouldCapture;\n          var lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n\n      case ClassComponent:\n        // Capture and retry\n        var errorInfo = value;\n        var ctor = workInProgress.type;\n        var instance = workInProgress.stateNode;\n\n        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n          workInProgress.flags |= ShouldCapture;\n\n          var _lane = pickArbitraryLane(rootRenderLanes);\n\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n\n          enqueueCapturedUpdate(workInProgress, _update);\n          return;\n        }\n\n        break;\n    }\n\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nfunction getSuspendedCache() {\n  {\n    return null;\n  } // This function is called when a Suspense boundary suspends. It returns the\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar didReceiveUpdate = false;\nvar didWarnAboutBadClass;\nvar didWarnAboutModulePatternComponent;\nvar didWarnAboutContextTypeOnFunctionComponent;\nvar didWarnAboutGetDerivedStateOnFunctionComponent;\nvar didWarnAboutFunctionRefs;\nvar didWarnAboutReassigningProps;\nvar didWarnAboutRevealOrder;\nvar didWarnAboutTailOptions;\n\n{\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n}\n\nfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n\n  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n}\n\nfunction updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  }\n\n  var render = Component.render;\n  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n  var nextChildren;\n  var hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n    hasId = checkDidRenderIdHook();\n\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  if (current === null) {\n    var type = Component.type;\n\n    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n    Component.defaultProps === undefined) {\n      var resolvedType = type;\n\n      {\n        resolvedType = resolveFunctionForHotReloading(type);\n      } // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n\n\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n\n      {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n\n      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n    }\n\n    {\n      var innerPropTypes = type.propTypes;\n\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(type));\n      }\n    }\n\n    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n\n  {\n    var _type = Component.type;\n    var _innerPropTypes = _type.propTypes;\n\n    if (_innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(_innerPropTypes, nextProps, // Resolved props\n      'prop', getComponentNameFromType(_type));\n    }\n  }\n\n  var currentChild = current.child; // This is always exactly one child\n\n  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n    var compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  var newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var outerMemoType = workInProgress.elementType;\n\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        var lazyComponent = outerMemoType;\n        var payload = lazyComponent._payload;\n        var init = lazyComponent._init;\n\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        } // Inner propTypes will be validated in the function component path.\n\n\n        var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n        if (outerPropTypes) {\n          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n          'prop', getComponentNameFromType(outerMemoType));\n        }\n      }\n    }\n  }\n\n  if (current !== null) {\n    var prevProps = current.memoizedProps;\n\n    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.\n     workInProgress.type === current.type )) {\n      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n      // would during a normal fiber bailout.\n      //\n      // We don't have strong guarantees that the props object is referentially\n      // equal during updates where we can't bail out anyway — like if the props\n      // are shallowly equal, but there's a local state or context update in the\n      // same batch.\n      //\n      // However, as a principle, we should aim to make the behavior consistent\n      // across different ways of memoizing a component. For example, React.memo\n      // has a different internal Fiber layout if you pass a normal function\n      // component (SimpleMemoComponent) versus if you pass a different type\n      // like forwardRef (MemoComponent). But this is an implementation detail.\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n      // affect whether the props object is reused during a bailout.\n\n      workInProgress.pendingProps = nextProps = prevProps;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n\n  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n}\n\nfunction updateOffscreenComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  var prevState = current !== null ? current.memoizedState : null;\n\n  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Consider how Offscreen should work with transitions in the future\n      var nextState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null\n      };\n      workInProgress.memoizedState = nextState;\n\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n\n      var nextBaseLanes;\n\n      if (prevState !== null) {\n        var prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n      } else {\n        nextBaseLanes = renderLanes;\n      } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n      var _nextState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool,\n        transitions: null\n      };\n      workInProgress.memoizedState = _nextState;\n      workInProgress.updateQueue = null;\n      // to avoid a push/pop misalignment.\n\n\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n      // Rendering at offscreen, so we can clear the base lanes.\n      var _nextState2 = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null\n      };\n      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    var _subtreeRenderLanes;\n\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      _subtreeRenderLanes = renderLanes;\n    }\n\n    pushRenderLanes(workInProgress, _subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n} // Note: These happen to have identical begin phases, for now. We shouldn't hold\n\nfunction updateFragment(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(current, workInProgress, renderLanes) {\n  {\n    workInProgress.flags |= Update;\n\n    {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      var stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current, workInProgress) {\n  var ref = workInProgress.ref;\n\n  if (current === null && ref !== null || current !== null && current.ref !== ref) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n\n    {\n      workInProgress.flags |= RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  }\n\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  var nextChildren;\n  var hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n    hasId = checkDidRenderIdHook();\n\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false:\n        {\n          var _instance = workInProgress.stateNode;\n          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n          // Is there a better way to do this?\n\n          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n          var state = tempInstance.state;\n\n          _instance.updater.enqueueSetState(_instance, state, null);\n\n          break;\n        }\n\n      case true:\n        {\n          workInProgress.flags |= DidCapture;\n          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n          var error$1 = new Error('Simulated error coming from DevTools');\n          var lane = pickArbitraryLane(renderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          break;\n        }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  } // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var instance = workInProgress.stateNode;\n  var shouldUpdate;\n\n  if (instance === null) {\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\n\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  } else {\n    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n  }\n\n  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n\n  {\n    var inst = workInProgress.stateNode;\n\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n      }\n\n      didWarnAboutReassigningProps = true;\n    }\n  }\n\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  var instance = workInProgress.stateNode; // Rerender\n\n  ReactCurrentOwner$1.current = workInProgress;\n  var nextChildren;\n\n  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    {\n      stopProfilerTimerIfRunning();\n    }\n  } else {\n    {\n      markComponentRenderStarted(workInProgress);\n    }\n\n    {\n      setIsRendering(true);\n      nextChildren = instance.render();\n\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      setIsRendering(false);\n    }\n\n    {\n      markComponentRenderStopped();\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  } // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n\n\n  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  var root = workInProgress.stateNode;\n\n  if (root.pendingContext) {\n    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var prevState = workInProgress.memoizedState;\n  var prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  var nextState = workInProgress.memoizedState;\n  var root = workInProgress.stateNode;\n  // being called \"element\".\n\n\n  var nextChildren = nextState.element;\n\n  if (supportsHydration && prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    var overrideState = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache,\n      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\n      transitions: nextState.transitions\n    };\n    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render.\n      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);\n      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n    } else if (nextChildren !== prevChildren) {\n      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);\n\n      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n\n      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n      workInProgress.child = child;\n      var node = child;\n\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = node.flags & ~Placement | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n  // Revert to client rendering.\n  resetHydrationState();\n  queueHydrationError(recoverableError);\n  workInProgress.flags |= ForceClientRender;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(current, workInProgress, renderLanes) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  var type = workInProgress.type;\n  var nextProps = workInProgress.pendingProps;\n  var prevProps = current !== null ? current.memoizedProps : null;\n  var nextChildren = nextProps.children;\n  var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  } // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n\n\n  return null;\n}\n\nfunction mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n  var props = workInProgress.pendingProps;\n  var lazyComponent = elementType;\n  var payload = lazyComponent._payload;\n  var init = lazyComponent._init;\n  var Component = init(payload); // Store the unwrapped component in the type.\n\n  workInProgress.type = Component;\n  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n  var resolvedProps = resolveDefaultProps(Component, props);\n  var child;\n\n  switch (resolvedTag) {\n    case FunctionComponent:\n      {\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n          workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n        }\n\n        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ClassComponent:\n      {\n        {\n          workInProgress.type = Component = resolveClassForHotReloading(Component);\n        }\n\n        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ForwardRef:\n      {\n        {\n          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n        }\n\n        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case MemoComponent:\n      {\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = Component.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\n              'prop', getComponentNameFromType(Component));\n            }\n          }\n        }\n\n        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes);\n        return child;\n      }\n  }\n\n  var hint = '';\n\n  {\n    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  } // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n\n\n  throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n}\n\nfunction mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\n\n  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n}\n\nfunction mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n  var props = workInProgress.pendingProps;\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var value;\n  var hasId;\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    if (Component.prototype && typeof Component.prototype.render === 'function') {\n      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner$1.current = workInProgress;\n    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n    hasId = checkDidRenderIdHook();\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n      var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n\n        didWarnAboutModulePatternComponent[_componentName] = true;\n      }\n    }\n  }\n\n  if ( // Run these checks in production only if the flag is off.\n  // Eventually we'll delete this branch altogether.\n   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n    {\n      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName2]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n\n        didWarnAboutModulePatternComponent[_componentName2] = true;\n      }\n    } // Proceed under the assumption that this is a class instance\n\n\n    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n\n    var hasContext = false;\n\n    if (isContextProvider(Component)) {\n      hasContext = true;\n      pushContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n    initializeUpdateQueue(workInProgress);\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n\n    {\n\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n          hasId = checkDidRenderIdHook();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n\n    if (getIsHydrating() && hasId) {\n      pushMaterializedTreeId(workInProgress);\n    }\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n\n    {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress, Component) {\n  {\n    if (Component) {\n      if (Component.childContextTypes) {\n        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n      }\n    }\n\n    if (workInProgress.ref !== null) {\n      var info = '';\n      var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      var warningKey = ownerName || '';\n      var debugSource = workInProgress._debugSource;\n\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n\n        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n\n        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n      }\n    }\n\n    if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n        error('%s: Function components do not support contextType.', _componentName4);\n\n        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n      }\n    }\n  }\n}\n\nvar SUSPENDED_MARKER = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane\n};\n\nfunction mountSuspenseOffscreenState(renderLanes) {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache(),\n    transitions: null\n  };\n}\n\nfunction updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n  var cachePool = null;\n\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool: cachePool,\n    transitions: prevOffscreenState.transitions\n  };\n} // TODO: Probably should inline this back\n\n\nfunction shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    var suspenseState = current.memoizedState;\n\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  } // Not currently showing content. Consult the Suspense context.\n\n\n  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n}\n\nfunction getRemainingWorkInPrimaryTree(current, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n  {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  var suspenseContext = suspenseStackCursor.current;\n  var showFallback = false;\n  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (current === null || current.memoizedState !== null) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      {\n        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n\n  if (current === null) {\n    // Initial mount\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n\n    var suspenseState = workInProgress.memoizedState;\n\n    if (suspenseState !== null) {\n      var dehydrated = suspenseState.dehydrated;\n\n      if (dehydrated !== null) {\n        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n      }\n    }\n\n    var nextPrimaryChildren = nextProps.children;\n    var nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      var primaryChildFragment = workInProgress.child;\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n    }\n  } else {\n    // This is an update.\n    // Special path for hydration\n    var prevState = current.memoizedState;\n\n    if (prevState !== null) {\n      var _dehydrated = prevState.dehydrated;\n\n      if (_dehydrated !== null) {\n        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);\n      }\n    }\n\n    if (showFallback) {\n      var _nextFallbackChildren = nextProps.fallback;\n      var _nextPrimaryChildren = nextProps.children;\n      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n      var _primaryChildFragment2 = workInProgress.child;\n      var prevOffscreenState = current.child.memoizedState;\n      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n\n      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    } else {\n      var _nextPrimaryChildren2 = nextProps.children;\n\n      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);\n\n      workInProgress.memoizedState = null;\n      return _primaryChildFragment3;\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var progressedPrimaryFragment = workInProgress.child;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n  var fallbackChildFragment;\n\n  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n    mode: 'visible',\n    children: primaryChildren\n  });\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    var deletions = workInProgress.deletions;\n\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n\n  if ( // In legacy mode, we commit the primary tree as if it successfully\n  // completed, even though it's in an inconsistent state.\n  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n  // already cloned. In legacy mode, the only case where this isn't true is\n  // when DevTools forces us to display a fallback; we skip the first render\n  // pass entirely and go straight to rendering the fallback. (In Concurrent\n  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n  // only codepath.)\n  workInProgress.child !== currentPrimaryChildFragment) {\n    var progressedPrimaryFragment = workInProgress.child;\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n    } // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n\n\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n\n    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n\n  var fallbackChildFragment;\n\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n  } else {\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n  //\n  // The error is passed in as an argument to enforce that every caller provide\n  // a custom message, or explicitly opt out (currently the only path that opts\n  // out is legacy mode; every concurrent path provides an error).\n  if (recoverableError !== null) {\n    queueHydrationError(recoverableError);\n  } // This will add the old fiber to the deletion list\n\n\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n  var nextProps = workInProgress.pendingProps;\n  var primaryChildren = nextProps.children;\n  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var fiberMode = workInProgress.mode;\n  var primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n\n  fallbackChildFragment.flags |= Placement;\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    {\n      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');\n    }\n\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n    // We should never be hydrating at this point because it is the first pass,\n    // but after we've already committed once.\n    warnIfHydrating();\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument\n      // required — every concurrent mode path that causes hydration to\n      // de-opt to client rendering should have an error message.\n      null);\n    }\n\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\n      // This boundary is in a permanent fallback state. In this case, we'll never\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\n      // client side render instead.\n      var digest, message, stack;\n\n      {\n        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);\n\n        digest = _getSuspenseInstanceF.digest;\n        message = _getSuspenseInstanceF.message;\n        stack = _getSuspenseInstanceF.stack;\n      }\n\n      var error;\n\n      if (message) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        error = new Error(message);\n      } else {\n        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');\n      }\n\n      var capturedValue = createCapturedValue(error, digest, stack);\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n    }\n    // any context has changed, we need to treat is as if the input might have changed.\n\n\n    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      var root = getWorkInProgressRoot();\n\n      if (root !== null) {\n        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n\n        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\n\n          var eventTime = NoTimestamp;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);\n        }\n      } // If we have scheduled higher pri work above, this will probably just abort the render\n      // since we now have higher priority work, but in case it doesn't, we need to prepare to\n      // render something, if we time out. Even if that requires us to delete everything and\n      // skip hydration.\n      // Delay having to do this as long as the suspense timeout allows us.\n\n\n      renderDidSuspendDelayIfPossible();\n\n      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));\n\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\n      // This component is still pending more data from the server, so we can't hydrate its\n      // content. We treat it as if this component suspended itself. It might seem as if\n      // we could just try to render it client-side instead. However, this will perform a\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\n      // on missing data anyway. Additionally, the server might be able to render more\n      // than we can on the client yet. In that case we'd end up with more fallback states\n      // on the client than if we just leave it alone. If the server times out or errors\n      // these should update this boundary to the permanent Fallback state instead.\n      // Mark it as having captured (i.e. suspended).\n      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n      var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n      registerSuspenseInstanceRetry(suspenseInstance, retry);\n      return null;\n    } else {\n      // This is the first attempt.\n      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n      var primaryChildren = nextProps.children;\n      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      workInProgress.flags &= ~ForceClientRender;\n\n      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));\n\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);\n    } else if (workInProgress.memoizedState !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n      // but the normal suspense pass doesn't.\n\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // Suspended but we should no longer be in dehydrated mode.\n      // Therefore we now have to render the fallback.\n      var nextPrimaryChildren = nextProps.children;\n      var nextFallbackChildren = nextProps.fallback;\n      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      var _primaryChildFragment4 = workInProgress.child;\n      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    }\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  var node = firstChild;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === workInProgress) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild) {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  var row = firstChild;\n  var lastContentRow = null;\n\n  while (row !== null) {\n    var currentRow = row.alternate; // New rows can't be content rows.\n\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n\n    row = row.sibling;\n  }\n\n  return lastContentRow;\n}\n\nfunction validateRevealOrder(revealOrder) {\n  {\n    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          case 'forward':\n          case 'backward':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          default:\n            error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n\n            break;\n        }\n      } else {\n        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(tailMode, revealOrder) {\n  {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot, index) {\n  {\n    var isAnArray = isArray(childSlot);\n    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n\n    if (isAnArray || isIterable) {\n      var type = isAnArray ? 'array' : 'iterable';\n\n      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateSuspenseListChildren(children, revealOrder) {\n  {\n    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n      if (isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n\n        if (typeof iteratorFn === 'function') {\n          var childrenIterator = iteratorFn.call(children);\n\n          if (childrenIterator) {\n            var step = childrenIterator.next();\n            var _i = 0;\n\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, _i)) {\n                return;\n              }\n\n              _i++;\n            }\n          }\n        } else {\n          error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n  var renderState = workInProgress.memoizedState;\n\n  if (renderState === null) {\n    workInProgress.memoizedState = {\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode\n    };\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n} // This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\n\n\nfunction updateSuspenseListComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var revealOrder = nextProps.revealOrder;\n  var tailMode = nextProps.tail;\n  var newChildren = nextProps.children;\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  var suspenseContext = suspenseStackCursor.current;\n  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n    workInProgress.flags |= DidCapture;\n  } else {\n    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n    }\n\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards':\n        {\n          var lastContentRow = findLastContentRow(workInProgress.child);\n          var tail;\n\n          if (lastContentRow === null) {\n            // The whole list is part of the tail.\n            // TODO: We could fast path by just rendering the tail now.\n            tail = workInProgress.child;\n            workInProgress.child = null;\n          } else {\n            // Disconnect the tail rows after the content row.\n            // We're going to render them separately later.\n            tail = lastContentRow.sibling;\n            lastContentRow.sibling = null;\n          }\n\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          tail, lastContentRow, tailMode);\n          break;\n        }\n\n      case 'backwards':\n        {\n          // We're going to find the first row that has existing content.\n          // At the same time we're going to reverse the list of everything\n          // we pass in the meantime. That's going to be our tail in reverse\n          // order.\n          var _tail = null;\n          var row = workInProgress.child;\n          workInProgress.child = null;\n\n          while (row !== null) {\n            var currentRow = row.alternate; // New rows can't be content rows.\n\n            if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n              // This is the beginning of the main content.\n              workInProgress.child = row;\n              break;\n            }\n\n            var nextRow = row.sibling;\n            row.sibling = _tail;\n            _tail = row;\n            row = nextRow;\n          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n          initSuspenseListRenderState(workInProgress, true, // isBackwards\n          _tail, null, // last\n          tailMode);\n          break;\n        }\n\n      case 'together':\n        {\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          null, // tail\n          null, // last\n          undefined);\n          break;\n        }\n\n      default:\n        {\n          // The default reveal order is the same as not having\n          // a boundary.\n          workInProgress.memoizedState = null;\n        }\n    }\n  }\n\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(current, workInProgress, renderLanes) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  var nextChildren = workInProgress.pendingProps;\n\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(current, workInProgress, renderLanes) {\n  var providerType = workInProgress.type;\n  var context = providerType._context;\n  var newProps = workInProgress.pendingProps;\n  var oldProps = workInProgress.memoizedProps;\n  var newValue = newProps.value;\n\n  {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n\n        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n      }\n    }\n\n    var providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  {\n    if (oldProps !== null) {\n      var oldValue = oldProps.value;\n\n      if (objectIs(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (oldProps.children === newProps.children && !hasContextChanged()) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  var newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(current, workInProgress, renderLanes) {\n  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n\n  {\n    if (context._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n\n          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n        }\n      }\n    } else {\n      context = context._context;\n    }\n  }\n\n  var newProps = workInProgress.pendingProps;\n  var render = newProps.children;\n\n  {\n    if (typeof render !== 'function') {\n      error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var newValue = readContext(context);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  var newChildren;\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (current !== null) {\n      // A lazy component only mounts if it suspended inside a non-\n      // concurrent tree, in an inconsistent state. We want to treat it like\n      // a new mount, even though an empty version of it already committed.\n      // Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n      workInProgress.flags |= Placement;\n    }\n  }\n}\n\nfunction bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning();\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    {\n      return null;\n    }\n  } // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n\n\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n  {\n    var returnFiber = oldWorkInProgress.return;\n\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    } // Disconnect from the old current.\n    // It will get deleted.\n\n\n    current.alternate = null;\n    oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      var prevSibling = returnFiber.child;\n\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n\n      prevSibling.sibling = newWorkInProgress;\n    } // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n\n\n    var deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n    return newWorkInProgress;\n  }\n}\n\nfunction checkScheduledUpdateOrContext(current, renderLanes) {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  var updateLanes = current.lanes;\n\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  } // No pending update, but because context is propagated lazily, we need\n\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      var root = workInProgress.stateNode;\n\n      resetHydrationState();\n      break;\n\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          pushContextProvider(workInProgress);\n        }\n\n        break;\n      }\n\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n\n    case ContextProvider:\n      {\n        var newValue = workInProgress.memoizedProps.value;\n        var context = workInProgress.type._context;\n        pushProvider(workInProgress, context, newValue);\n        break;\n      }\n\n    case Profiler:\n      {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n\n      break;\n\n    case SuspenseComponent:\n      {\n        var state = workInProgress.memoizedState;\n\n        if (state !== null) {\n          if (state.dehydrated !== null) {\n            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\n            // been unsuspended it has committed as a resolved Suspense component.\n            // If it needs to be retried, it should have work scheduled on it.\n\n            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n            return null;\n          } // If this boundary is currently timed out, we need to decide\n          // whether to retry the primary children, or to skip over it and\n          // go straight to the fallback. Check the priority of the primary\n          // child fragment.\n\n\n          var primaryChildFragment = workInProgress.child;\n          var primaryChildLanes = primaryChildFragment.childLanes;\n\n          if (includesSomeLane(renderLanes, primaryChildLanes)) {\n            // The primary children have pending work. Use the normal path\n            // to attempt to render the primary children again.\n            return updateSuspenseComponent(current, workInProgress, renderLanes);\n          } else {\n            // The primary child fragment does not have pending work marked\n            // on it\n            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n            // priority. Bailout.\n\n            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n            if (child !== null) {\n              // The fallback children have pending work. Skip over the\n              // primary children and work on the fallback.\n              return child.sibling;\n            } else {\n              // Note: We can return `null` here because we already checked\n              // whether there were nested context consumers, via the call to\n              // `bailoutOnAlreadyFinishedWork` above.\n              return null;\n            }\n          }\n        } else {\n          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n        }\n\n        break;\n      }\n\n    case SuspenseListComponent:\n      {\n        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (didSuspendBefore) {\n          if (_hasChildWork) {\n            // If something was in fallback state last time, and we have all the\n            // same children then we're still in progressive loading state.\n            // Something might get unblocked by state updates or retries in the\n            // tree which will affect the tail. So we need to use the normal\n            // path to compute the correct tail.\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          } // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n\n\n          workInProgress.flags |= DidCapture;\n        } // If nothing suspended before and we're rendering the same children,\n        // then the tail doesn't matter. Anything new that suspends will work\n        // in the \"together\" mode, so we can continue from the state we had.\n\n\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState !== null) {\n          // Reset to the \"together\" mode in case we've started a different\n          // update in the past but didn't complete it.\n          renderState.rendering = null;\n          renderState.tail = null;\n          renderState.lastEffect = null;\n        }\n\n        pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n        if (_hasChildWork) {\n          break;\n        } else {\n          // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n          return null;\n        }\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        // Need to check if the tree still needs to be deferred. This is\n        // almost identical to the logic used in the normal update path,\n        // so we'll just enter that. The only difference is we'll bail out\n        // at the next level instead of this one, because the child props\n        // have not changed. Which is fine.\n        // TODO: Probably should refactor `beginWork` to split the bailout\n        // path from the normal path. I'm tempted to do a labeled break here\n        // but I won't :)\n        workInProgress.lanes = NoLanes;\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(current, workInProgress, renderLanes) {\n  {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n    }\n  }\n\n  if (current !== null) {\n    var oldProps = current.memoizedProps;\n    var newProps = workInProgress.pendingProps;\n\n    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:\n     workInProgress.type !== current.type )) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n      // may not be work scheduled on `current`, so we check for this flag.\n      (workInProgress.flags & DidCapture) === NoFlags) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n      }\n\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      var slotIndex = workInProgress.index;\n      var numberOfForks = getForksAtLevel();\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  } // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n\n\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n      {\n        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n      }\n\n    case LazyComponent:\n      {\n        var elementType = workInProgress.elementType;\n        return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n      }\n\n    case FunctionComponent:\n      {\n        var Component = workInProgress.type;\n        var unresolvedProps = workInProgress.pendingProps;\n        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n      }\n\n    case ClassComponent:\n      {\n        var _Component = workInProgress.type;\n        var _unresolvedProps = workInProgress.pendingProps;\n\n        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n\n        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n      }\n\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n\n    case HostText:\n      return updateHostText(current, workInProgress);\n\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n\n    case ForwardRef:\n      {\n        var type = workInProgress.type;\n        var _unresolvedProps2 = workInProgress.pendingProps;\n\n        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n      }\n\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n\n    case MemoComponent:\n      {\n        var _type2 = workInProgress.type;\n        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = _type2.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n              'prop', getComponentNameFromType(_type2));\n            }\n          }\n        }\n\n        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n      }\n\n    case SimpleMemoComponent:\n      {\n        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n      }\n\n    case IncompleteClassComponent:\n      {\n        var _Component2 = workInProgress.type;\n        var _unresolvedProps4 = workInProgress.pendingProps;\n\n        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n      }\n\n    case SuspenseListComponent:\n      {\n        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n}\n\nfunction markUpdate(workInProgress) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef$1(workInProgress) {\n  workInProgress.flags |= Ref;\n\n  {\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction hadNoMutationsEffects(current, completedWork) {\n  var didBailout = current !== null && current.child === completedWork.child;\n\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  } // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n\n\n  var child = completedWork.child;\n\n  while (child !== null) {\n    if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {\n      return false;\n    }\n\n    child = child.sibling;\n  }\n\n  return true;\n}\n\nvar appendAllChildren;\nvar updateHostContainer;\nvar updateHostComponent$1;\nvar updateHostText$1;\n\nif (supportsMutation) {\n  // Mutation mode\n  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function (current, workInProgress) {// Noop\n  };\n\n  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    var oldProps = current.memoizedProps;\n\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    } // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n\n\n    var instance = workInProgress.stateNode;\n    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n\n    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n\n  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n       if (node.tag === HostComponent) {\n        var instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var props = node.memoizedProps;\n          var type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        var _instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var text = node.memoizedProps;\n          _instance = cloneHiddenTextInstance(_instance, text, node);\n        }\n\n        appendInitialChild(parent, _instance);\n      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        var child = node.child;\n\n        if (child !== null) {\n          child.return = node;\n        }\n\n        appendAllChildren(parent, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n      node = node;\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n\n  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n       if (node.tag === HostComponent) {\n        var instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var props = node.memoizedProps;\n          var type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        var _instance2 = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var text = node.memoizedProps;\n          _instance2 = cloneHiddenTextInstance(_instance2, text, node);\n        }\n\n        appendChildToContainerChildSet(containerChildSet, _instance2);\n      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        var child = node.child;\n\n        if (child !== null) {\n          child.return = node;\n        }\n\n        appendAllChildrenToContainer(containerChildSet, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n      node = node;\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function (current, workInProgress) {\n    var portalOrRoot = workInProgress.stateNode;\n    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n    if (childrenUnchanged) ; else {\n      var container = portalOrRoot.containerInfo;\n      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n\n  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n    var currentInstance = current.stateNode;\n    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n\n    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n\n    var recyclableInstance = workInProgress.stateNode;\n    var currentHostContext = getHostContext();\n    var updatePayload = null;\n\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n    }\n\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n\n    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n\n    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n      markUpdate(workInProgress);\n    }\n\n    workInProgress.stateNode = newInstance;\n\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n\n  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      var rootContainerInstance = getRootHostContainer();\n      var currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function (current, workInProgress) {// Noop\n  };\n\n  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop\n  };\n\n  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n\n  switch (renderState.tailMode) {\n    case 'hidden':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var tailNode = renderState.tail;\n        var lastTailNode = null;\n\n        while (tailNode !== null) {\n          if (tailNode.alternate !== null) {\n            lastTailNode = tailNode;\n          }\n\n          tailNode = tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          renderState.tail = null;\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n\n    case 'collapsed':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var _tailNode = renderState.tail;\n        var _lastTailNode = null;\n\n        while (_tailNode !== null) {\n          if (_tailNode.alternate !== null) {\n            _lastTailNode = _tailNode;\n          }\n\n          _tailNode = _tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (_lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          if (!hasRenderedATailFallback && renderState.tail !== null) {\n            // We suspended during the head. We want to show at least one\n            // row at the tail. So we'll keep on and cut off the rest.\n            renderState.tail.sibling = null;\n          } else {\n            renderState.tail = null;\n          }\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          _lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n  }\n}\n\nfunction bubbleProperties(completedWork) {\n  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n  var newChildLanes = NoLanes;\n  var subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      var actualDuration = completedWork.actualDuration;\n      var treeBaseDuration = completedWork.selfBaseDuration;\n      var child = completedWork.child;\n\n      while (child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n\n        actualDuration += child.actualDuration;\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      var _child = completedWork.child;\n\n      while (_child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n        subtreeFlags |= _child.subtreeFlags;\n        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        _child.return = completedWork;\n        _child = _child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      var _treeBaseDuration = completedWork.selfBaseDuration;\n      var _child2 = completedWork.child;\n\n      while (_child2 !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= _child2.subtreeFlags & StaticMask;\n        subtreeFlags |= _child2.flags & StaticMask;\n        _treeBaseDuration += _child2.treeBaseDuration;\n        _child2 = _child2.sibling;\n      }\n\n      completedWork.treeBaseDuration = _treeBaseDuration;\n    } else {\n      var _child3 = completedWork.child;\n\n      while (_child3 !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= _child3.subtreeFlags & StaticMask;\n        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        _child3.return = completedWork;\n        _child3 = _child3.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n  return didBailout;\n}\n\nfunction completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\n    warnIfUnhydratedTailNodes(workInProgress);\n    resetHydrationState();\n    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n    return false;\n  }\n\n  var wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null && nextState.dehydrated !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Suspense boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\n      }\n\n      prepareToHydrateHostSuspenseInstance(workInProgress);\n      bubbleProperties(workInProgress);\n\n      {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          var isTimedOutSuspense = nextState !== null;\n\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            var primaryChildFragment = workInProgress.child;\n\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n            }\n          }\n        }\n      }\n\n      return false;\n    } else {\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n      resetHydrationState();\n\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        workInProgress.memoizedState = null;\n      } // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n\n\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n\n      {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          var _isTimedOutSuspense = nextState !== null;\n\n          if (_isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            var _primaryChildFragment = workInProgress.child;\n\n            if (_primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase.\n    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n\n    return true;\n  }\n}\n\nfunction completeWork(current, workInProgress, renderLanes) {\n  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostRoot:\n      {\n        var fiberRoot = workInProgress.stateNode;\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n\n        if (fiberRoot.pendingContext) {\n          fiberRoot.context = fiberRoot.pendingContext;\n          fiberRoot.pendingContext = null;\n        }\n\n        if (current === null || current.child === null) {\n          // If we hydrated, pop so that we can delete any remaining children\n          // that weren't hydrated.\n          var wasHydrated = popHydrationState(workInProgress);\n\n          if (wasHydrated) {\n            // If we hydrated, then we'll need to schedule an update for\n            // the commit side-effects on the root.\n            markUpdate(workInProgress);\n          } else {\n            if (current !== null) {\n              var prevState = current.memoizedState;\n\n              if ( // Check if this is a client root\n              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags) {\n                // Schedule an effect to clear this container at the start of the\n                // next commit. This handles the case of React rendering into a\n                // container with previous children. It's also safe to do for\n                // updates too, because current.child would only be null if the\n                // previous render was null (so the container would already\n                // be empty).\n                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                // recoverable errors during first hydration attempt. If so, add\n                // them to a queue so we can log them in the commit phase.\n\n                upgradeHydrationErrorsToRecoverable();\n              }\n            }\n          }\n        }\n\n        updateHostContainer(current, workInProgress);\n        bubbleProperties(workInProgress);\n\n        return null;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(workInProgress);\n        var rootContainerInstance = getRootHostContainer();\n        var type = workInProgress.type;\n\n        if (current !== null && workInProgress.stateNode != null) {\n          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);\n\n          if (current.ref !== workInProgress.ref) {\n            markRef$1(workInProgress);\n          }\n        } else {\n          if (!newProps) {\n            if (workInProgress.stateNode === null) {\n              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            } // This can happen when we abort work.\n\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n          // \"stack\" as the parent. Then append children as we go in beginWork\n          // or completeWork depending on whether we want to add them top->down or\n          // bottom->up. Top->down is faster in IE11.\n\n          var _wasHydrated = popHydrationState(workInProgress);\n\n          if (_wasHydrated) {\n            // TODO: Move this and createInstance step into the beginPhase\n            // to consolidate.\n            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n              // If changes to the hydrated node need to be applied at the\n              // commit-phase we mark this as such.\n              markUpdate(workInProgress);\n            }\n          } else {\n            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n            appendAllChildren(instance, workInProgress, false, false);\n            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n            // (eg DOM renderer supports auto-focus for certain elements).\n            // Make sure such renderers get scheduled for later work.\n\n            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n              markUpdate(workInProgress);\n            }\n          }\n\n          if (workInProgress.ref !== null) {\n            // If there is a ref on a host node we need to schedule a callback\n            markRef$1(workInProgress);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostText:\n      {\n        var newText = newProps;\n\n        if (current && workInProgress.stateNode != null) {\n          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n          // to schedule a side-effect to do the updates.\n\n          updateHostText$1(current, workInProgress, oldText, newText);\n        } else {\n          if (typeof newText !== 'string') {\n            if (workInProgress.stateNode === null) {\n              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            } // This can happen when we abort work.\n\n          }\n\n          var _rootContainerInstance = getRootHostContainer();\n\n          var _currentHostContext = getHostContext();\n\n          var _wasHydrated2 = popHydrationState(workInProgress);\n\n          if (_wasHydrated2) {\n            if (prepareToHydrateHostTextInstance(workInProgress)) {\n              markUpdate(workInProgress);\n            }\n          } else {\n            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n        // to its own fiber type so that we can add other kinds of hydration\n        // boundaries that aren't associated with a Suspense tree. In anticipation\n        // of such a refactor, all the hydration logic is contained in\n        // this branch.\n\n        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n\n          if (!fallthroughToNormalSuspensePath) {\n            if (workInProgress.flags & ShouldCapture) {\n              // Special case. There were remaining unhydrated nodes. We treat\n              // this as a mismatch. Revert to client rendering.\n              return workInProgress;\n            } else {\n              // Did not finish hydrating, either because this is the initial\n              // render or because something suspended.\n              return null;\n            }\n          } // Continue with the normal Suspense path.\n\n        }\n\n        if ((workInProgress.flags & DidCapture) !== NoFlags) {\n          // Something suspended. Re-render with the fallback children.\n          workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          } // Don't bubble properties in this case.\n\n\n          return workInProgress;\n        }\n\n        var nextDidTimeout = nextState !== null;\n        var prevDidTimeout = current !== null && current.memoizedState !== null;\n        // a passive effect, which is when we process the transitions\n\n\n        if (nextDidTimeout !== prevDidTimeout) {\n          // an effect to toggle the subtree's visibility. When we switch from\n          // fallback -> primary, the inner Offscreen fiber schedules this effect\n          // as part of its normal complete phase. But when we switch from\n          // primary -> fallback, the inner Offscreen fiber does not have a complete\n          // phase. So we need to schedule its effect here.\n          //\n          // We also use this flag to connect/disconnect the effects, but the same\n          // logic applies: when re-connecting, the Offscreen fiber's complete\n          // phase will handle scheduling the effect. It's only when the fallback\n          // is active that we have to do anything special.\n\n\n          if (nextDidTimeout) {\n            var _offscreenFiber2 = workInProgress.child;\n            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n            // in the concurrent tree already suspended during this render.\n            // This is a known bug.\n\n            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n              // TODO: Move this back to throwException because this is too late\n              // if this is a large tree which is common for initial loads. We\n              // don't know if we should restart a render or not until we get\n              // this marker, and this is too late.\n              // If this render already had a ping or lower pri updates,\n              // and this is the first time we know we're going to suspend we\n              // should be able to immediately restart from within throwException.\n              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n\n              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n                // If this was in an invisible tree or a new render, then showing\n                // this boundary is ok.\n                renderDidSuspend();\n              } else {\n                // Otherwise, we're going to have to hide content so we should\n                // suspend for longer if possible.\n                renderDidSuspendDelayIfPossible();\n              }\n            }\n          }\n        }\n\n        var wakeables = workInProgress.updateQueue;\n\n        if (wakeables !== null) {\n          // Schedule an effect to attach a retry listener to the promise.\n          // TODO: Move to passive phase\n          workInProgress.flags |= Update;\n        }\n\n        bubbleProperties(workInProgress);\n\n        {\n          if ((workInProgress.mode & ProfileMode) !== NoMode) {\n            if (nextDidTimeout) {\n              // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n              var primaryChildFragment = workInProgress.child;\n\n              if (primaryChildFragment !== null) {\n                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n              }\n            }\n          }\n        }\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ContextProvider:\n      // Pop provider fiber\n      var context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n\n    case IncompleteClassComponent:\n      {\n        // Same as class component case. I put it down here so that the tags are\n        // sequential to ensure this switch is compiled to a jump table.\n        var _Component = workInProgress.type;\n\n        if (isContextProvider(_Component)) {\n          popContext(workInProgress);\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState === null) {\n          // We're running in the default, \"independent\" mode.\n          // We don't do anything in this mode.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n        var renderedTail = renderState.rendering;\n\n        if (renderedTail === null) {\n          // We just rendered the head.\n          if (!didSuspendAlready) {\n            // This is the first pass. We need to figure out if anything is still\n            // suspended in the rendered set.\n            // If new content unsuspended, but there's still some content that\n            // didn't. Then we need to do a second pass that forces everything\n            // to keep showing their fallbacks.\n            // We might be suspended if something in this render pass suspended, or\n            // something in the previous committed pass suspended. Otherwise,\n            // there's no chance so we can skip the expensive call to\n            // findFirstSuspended.\n            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n\n            if (!cannotBeSuspended) {\n              var row = workInProgress.child;\n\n              while (row !== null) {\n                var suspended = findFirstSuspended(row);\n\n                if (suspended !== null) {\n                  didSuspendAlready = true;\n                  workInProgress.flags |= DidCapture;\n                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                  // part of the second pass. In that case nothing will subscribe to\n                  // its thenables. Instead, we'll transfer its thenables to the\n                  // SuspenseList so that it can retry if they resolve.\n                  // There might be multiple of these in the list but since we're\n                  // going to wait for all of them anyway, it doesn't really matter\n                  // which ones gets to ping. In theory we could get clever and keep\n                  // track of how many dependencies remain but it gets tricky because\n                  // in the meantime, we can add/remove/change items and dependencies.\n                  // We might bail out of the loop before finding any but that\n                  // doesn't matter since that means that the other boundaries that\n                  // we did find already has their listeners attached.\n\n                  var newThenables = suspended.updateQueue;\n\n                  if (newThenables !== null) {\n                    workInProgress.updateQueue = newThenables;\n                    workInProgress.flags |= Update;\n                  } // Rerender the whole list, but this time, we'll force fallbacks\n                  // to stay in place.\n                  // Reset the effect flags before doing the second pass since that's now invalid.\n                  // Reset the child fibers to their original state.\n\n\n                  workInProgress.subtreeFlags = NoFlags;\n                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                  // rerender the children.\n\n                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n                  return workInProgress.child;\n                }\n\n                row = row.sibling;\n              }\n            }\n\n            if (renderState.tail !== null && now() > getRenderTargetTime()) {\n              // We have already passed our CPU deadline but we still have rows\n              // left in the tail. We'll just give up further attempts to render\n              // the main content and only render fallbacks.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          } else {\n            cutOffTailIfNeeded(renderState, false);\n          } // Next we're going to render the tail.\n\n        } else {\n          // Append the rendered row to the child list.\n          if (!didSuspendAlready) {\n            var _suspended = findFirstSuspended(renderedTail);\n\n            if (_suspended !== null) {\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n              // get lost if this row ends up dropped during a second pass.\n\n              var _newThenables = _suspended.updateQueue;\n\n              if (_newThenables !== null) {\n                workInProgress.updateQueue = _newThenables;\n                workInProgress.flags |= Update;\n              }\n\n              cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n              ) {\n                  // We're done.\n                  bubbleProperties(workInProgress);\n                  return null;\n                }\n            } else if ( // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n              // We have now passed our CPU deadline and we'll just give up further\n              // attempts to render the main content and only render fallbacks.\n              // The assumption is that this is usually faster.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          }\n\n          if (renderState.isBackwards) {\n            // The effect list of the backwards tail will have been added\n            // to the end. This breaks the guarantee that life-cycles fire in\n            // sibling order but that isn't a strong guarantee promised by React.\n            // Especially since these might also just pop in during future commits.\n            // Append to the beginning of the list.\n            renderedTail.sibling = workInProgress.child;\n            workInProgress.child = renderedTail;\n          } else {\n            var previousSibling = renderState.last;\n\n            if (previousSibling !== null) {\n              previousSibling.sibling = renderedTail;\n            } else {\n              workInProgress.child = renderedTail;\n            }\n\n            renderState.last = renderedTail;\n          }\n        }\n\n        if (renderState.tail !== null) {\n          // We still have tail rows to render.\n          // Pop a row.\n          var next = renderState.tail;\n          renderState.rendering = next;\n          renderState.tail = next.sibling;\n          renderState.renderingStartTime = now();\n          next.sibling = null; // Restore the context.\n          // TODO: We can probably just avoid popping it instead and only\n          // setting it the first time we go from not suspended to suspended.\n\n          var suspenseContext = suspenseStackCursor.current;\n\n          if (didSuspendAlready) {\n            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n          } else {\n            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n          }\n\n          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n          // Don't bubble properties in this case.\n\n          return next;\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        popRenderLanes(workInProgress);\n        var _nextState = workInProgress.memoizedState;\n        var nextIsHidden = _nextState !== null;\n\n        if (current !== null) {\n          var _prevState = current.memoizedState;\n          var prevIsHidden = _prevState !== null;\n\n          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.\n          !enableLegacyHidden )) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n\n        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n          bubbleProperties(workInProgress);\n        } else {\n          // Don't bubble properties for hidden children unless we're rendering\n          // at offscreen priority.\n          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n            bubbleProperties(workInProgress);\n\n            if (supportsMutation) {\n              // Check if there was an insertion or update in the hidden subtree.\n              // If so, we need to hide those nodes in the commit phase, so\n              // schedule a visibility effect.\n              if ( workInProgress.subtreeFlags & (Placement | Update)) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n          }\n        }\n        return null;\n      }\n\n    case CacheComponent:\n      {\n\n        return null;\n      }\n\n    case TracingMarkerComponent:\n      {\n\n        return null;\n      }\n  }\n\n  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n}\n\nfunction unwindWork(current, workInProgress, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        var flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case HostRoot:\n      {\n        var root = workInProgress.stateNode;\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n        var _flags = workInProgress.flags;\n\n        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n          // There was an error during render that wasn't captured by a suspense\n          // boundary. Do a second pass on the root to unmount the children.\n          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n          return workInProgress;\n        } // We unwound to the root without completing it. Exit.\n\n\n        return null;\n      }\n\n    case HostComponent:\n      {\n        // TODO: popHydrationState\n        popHostContext(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var suspenseState = workInProgress.memoizedState;\n\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          if (workInProgress.alternate === null) {\n            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n          }\n\n          resetHydrationState();\n        }\n\n        var _flags2 = workInProgress.flags;\n\n        if (_flags2 & ShouldCapture) {\n          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n        // caught by a nested boundary. If not, it should bubble through.\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n\n    case ContextProvider:\n      var context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      return null;\n\n    case CacheComponent:\n\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(current, interruptedWork, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n\n  switch (interruptedWork.tag) {\n    case ClassComponent:\n      {\n        var childContextTypes = interruptedWork.type.childContextTypes;\n\n        if (childContextTypes !== null && childContextTypes !== undefined) {\n          popContext(interruptedWork);\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n        var root = interruptedWork.stateNode;\n        popHostContainer(interruptedWork);\n        popTopLevelContextObject(interruptedWork);\n        resetWorkInProgressVersions();\n        break;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(interruptedWork);\n        break;\n      }\n\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case ContextProvider:\n      var context = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      break;\n  }\n}\n\nfunction invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n  var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nvar invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\n{\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebook/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      if (typeof document === 'undefined' || document === null) {\n        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n      }\n\n      var evt = document.createEvent('Event');\n      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n\n      var didError = true; // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n\n      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n\n      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n\n        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n          window.event = windowEvent;\n        }\n      } // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n\n\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      } // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n\n\n      var error; // Use this to track whether the error event is ever called.\n\n      var didSetError = false;\n      var isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {// Ignore.\n            }\n          }\n        }\n      } // Create a fake event type.\n\n\n      var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n        } else if (isCrossOriginError) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n        }\n\n        this.onError(error);\n      } // Remove our event listeners\n\n\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nvar invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n\nvar hasError = false;\nvar caughtError = null; // Used by event system to capture/rethrow the first error.\nvar reporter = {\n  onError: function (error) {\n    hasError = true;\n    caughtError = error;\n  }\n};\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\n\nfunction invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n}\nfunction hasCaughtError() {\n  return hasError;\n}\nfunction clearCaughtError() {\n  if (hasError) {\n    var error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\nvar didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n\n{\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n} // Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n// Only used when enableSuspenseLayoutEffectSemantics is enabled.\n\n\nvar offscreenSubtreeIsHidden = false;\nvar offscreenSubtreeWasHidden = false;\nvar PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\nvar nextEffect = null; // Used for Profiling builds to track updaters.\n\nvar inProgressLanes = null;\nvar inProgressRoot = null;\nfunction reportUncaughtErrorInDEV(error) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  {\n    invokeGuardedCallback(null, function () {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nvar callComponentWillUnmountWithTimer = function (current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n\n  if ( current.mode & ProfileMode) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n}; // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\n  try {\n    commitHookEffectListMount(Layout, current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt unmounting.\n\n\nfunction safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\n  try {\n    instance.componentDidMount();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyAttachRef(current, nearestMountedAncestor) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current, nearestMountedAncestor) {\n  var ref = current.ref;\n\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      var retVal;\n\n      try {\n        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            retVal = ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n\n      {\n        if (typeof retVal === 'function') {\n          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n  try {\n    destroy();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nvar focusedInstanceHandle = null;\nvar shouldFireAfterActiveInstanceBlur = false;\nfunction commitBeforeMutationEffects(root, firstChild) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n  var shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n    var child = fiber.child;\n\n    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    setCurrentFiber(fiber);\n\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork) {\n  var current = finishedWork.alternate;\n  var flags = finishedWork.flags;\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentFiber(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          break;\n        }\n\n      case ClassComponent:\n        {\n          if (current !== null) {\n            var prevProps = current.memoizedProps;\n            var prevState = current.memoizedState;\n            var instance = finishedWork.stateNode; // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n              }\n            }\n\n            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n\n            {\n              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                didWarnSet.add(finishedWork.type);\n\n                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n              }\n            }\n\n            instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n          }\n\n          break;\n        }\n\n      case HostRoot:\n        {\n          if (supportsMutation) {\n            var root = finishedWork.stateNode;\n            clearContainer(root.containerInfo);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n\n      default:\n        {\n          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n    }\n\n    resetCurrentFiber();\n  }\n}\n\nfunction commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        var destroy = effect.destroy;\n        effect.destroy = undefined;\n\n        if (destroy !== undefined) {\n          {\n            if ((flags & Passive$1) !== NoFlags$1) {\n              markComponentPassiveEffectUnmountStarted(finishedWork);\n            } else if ((flags & Layout) !== NoFlags$1) {\n              markComponentLayoutEffectUnmountStarted(finishedWork);\n            }\n          }\n\n          {\n            if ((flags & Insertion) !== NoFlags$1) {\n              setIsRunningInsertionEffect(true);\n            }\n          }\n\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n\n          {\n            if ((flags & Insertion) !== NoFlags$1) {\n              setIsRunningInsertionEffect(false);\n            }\n          }\n\n          {\n            if ((flags & Passive$1) !== NoFlags$1) {\n              markComponentPassiveEffectUnmountStopped();\n            } else if ((flags & Layout) !== NoFlags$1) {\n              markComponentLayoutEffectUnmountStopped();\n            }\n          }\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags, finishedWork) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n        {\n          if ((flags & Passive$1) !== NoFlags$1) {\n            markComponentPassiveEffectMountStarted(finishedWork);\n          } else if ((flags & Layout) !== NoFlags$1) {\n            markComponentLayoutEffectMountStarted(finishedWork);\n          }\n        } // Mount\n\n\n        var create = effect.create;\n\n        {\n          if ((flags & Insertion) !== NoFlags$1) {\n            setIsRunningInsertionEffect(true);\n          }\n        }\n\n        effect.destroy = create();\n\n        {\n          if ((flags & Insertion) !== NoFlags$1) {\n            setIsRunningInsertionEffect(false);\n          }\n        }\n\n        {\n          if ((flags & Passive$1) !== NoFlags$1) {\n            markComponentPassiveEffectMountStopped();\n          } else if ((flags & Layout) !== NoFlags$1) {\n            markComponentLayoutEffectMountStopped();\n          }\n        }\n\n        {\n          var destroy = effect.destroy;\n\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            var hookName = void 0;\n\n            if ((effect.tag & Layout) !== NoFlags) {\n              hookName = 'useLayoutEffect';\n            } else if ((effect.tag & Insertion) !== NoFlags) {\n              hookName = 'useInsertionEffect';\n            } else {\n              hookName = 'useEffect';\n            }\n\n            var addendum = void 0;\n\n            if (destroy === null) {\n              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n\n            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n          }\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitPassiveEffectDurations(finishedRoot, finishedWork) {\n  {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler:\n          {\n            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n            var _finishedWork$memoize = finishedWork.memoizedProps,\n                id = _finishedWork$memoize.id,\n                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n            // It does not get reset until the start of the next commit phase.\n\n            var commitTime = getCommitTime();\n            var phase = finishedWork.alternate === null ? 'mount' : 'update';\n\n            {\n              if (isCurrentUpdateNested()) {\n                phase = 'nested-update';\n              }\n            }\n\n            if (typeof onPostCommit === 'function') {\n              onPostCommit(id, phase, passiveEffectDuration, commitTime);\n            } // Bubble times to the next nearest ancestor Profiler.\n            // After we process that Profiler, we'll bubble further up.\n\n\n            var parentFiber = finishedWork.return;\n\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  var root = parentFiber.stateNode;\n                  root.passiveEffectDuration += passiveEffectDuration;\n                  break outer;\n\n                case Profiler:\n                  var parentStateNode = parentFiber.stateNode;\n                  parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                  break outer;\n              }\n\n              parentFiber = parentFiber.return;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          if ( !offscreenSubtreeWasHidden) {\n            // At this point layout effects have already been destroyed (during mutation phase).\n            // This is done to prevent sibling component effects from interfering with each other,\n            // e.g. a destroy function in one component should never override a ref set\n            // by a create function in another component during the same commit.\n            if ( finishedWork.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListMount(Layout | HasEffect, finishedWork);\n              } finally {\n                recordLayoutEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListMount(Layout | HasEffect, finishedWork);\n            }\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = finishedWork.stateNode;\n\n          if (finishedWork.flags & Update) {\n            if (!offscreenSubtreeWasHidden) {\n              if (current === null) {\n                // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n\n                if ( finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    instance.componentDidMount();\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  instance.componentDidMount();\n                }\n              } else {\n                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n                var prevState = current.memoizedState; // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n\n                if ( finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                }\n              }\n            }\n          } // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n\n\n          var updateQueue = finishedWork.updateQueue;\n\n          if (updateQueue !== null) {\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n              }\n            } // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n\n            commitUpdateQueue(finishedWork, updateQueue, instance);\n          }\n\n          break;\n        }\n\n      case HostRoot:\n        {\n          // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n          var _updateQueue = finishedWork.updateQueue;\n\n          if (_updateQueue !== null) {\n            var _instance = null;\n\n            if (finishedWork.child !== null) {\n              switch (finishedWork.child.tag) {\n                case HostComponent:\n                  _instance = getPublicInstance(finishedWork.child.stateNode);\n                  break;\n\n                case ClassComponent:\n                  _instance = finishedWork.child.stateNode;\n                  break;\n              }\n            }\n\n            commitUpdateQueue(finishedWork, _updateQueue, _instance);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n\n          if (current === null && finishedWork.flags & Update) {\n            var type = finishedWork.type;\n            var props = finishedWork.memoizedProps;\n            commitMount(_instance2, type, props, finishedWork);\n          }\n\n          break;\n        }\n\n      case HostText:\n        {\n          // We have no life-cycles associated with text.\n          break;\n        }\n\n      case HostPortal:\n        {\n          // We have no life-cycles associated with portals.\n          break;\n        }\n\n      case Profiler:\n        {\n          {\n            var _finishedWork$memoize2 = finishedWork.memoizedProps,\n                onCommit = _finishedWork$memoize2.onCommit,\n                onRender = _finishedWork$memoize2.onRender;\n            var effectDuration = finishedWork.stateNode.effectDuration;\n            var commitTime = getCommitTime();\n            var phase = current === null ? 'mount' : 'update';\n\n            {\n              if (isCurrentUpdateNested()) {\n                phase = 'nested-update';\n              }\n            }\n\n            if (typeof onRender === 'function') {\n              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n            }\n\n            {\n              if (typeof onCommit === 'function') {\n                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n              // because the effect is also where times bubble to parent Profilers.\n\n\n              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n              // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n              var parentFiber = finishedWork.return;\n\n              outer: while (parentFiber !== null) {\n                switch (parentFiber.tag) {\n                  case HostRoot:\n                    var root = parentFiber.stateNode;\n                    root.effectDuration += effectDuration;\n                    break outer;\n\n                  case Profiler:\n                    var parentStateNode = parentFiber.stateNode;\n                    parentStateNode.effectDuration += effectDuration;\n                    break outer;\n                }\n\n                parentFiber = parentFiber.return;\n              }\n            }\n          }\n\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n          break;\n        }\n\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n      case TracingMarkerComponent:\n        {\n          break;\n        }\n\n      default:\n        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  if ( !offscreenSubtreeWasHidden) {\n    {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction reappearLayoutEffectsOnFiber(node) {\n  // Turn on layout effects in a tree that previously disappeared.\n  // TODO (Offscreen) Check: flags & LayoutStatic\n  switch (node.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( node.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            safelyCallCommitHookLayoutEffectListMount(node, node.return);\n          } finally {\n            recordLayoutEffectDuration(node);\n          }\n        } else {\n          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n        }\n\n        break;\n      }\n\n    case ClassComponent:\n      {\n        var instance = node.stateNode;\n\n        if (typeof instance.componentDidMount === 'function') {\n          safelyCallComponentDidMount(node, node.return, instance);\n        }\n\n        safelyAttachRef(node, node.return);\n        break;\n      }\n\n    case HostComponent:\n      {\n        safelyAttachRef(node, node.return);\n        break;\n      }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  var hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    var node = finishedWork;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n\n          try {\n            var instance = node.stateNode;\n\n            if (isHidden) {\n              hideInstance(instance);\n            } else {\n              unhideInstance(node.stateNode, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          try {\n            var _instance3 = node.stateNode;\n\n            if (isHidden) {\n              hideTextInstance(_instance3);\n            } else {\n              unhideTextInstance(_instance3, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork) {\n  var ref = finishedWork.ref;\n\n  if (ref !== null) {\n    var instance = finishedWork.stateNode;\n    var instanceToUse;\n\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n\n      default:\n        instanceToUse = instance;\n    } // Moved outside to ensure DCE works with this flag\n\n    if (typeof ref === 'function') {\n      var retVal;\n\n      if ( finishedWork.mode & ProfileMode) {\n        try {\n          startLayoutEffectTimer();\n          retVal = ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        retVal = ref(instanceToUse);\n      }\n\n      {\n        if (typeof retVal === 'function') {\n          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n        }\n      }\n    } else {\n      {\n        if (!ref.hasOwnProperty('current')) {\n          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction detachFiberMutation(fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber) {\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  } // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n\n\n  {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n\n    if (fiber.tag === HostComponent) {\n      var hostInstance = fiber.stateNode;\n\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n\n    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    {\n      fiber._debugOwner = null;\n    }\n\n    {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  var portal = current.stateNode;\n  var containerInfo = portal.containerInfo;\n  var emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction getHostParentFiber(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n\n    parent = parent.return;\n  }\n\n  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n}\n\nfunction isHostParent(fiber) {\n  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n}\n\nfunction getHostSibling(fiber) {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  var node = fiber;\n\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n\n    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      } // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n\n\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    } // Check if this host node is stable or about to be placed.\n\n\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork) {\n  if (!supportsMutation) {\n    return;\n  } // Recursively insert all host nodes into the parent.\n\n\n  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n  switch (parentFiber.tag) {\n    case HostComponent:\n      {\n        var parent = parentFiber.stateNode;\n\n        if (parentFiber.flags & ContentReset) {\n          // Reset the text content of the parent before doing any insertions\n          resetTextContent(parent); // Clear ContentReset from the effect tag\n\n          parentFiber.flags &= ~ContentReset;\n        }\n\n        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n\n        insertOrAppendPlacementNode(finishedWork, before, parent);\n        break;\n      }\n\n    case HostRoot:\n    case HostPortal:\n      {\n        var _parent = parentFiber.stateNode.containerInfo;\n\n        var _before = getHostSibling(finishedWork);\n\n        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n        break;\n      }\n    // eslint-disable-next-line-no-fallthrough\n\n    default:\n      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    var stateNode = node.stateNode;\n\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    var stateNode = node.stateNode;\n\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n} // These are tracked on the stack as we recursively traverse a\n// deleted subtree.\n// TODO: Update these during the whole mutation phase, not just during\n// a deletion.\n\n\nvar hostParent = null;\nvar hostParentIsContainer = false;\n\nfunction commitDeletionEffects(root, returnFiber, deletedFiber) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was deleted but we need to recurse down its\n    // children to find all the terminal nodes.\n    // Recursively delete all host nodes from the parent, detach refs, clean\n    // up mounted layout effects, and call componentWillUnmount.\n    // We only need to remove the topmost host child in each branch. But then we\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n    // could split this into two separate traversals functions, where the second\n    // one doesn't include any removeChild logic. This is maybe the same\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n    // the layout phase is refactored to use recursion).\n    // Before starting, find the nearest host parent on the stack so we know\n    // which instance/container to remove the children from.\n    // TODO: Instead of searching up the fiber return path on every deletion, we\n    // can track the nearest host component on the JS stack as we traverse the\n    // tree during the commit phase. This would make insertions faster, too.\n    var parent = returnFiber;\n\n    findParent: while (parent !== null) {\n      switch (parent.tag) {\n        case HostComponent:\n          {\n            hostParent = parent.stateNode;\n            hostParentIsContainer = false;\n            break findParent;\n          }\n\n        case HostRoot:\n          {\n            hostParent = parent.stateNode.containerInfo;\n            hostParentIsContainer = true;\n            break findParent;\n          }\n\n        case HostPortal:\n          {\n            hostParent = parent.stateNode.containerInfo;\n            hostParentIsContainer = true;\n            break findParent;\n          }\n      }\n\n      parent = parent.return;\n    }\n\n    if (hostParent === null) {\n      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n    }\n\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n    hostParent = null;\n    hostParentIsContainer = false;\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n  }\n\n  detachFiberMutation(deletedFiber);\n}\n\nfunction recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n  // TODO: Use a static flag to skip trees that don't have unmount effects\n  var child = parent.child;\n\n  while (child !== null) {\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n    child = child.sibling;\n  }\n}\n\nfunction commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n  // into their subtree. There are simpler cases in the inner switch\n  // that don't modify the stack.\n\n  switch (deletedFiber.tag) {\n    case HostComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        } // Intentional fallthrough to next branch\n\n      }\n    // eslint-disable-next-line-no-fallthrough\n\n    case HostText:\n      {\n        // We only need to remove the nearest host child. Set the host parent\n        // to `null` on the stack to indicate that nested children don't\n        // need to be removed.\n        if (supportsMutation) {\n          var prevHostParent = hostParent;\n          var prevHostParentIsContainer = hostParentIsContainer;\n          hostParent = null;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          hostParent = prevHostParent;\n          hostParentIsContainer = prevHostParentIsContainer;\n\n          if (hostParent !== null) {\n            // Now that all the child effects have unmounted, we can remove the\n            // node from the tree.\n            if (hostParentIsContainer) {\n              removeChildFromContainer(hostParent, deletedFiber.stateNode);\n            } else {\n              removeChild(hostParent, deletedFiber.stateNode);\n            }\n          }\n        } else {\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        }\n\n        return;\n      }\n\n    case DehydratedFragment:\n      {\n        // Delete the dehydrated suspense boundary and all of its content.\n\n\n        if (supportsMutation) {\n          if (hostParent !== null) {\n            if (hostParentIsContainer) {\n              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);\n            } else {\n              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostPortal:\n      {\n        if (supportsMutation) {\n          // When we go into a portal, it becomes the parent to remove from.\n          var _prevHostParent = hostParent;\n          var _prevHostParentIsContainer = hostParentIsContainer;\n          hostParent = deletedFiber.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          hostParent = _prevHostParent;\n          hostParentIsContainer = _prevHostParentIsContainer;\n        } else {\n          emptyPortalContainer(deletedFiber);\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        }\n\n        return;\n      }\n\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          var updateQueue = deletedFiber.updateQueue;\n\n          if (updateQueue !== null) {\n            var lastEffect = updateQueue.lastEffect;\n\n            if (lastEffect !== null) {\n              var firstEffect = lastEffect.next;\n              var effect = firstEffect;\n\n              do {\n                var _effect = effect,\n                    destroy = _effect.destroy,\n                    tag = _effect.tag;\n\n                if (destroy !== undefined) {\n                  if ((tag & Insertion) !== NoFlags$1) {\n                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                  } else if ((tag & Layout) !== NoFlags$1) {\n                    {\n                      markComponentLayoutEffectUnmountStarted(deletedFiber);\n                    }\n\n                    if ( deletedFiber.mode & ProfileMode) {\n                      startLayoutEffectTimer();\n                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                      recordLayoutEffectDuration(deletedFiber);\n                    } else {\n                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                    }\n\n                    {\n                      markComponentLayoutEffectUnmountStopped();\n                    }\n                  }\n                }\n\n                effect = effect.next;\n              } while (effect !== firstEffect);\n            }\n          }\n        }\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case ClassComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n          var instance = deletedFiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n          }\n        }\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case OffscreenComponent:\n      {\n        if ( // TODO: Remove this dead flag\n         deletedFiber.mode & ConcurrentMode) {\n          // If this offscreen component is hidden, we already unmounted it. Before\n          // deleting the children, track that it's already unmounted so that we\n          // don't attempt to unmount the effects again.\n          // TODO: If the tree is hidden, in most cases we should be able to skip\n          // over the nested children entirely. An exception is we haven't yet found\n          // the topmost host node to delete, which we already track on the stack.\n          // But the other case is portals, which need to be detached no matter how\n          // deeply they are nested. We should use a subtree flag to track whether a\n          // subtree includes a nested portal.\n          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        } else {\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n  }\n}\n\nfunction commitSuspenseCallback(finishedWork) {\n  // TODO: Move this to passive phase\n  var newState = finishedWork.memoizedState;\n}\n\nfunction commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n  if (!supportsHydration) {\n    return;\n  }\n\n  var newState = finishedWork.memoizedState;\n\n  if (newState === null) {\n    var current = finishedWork.alternate;\n\n    if (current !== null) {\n      var prevState = current.memoizedState;\n\n      if (prevState !== null) {\n        var suspenseInstance = prevState.dehydrated;\n\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  var wakeables = finishedWork.updateQueue;\n\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    var retryCache = finishedWork.stateNode;\n\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n\n    wakeables.forEach(function (wakeable) {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        {\n          if (isDevToolsPresent) {\n            if (inProgressLanes !== null && inProgressRoot !== null) {\n              // If we have pending work still, associate the original updaters with it.\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            } else {\n              throw Error('Expected finished root and lanes to be set. This is a bug in React.');\n            }\n          }\n        }\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n} // This function detects when a Suspense boundary goes from visible to hidden.\nfunction commitMutationEffects(root, finishedWork, committedLanes) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  setCurrentFiber(finishedWork);\n  commitMutationEffectsOnFiber(finishedWork, root);\n  setCurrentFiber(finishedWork);\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects hae fired.\n  var deletions = parentFiber.deletions;\n\n  if (deletions !== null) {\n    for (var i = 0; i < deletions.length; i++) {\n      var childToDelete = deletions[i];\n\n      try {\n        commitDeletionEffects(root, parentFiber, childToDelete);\n      } catch (error) {\n        captureCommitPhaseError(childToDelete, parentFiber, error);\n      }\n    }\n  }\n\n  var prevDebugFiber = getCurrentFiber();\n\n  if (parentFiber.subtreeFlags & MutationMask) {\n    var child = parentFiber.child;\n\n    while (child !== null) {\n      setCurrentFiber(child);\n      commitMutationEffectsOnFiber(child, root);\n      child = child.sibling;\n    }\n  }\n\n  setCurrentFiber(prevDebugFiber);\n}\n\nfunction commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n  var current = finishedWork.alternate;\n  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconcilation, because those can be set on all fiber types.\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          try {\n            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n            commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          } // Layout effects are destroyed during the mutation phase so that all\n          // destroy functions for all fibers are called before any create functions.\n          // This prevents sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n\n\n          if ( finishedWork.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n\n            recordLayoutEffectDuration(finishedWork);\n          } else {\n            try {\n              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case ClassComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n\n        return;\n      }\n\n    case HostComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n\n        if (supportsMutation) {\n          // TODO: ContentReset gets cleared by the children during the commit\n          // phase. This is a refactor hazard because it means we must read\n          // flags the flags after `commitReconciliationEffects` has already run;\n          // the order matters. We should refactor so that ContentReset does not\n          // rely on mutating the flag during commit. Like by setting a flag\n          // during the render phase instead.\n          if (finishedWork.flags & ContentReset) {\n            var instance = finishedWork.stateNode;\n\n            try {\n              resetTextContent(instance);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n\n          if (flags & Update) {\n            var _instance4 = finishedWork.stateNode;\n\n            if (_instance4 != null) {\n              // Commit the work prepared earlier.\n              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n              // as the newProps. The updatePayload will contain the real change in\n              // this case.\n\n              var oldProps = current !== null ? current.memoizedProps : newProps;\n              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n              var updatePayload = finishedWork.updateQueue;\n              finishedWork.updateQueue = null;\n\n              if (updatePayload !== null) {\n                try {\n                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostText:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          if (supportsMutation) {\n            if (finishedWork.stateNode === null) {\n              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            }\n\n            var textInstance = finishedWork.stateNode;\n            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n\n            var oldText = current !== null ? current.memoizedProps : newText;\n\n            try {\n              commitTextUpdate(textInstance, oldText, newText);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostRoot:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          if (supportsMutation && supportsHydration) {\n            if (current !== null) {\n              var prevRootState = current.memoizedState;\n\n              if (prevRootState.isDehydrated) {\n                try {\n                  commitHydratedContainer(root.containerInfo);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n          }\n\n          if (supportsPersistence) {\n            var containerInfo = root.containerInfo;\n            var pendingChildren = root.pendingChildren;\n\n            try {\n              replaceContainerChildren(containerInfo, pendingChildren);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostPortal:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          if (supportsPersistence) {\n            var portal = finishedWork.stateNode;\n            var _containerInfo = portal.containerInfo;\n            var _pendingChildren = portal.pendingChildren;\n\n            try {\n              replaceContainerChildren(_containerInfo, _pendingChildren);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case SuspenseComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n        var offscreenFiber = finishedWork.child;\n\n        if (offscreenFiber.flags & Visibility) {\n          var offscreenInstance = offscreenFiber.stateNode;\n          var newState = offscreenFiber.memoizedState;\n          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can\n          // read it during an event\n\n          offscreenInstance.isHidden = isHidden;\n\n          if (isHidden) {\n            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;\n\n            if (!wasHidden) {\n              // TODO: Move to passive phase\n              markCommitTimeOfFallback();\n            }\n          }\n        }\n\n        if (flags & Update) {\n          try {\n            commitSuspenseCallback(finishedWork);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n\n          attachSuspenseRetryListeners(finishedWork);\n        }\n\n        return;\n      }\n\n    case OffscreenComponent:\n      {\n        var _wasHidden = current !== null && current.memoizedState !== null;\n\n        if ( // TODO: Remove this dead flag\n         finishedWork.mode & ConcurrentMode) {\n          // Before committing the children, track on the stack whether this\n          // offscreen subtree was already hidden, so that we don't unmount the\n          // effects again.\n          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        } else {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n        }\n\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Visibility) {\n          var _offscreenInstance = finishedWork.stateNode;\n          var _newState = finishedWork.memoizedState;\n\n          var _isHidden = _newState !== null;\n\n          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can\n          // read it during an event\n\n          _offscreenInstance.isHidden = _isHidden;\n\n          {\n            if (_isHidden) {\n              if (!_wasHidden) {\n                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                  nextEffect = offscreenBoundary;\n                  var offscreenChild = offscreenBoundary.child;\n\n                  while (offscreenChild !== null) {\n                    nextEffect = offscreenChild;\n                    disappearLayoutEffects_begin(offscreenChild);\n                    offscreenChild = offscreenChild.sibling;\n                  }\n                }\n              }\n            }\n          }\n\n          if (supportsMutation) {\n            // TODO: This needs to run whenever there's an insertion or update\n            // inside a hidden Offscreen tree.\n            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n          }\n        }\n\n        return;\n      }\n\n    case SuspenseListComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          attachSuspenseRetryListeners(finishedWork);\n        }\n\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        return;\n      }\n\n    default:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n        return;\n      }\n  }\n}\n\nfunction commitReconciliationEffects(finishedWork) {\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\n  // type. They needs to happen after the children effects have fired, but\n  // before the effects on this fiber have fired.\n  var flags = finishedWork.flags;\n\n  if (flags & Placement) {\n    try {\n      commitPlacement(finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    } // Clear the \"placement\" from effect tag so that we know that this is\n    // inserted, before any life-cycles like componentDidMount gets called.\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n    // and isMounted is deprecated anyway so we should be able to kill this.\n\n\n    finishedWork.flags &= ~Placement;\n  }\n\n  if (flags & Hydrating) {\n    finishedWork.flags &= ~Hydrating;\n  }\n}\n\nfunction commitLayoutEffects(finishedWork, root, committedLanes) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = finishedWork;\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if ( fiber.tag === OffscreenComponent && isModernRoot) {\n      // Keep track of the current Offscreen stack's state.\n      var isHidden = fiber.memoizedState !== null;\n      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n\n      if (newOffscreenSubtreeIsHidden) {\n        // The Offscreen tree is hidden. Skip over its layout effects.\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      } else {\n        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n        var current = fiber.alternate;\n        var wasHidden = current !== null && current.memoizedState !== null;\n        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\n\n        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n          // This is the root of a reappearing boundary. Turn its layout effects\n          // back on.\n          nextEffect = fiber;\n          reappearLayoutEffects_begin(fiber);\n        }\n\n        var child = firstChild;\n\n        while (child !== null) {\n          nextEffect = child;\n          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.\n          root, committedLanes);\n          child = child.sibling;\n        } // Restore Offscreen state and resume in our-progress traversal.\n\n\n        nextEffect = fiber;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      }\n    }\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      var current = fiber.alternate;\n      setCurrentFiber(fiber);\n\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n\n      resetCurrentFiber();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction disappearLayoutEffects_begin(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          if ( fiber.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListUnmount(Layout, fiber, fiber.return);\n            } finally {\n              recordLayoutEffectDuration(fiber);\n            }\n          } else {\n            commitHookEffectListUnmount(Layout, fiber, fiber.return);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          // TODO (Offscreen) Check: flags & RefStatic\n          safelyDetachRef(fiber, fiber.return);\n          var instance = fiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          safelyDetachRef(fiber, fiber.return);\n          break;\n        }\n\n      case OffscreenComponent:\n        {\n          // Check if this is a\n          var isHidden = fiber.memoizedState !== null;\n\n          if (isHidden) {\n            // Nested Offscreen tree is already hidden. Don't disappear\n            // its effects.\n            disappearLayoutEffects_complete(subtreeRoot);\n            continue;\n          }\n\n          break;\n        }\n    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n    if (firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      disappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction disappearLayoutEffects_complete(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction reappearLayoutEffects_begin(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if (fiber.tag === OffscreenComponent) {\n      var isHidden = fiber.memoizedState !== null;\n\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n        reappearLayoutEffects_complete(subtreeRoot);\n        continue;\n      }\n    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n    if (firstChild !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      reappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction reappearLayoutEffects_complete(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\n\n    setCurrentFiber(fiber);\n\n    try {\n      reappearLayoutEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);\n}\n\nfunction commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentFiber(fiber);\n\n      try {\n        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n\n      resetCurrentFiber();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( finishedWork.mode & ProfileMode) {\n          startPassiveEffectTimer();\n\n          try {\n            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n          } finally {\n            recordPassiveEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffects(firstChild) {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      var deletions = fiber.deletions;\n\n      if (deletions !== null) {\n        for (var i = 0; i < deletions.length; i++) {\n          var fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n        }\n\n        {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          var previousFiber = fiber.alternate;\n\n          if (previousFiber !== null) {\n            var detachedChild = previousFiber.child;\n\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n\n              do {\n                var detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentFiber(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentFiber();\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( finishedWork.mode & ProfileMode) {\n          startPassiveEffectTimer();\n          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n          recordPassiveEffectDuration(finishedWork);\n        } else {\n          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n\n    setCurrentFiber(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentFiber();\n    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n    if (child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var sibling = fiber.sibling;\n    var returnFiber = fiber.return;\n\n    {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      sibling.return = returnFiber;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( current.mode & ProfileMode) {\n          startPassiveEffectTimer();\n          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n          recordPassiveEffectDuration(current);\n        } else {\n          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n        }\n\n        break;\n      }\n  }\n} // TODO: Reuse reappearLayoutEffects traversal here?\n\n\nfunction invokeLayoutEffectMountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListMount(Layout | HasEffect, fiber);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = fiber.stateNode;\n\n          try {\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListMount(Passive$1 | HasEffect, fiber);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = fiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n        }\n    }\n  }\n}\n\nvar COMPONENT_TYPE = 0;\nvar HAS_PSEUDO_CLASS_TYPE = 1;\nvar ROLE_TYPE = 2;\nvar TEST_NAME_TYPE = 3;\nvar TEXT_TYPE = 4;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\nfunction createComponentSelector(component) {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component\n  };\n}\nfunction createHasPseudoClassSelector(selectors) {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors\n  };\n}\nfunction createRoleSelector(role) {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role\n  };\n}\nfunction createTextSelector(text) {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text\n  };\n}\nfunction createTestNameSelector(id) {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot) {\n  var maybeFiber = getInstanceFromNode(hostRoot);\n\n  if (maybeFiber != null) {\n    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n      throw new Error('Invalid host root specified. Should be either a React container or a node with a testname attribute.');\n    }\n\n    return maybeFiber;\n  } else {\n    var fiberRoot = findFiberRoot(hostRoot);\n\n    if (fiberRoot === null) {\n      throw new Error('Could not find React container within specified host subtree.');\n    } // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n\n\n    return fiberRoot.stateNode.current;\n  }\n}\n\nfunction matchSelector(fiber, selector) {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n\n      break;\n\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(fiber, selector.value);\n\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        var node = fiber.stateNode;\n\n        if (matchAccessibilityRole(node, selector.value)) {\n          return true;\n        }\n      }\n\n      break;\n\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        var textContent = getTextContent(fiber);\n\n        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n          return true;\n        }\n      }\n\n      break;\n\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        var dataTestID = fiber.memoizedProps['data-testname'];\n\n        if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n          return true;\n        }\n      }\n\n      break;\n\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector) {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      var displayName = getComponentNameFromType(selector.value) || 'Unknown';\n      return \"<\" + displayName + \">\";\n\n    case HAS_PSEUDO_CLASS_TYPE:\n      return \":has(\" + (selectorToString(selector) || '') + \")\";\n\n    case ROLE_TYPE:\n      return \"[role=\\\"\" + selector.value + \"\\\"]\";\n\n    case TEXT_TYPE:\n      return \"\\\"\" + selector.value + \"\\\"\";\n\n    case TEST_NAME_TYPE:\n      return \"[data-testname=\\\"\" + selector.value + \"\\\"]\";\n\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n}\n\nfunction findPaths(root, selectors) {\n  var matchingFibers = [];\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n} // Same as findPaths but with eager bailout on first match\n\n\nfunction hasMatchingPaths(root, selectors) {\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction findAllNodes(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var matchingFibers = findPaths(root, selectors);\n  var instanceRoots = [];\n  var stack = Array.from(matchingFibers);\n  var index = 0;\n\n  while (index < stack.length) {\n    var node = stack[index++];\n\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n\n      instanceRoots.push(node.stateNode);\n    } else {\n      var child = node.child;\n\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\nfunction getFindAllNodesFailureDescription(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var maxSelectorIndex = 0;\n  var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    var unmatchedNames = [];\n\n    for (var i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return 'findAllNodes was able to match part of the selector:\\n' + (\"  \" + matchedNames.join(' > ') + \"\\n\\n\") + 'No matching component was found for:\\n' + (\"  \" + unmatchedNames.join(' > '));\n  }\n\n  return null;\n}\nfunction findBoundingRects(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var instanceRoots = findAllNodes(hostRoot, selectors);\n  var boundingRects = [];\n\n  for (var i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (var _i = boundingRects.length - 1; _i > 0; _i--) {\n    var targetRect = boundingRects[_i];\n    var targetLeft = targetRect.x;\n    var targetRight = targetLeft + targetRect.width;\n    var targetTop = targetRect.y;\n    var targetBottom = targetTop + targetRect.height;\n\n    for (var j = _i - 1; j >= 0; j--) {\n      if (_i !== j) {\n        var otherRect = boundingRects[j];\n        var otherLeft = otherRect.x;\n        var otherRight = otherLeft + otherRect.width;\n        var otherTop = otherRect.y;\n        var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(_i, 1);\n          break;\n        } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(_i, 1);\n          break;\n        } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(_i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\nfunction focusWithin(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var matchingFibers = findPaths(root, selectors);\n  var stack = Array.from(matchingFibers);\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n\n    if (fiber.tag === HostComponent) {\n      var node = fiber.stateNode;\n\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n\n    var child = fiber.child;\n\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\nvar commitHooks = [];\nfunction onCommitRoot$1() {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(function (commitHook) {\n      return commitHook();\n    });\n  }\n}\nfunction observeVisibleRects(hostRoot, selectors, callback, options) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var instanceRoots = findAllNodes(hostRoot, selectors);\n\n  var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),\n      disconnect = _setupIntersectionObs.disconnect,\n      observe = _setupIntersectionObs.observe,\n      unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n\n\n  var commitHook = function () {\n    var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n    instanceRoots.forEach(function (target) {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n    nextInstanceRoots.forEach(function (target) {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n  return {\n    disconnect: function () {\n      // Stop listening for React mutations:\n      var index = commitHooks.indexOf(commitHook);\n\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      } // Disconnect the host observer:\n\n\n      disconnect();\n    }\n  };\n}\n\nvar ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\nfunction isLegacyActEnvironment(fiber) {\n  {\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n    // act environment whenever `jest` is defined, but you can still turn off\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n    // to false.\n    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n    var jestIsDefined = typeof jest !== 'undefined';\n    return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;\n  }\n}\nfunction isConcurrentActEnvironment() {\n  {\n    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n      // TODO: Include link to relevant documentation page.\n      error('The current testing environment is not configured to support ' + 'act(...)');\n    }\n\n    return isReactActEnvironmentGlobal;\n  }\n}\n\nvar ceil = Math.ceil;\nvar ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,\n    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\nvar NoContext =\n/*             */\n0;\nvar BatchedContext =\n/*               */\n1;\nvar RenderContext =\n/*                */\n2;\nvar CommitContext =\n/*                */\n4;\nvar RootInProgress = 0;\nvar RootFatalErrored = 1;\nvar RootErrored = 2;\nvar RootSuspended = 3;\nvar RootSuspendedWithDelay = 4;\nvar RootCompleted = 5;\nvar RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\nvar executionContext = NoContext; // The root we're working on\n\nvar workInProgressRoot = null; // The fiber we're working on\n\nvar workInProgress = null; // The lanes we're rendering\n\nvar workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\n\nvar subtreeRenderLanes = NoLanes;\nvar subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\nvar workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\nvar workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\n\nvar workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\n\nvar workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\nvar workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\nvar workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\nvar workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\n\nvar workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\n\nvar globalMostRecentFallbackTime = 0;\nvar FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\n\nvar workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\n\nvar RENDER_TIMEOUT_MS = 500;\nvar workInProgressTransitions = null;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nfunction getRenderTargetTime() {\n  return workInProgressRootRenderTargetTime;\n}\nvar hasUncaughtError = false;\nvar firstUncaughtError = null;\nvar legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\nvar rootDoesHavePassiveEffects = false;\nvar rootWithPendingPassiveEffects = null;\nvar pendingPassiveEffectsLanes = NoLanes;\nvar pendingPassiveProfilerEffects = [];\nvar pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates\n\nvar NESTED_UPDATE_LIMIT = 50;\nvar nestedUpdateCount = 0;\nvar rootWithNestedUpdates = null;\nvar isFlushingPassiveEffects = false;\nvar didScheduleUpdateDuringPassiveEffects = false;\nvar NESTED_PASSIVE_UPDATE_LIMIT = 50;\nvar nestedPassiveUpdateCount = 0;\nvar rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\n\nvar currentEventTime = NoTimestamp;\nvar currentEventTransitionLane = NoLanes;\nvar isRunningInsertionEffect = false;\nfunction getWorkInProgressRoot() {\n  return workInProgressRoot;\n}\nfunction requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  } // We're not inside React, so we may be in the middle of a browser event.\n\n\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  } // This is the first update since React yielded. Compute a new start time.\n\n\n  currentEventTime = now();\n  return currentEventTime;\n}\nfunction requestUpdateLane(fiber) {\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  var isTransition = requestCurrentTransition() !== NoTransition;\n\n  if (isTransition) {\n    if ( ReactCurrentBatchConfig$2.transition !== null) {\n      var transition = ReactCurrentBatchConfig$2.transition;\n\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n\n      transition._updatedFibers.add(fiber);\n    } // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n\n    return currentEventTransitionLane;\n  } // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  var updateLane = getCurrentUpdatePriority();\n\n  if (updateLane !== NoLane) {\n    return updateLane;\n  } // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  var eventLane = getCurrentEventPriority();\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  }\n\n  return claimNextRetryLane();\n}\n\nfunction scheduleUpdateOnFiber(root, fiber, lane, eventTime) {\n  checkForNestedUpdates();\n\n  {\n    if (isRunningInsertionEffect) {\n      error('useInsertionEffect must not schedule updates.');\n    }\n  }\n\n  {\n    if (isFlushingPassiveEffects) {\n      didScheduleUpdateDuringPassiveEffects = true;\n    }\n  } // Mark that the root has a pending update.\n\n\n  markRootUpdated(root, lane, eventTime);\n\n  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n  } else {\n    // This is a normal update, scheduled from outside the render phase. For\n    // example, during an input event.\n    {\n      if (isDevToolsPresent) {\n        addFiberToLanesMap(root, fiber, lane);\n      }\n    }\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (root === workInProgressRoot) {\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root. Unless the\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n      // phase update. In that case, we don't treat render phase updates as if\n      // they were interleaved, for backwards compat reasons.\n      if ( (executionContext & RenderContext) === NoContext) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n      }\n\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended$1(root, workInProgressRootRenderLanes);\n      }\n    }\n\n    ensureRootIsScheduled(root, eventTime);\n\n    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n      // Flush the synchronous work now, unless we're already working or inside\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n      // without immediately flushing it. We only do this for user-initiated\n      // updates, to preserve historical behavior of legacy mode.\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\nfunction scheduleInitialHydrationOnRoot(root, lane, eventTime) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  var current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane, eventTime);\n  ensureRootIsScheduled(root, eventTime);\n}\nfunction isUnsafeClassRenderPhaseUpdate(fiber) {\n  // Check if this is a render phase update. Only called by class components,\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n    // decided not to enable it.\n     (executionContext & RenderContext) !== NoContext\n  );\n} // Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\n\nfunction ensureRootIsScheduled(root, currentTime) {\n  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n\n  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback$1(existingCallbackNode);\n    }\n\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  } // We use the highest priority lane to represent the priority of the callback.\n\n\n  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n  var existingCallbackPriority = root.callbackPriority;\n\n  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n  // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n  // on the `act` queue.\n  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n    {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n      }\n    } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback$1(existingCallbackNode);\n  } // Schedule a new callback.\n\n\n  var newCallbackNode;\n\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n      }\n\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if ( ReactCurrentActQueue$1.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(function () {\n          // In Safari, appending an iframe forces microtasks to run.\n          // https://github.com/facebook/react/issues/22459\n          // We don't support running callbacks in the middle of render\n          // or commit so we need to check against that.\n          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n            // Note that this would still prematurely flush the callbacks\n            // if this happens outside render or commit phase (e.g. in an event).\n            flushSyncCallbacks();\n          }\n        });\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n    }\n\n    newCallbackNode = null;\n  } else {\n    var schedulerPriorityLevel;\n\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediatePriority;\n        break;\n\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingPriority;\n        break;\n\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalPriority;\n        break;\n\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdlePriority;\n        break;\n\n      default:\n        schedulerPriorityLevel = NormalPriority;\n        break;\n    }\n\n    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n} // This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\n\n\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  {\n    resetNestedUpdateFlag();\n  } // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n\n\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  } // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n\n\n  var originalCallbackNode = root.callbackNode;\n  var didFlushPassiveEffects = flushPassiveEffects();\n\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    }\n  } // Determine the next lanes to work on, using the fields stored\n  // on the root.\n\n\n  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  } // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n\n\n  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);\n  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n\n  if (exitStatus !== RootInProgress) {\n    if (exitStatus === RootErrored) {\n      // If something threw an error, try rendering one more time. We'll\n      // render synchronously to block concurrent data mutations, and we'll\n      // includes all pending updates are included. If it still fails after\n      // the second attempt, we'll give up and commit the resulting tree.\n      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n      }\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      var fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended$1(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    if (exitStatus === RootDidNotComplete) {\n      // The render unwound without completing the tree. This happens in special\n      // cases where need to exit the current render without producing a\n      // consistent tree or committing.\n      //\n      // This should only happen during a concurrent render, not a discrete or\n      // synchronous update. We should have already checked for this when we\n      // unwound the stack.\n      markRootSuspended$1(root, lanes);\n    } else {\n      // The render completed.\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      var renderWasConcurrent = !includesBlockingLane(root, lanes);\n      var finishedWork = root.current.alternate;\n\n      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n        if (exitStatus === RootErrored) {\n          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n          if (_errorRetryLanes !== NoLanes) {\n            lanes = _errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n            // concurrent events.\n          }\n        }\n\n        if (exitStatus === RootFatalErrored) {\n          var _fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended$1(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw _fatalError;\n        }\n      } // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n\n\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      finishConcurrentRender(root, exitStatus, lanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, now());\n\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n\n  return null;\n}\n\nfunction recoverFromConcurrentError(root, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n  // Before rendering again, save the errors from the previous attempt.\n  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  if (isRootDehydrated(root)) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n\n    {\n      errorHydratingContainer(root.containerInfo);\n    }\n  }\n\n  var exitStatus = renderRootSync(root, errorRetryLanes);\n\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  }\n\n  return exitStatus;\n}\n\nfunction queueRecoverableErrors(errors) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored:\n      {\n        throw new Error('Root did not complete. This is a bug in React.');\n      }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n\n    case RootErrored:\n      {\n        // We should have already attempted to retry this tree. If we reached\n        // this point, it errored again. Commit it.\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    case RootSuspended:\n      {\n        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n        // should immediately commit it or wait a bit.\n\n        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()) {\n          // This render only included retries, no updates. Throttle committing\n          // retries so that we don't show too many loading states too quickly.\n          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\n\n          if (msUntilTimeout > 10) {\n            var nextLanes = getNextLanes(root, NoLanes);\n\n            if (nextLanes !== NoLanes) {\n              // There's additional work on this root.\n              break;\n            }\n\n            var suspendedLanes = root.suspendedLanes;\n\n            if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n              // We should prefer to render the fallback of at the last\n              // suspended level. Ping the last suspended level to try\n              // rendering it again.\n              // FIXME: What if the suspended lanes are Idle? Should not restart.\n              var eventTime = requestEventTime();\n              markRootPinged(root, suspendedLanes);\n              break;\n            } // The render is suspended, it hasn't timed out, and there's no\n            // lower priority work to do. Instead of committing the fallback\n            // immediately, wait for more data to arrive.\n\n\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);\n            break;\n          }\n        } // The work expired. Commit immediately.\n\n\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    case RootSuspendedWithDelay:\n      {\n        markRootSuspended$1(root, lanes);\n\n        if (includesOnlyTransitions(lanes)) {\n          // This is a transition, so we should exit without committing a\n          // placeholder and without scheduling a timeout. Delay indefinitely\n          // until we receive more data.\n          break;\n        }\n\n        if (!shouldForceFlushFallbacksInDEV()) {\n          // This is not a transition, but we did trigger an avoided state.\n          // Schedule a placeholder to display after a short delay, using the Just\n          // Noticeable Difference.\n          // TODO: Is the JND optimization worth the added complexity? If this is\n          // the only reason we track the event time, then probably not.\n          // Consider removing.\n          var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n          var eventTimeMs = mostRecentEventTime;\n          var timeElapsedMs = now() - eventTimeMs;\n\n          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n\n          if (_msUntilTimeout > 10) {\n            // Instead of committing the fallback immediately, wait for more data\n            // to arrive.\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);\n            break;\n          }\n        } // Commit the placeholder.\n\n\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    case RootCompleted:\n      {\n        // The work completed. Ready to commit.\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unknown root exit status.');\n      }\n  }\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork) {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  var node = finishedWork;\n\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      var updateQueue = node.updateQueue;\n\n      if (updateQueue !== null) {\n        var checks = updateQueue.stores;\n\n        if (checks !== null) {\n          for (var i = 0; i < checks.length; i++) {\n            var check = checks[i];\n            var getSnapshot = check.getSnapshot;\n            var renderedValue = check.value;\n\n            try {\n              if (!objectIs(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    var child = node.child;\n\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n\n    if (node === finishedWork) {\n      return true;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  } // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n\n\n  return true;\n}\n\nfunction markRootSuspended$1(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n  markRootSuspended(root, suspendedLanes);\n} // This is the entry point for synchronous tasks that don't go\n// through Scheduler\n\n\nfunction performSyncWorkOnRoot(root) {\n  {\n    syncNestedUpdateFlag();\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  flushPassiveEffects();\n  var lanes = getNextLanes(root, NoLanes);\n\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  var exitStatus = renderRootSync(root, lanes);\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    var fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended$1(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    throw new Error('Root did not complete. This is a bug in React.');\n  } // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n\n\n  var finishedWork = root.current.alternate;\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n\n  ensureRootIsScheduled(root, now());\n  return null;\n}\n\nfunction flushRoot(root, lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction deferredUpdates(fn) {\n  var previousPriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n  }\n}\nfunction batchedUpdates(fn, a) {\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n\n    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\nfunction discreteUpdates(fn, a, b, c, d) {\n  var previousPriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n} // Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\n\n// eslint-disable-next-line no-redeclare\nfunction flushSync(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n    flushPassiveEffects();\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n  var previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction isAlreadyRendering() {\n  // Used by the renderer to print a warning if certain APIs are called from\n  // the wrong context.\n  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;\n}\nfunction flushControlled(fn) {\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n  var previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    executionContext = prevExecutionContext;\n\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction pushRenderLanes(fiber, lanes) {\n  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\n}\nfunction popRenderLanes(fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  pop(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root, lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n  var timeoutHandle = root.timeoutHandle;\n\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    var interruptedWork = workInProgress.return;\n\n    while (interruptedWork !== null) {\n      var current = interruptedWork.alternate;\n      unwindInterruptedWork(current, interruptedWork);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n\n  workInProgressRoot = root;\n  var rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n  finishQueueingConcurrentUpdates();\n\n  {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction handleError(root, thrownValue) {\n  do {\n    var erroredWork = workInProgress;\n\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n\n      ReactCurrentOwner$2.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      if (enableSchedulingProfiler) {\n        markComponentRenderStopped();\n\n        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n          var wakeable = thrownValue;\n          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n        } else {\n          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n        }\n      }\n\n      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n\n      continue;\n    } // Return to the normal work loop.\n\n\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  var prevDispatcher = ReactCurrentDispatcher$2.current;\n  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher$2.current = prevDispatcher;\n}\n\nfunction markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\nfunction markSkippedUpdateLanes(lane) {\n  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n}\nfunction renderDidSuspend() {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\nfunction renderDidSuspendDelayIfPossible() {\n  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  } // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n\n\n  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\nfunction renderDidError(error) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n} // Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\n\nfunction renderHasNotSuspendedYet() {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\nfunction renderRootSync(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    {\n      if (isDevToolsPresent) {\n        var memoizedUpdaters = root.memoizedUpdaters;\n\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n\n\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes();\n    prepareFreshStack(root, lanes);\n  }\n\n  {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n  }\n\n  {\n    markRenderStopped();\n  } // Set this to null to indicate there's no in-progress render.\n\n\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n  return workInProgressRootExitStatus;\n} // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n/** @noinline */\n\n\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    {\n      if (isDevToolsPresent) {\n        var memoizedUpdaters = root.memoizedUpdaters;\n\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n\n\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes();\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n\n  if (workInProgress !== null) {\n    // Still work remaining.\n    {\n      markRenderYielded();\n    }\n\n    return RootInProgress;\n  } else {\n    // Completed the tree.\n    {\n      markRenderStopped();\n    } // Set this to null to indicate there's no in-progress render.\n\n\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n    return workInProgressRootExitStatus;\n  }\n}\n/** @noinline */\n\n\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork) {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  var current = unitOfWork.alternate;\n  setCurrentFiber(unitOfWork);\n  var next;\n\n  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentFiber();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner$2.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork) {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  var completedWork = unitOfWork;\n\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    var current = completedWork.alternate;\n    var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentFiber(completedWork);\n      var next = void 0;\n\n      if ( (completedWork.mode & ProfileMode) === NoMode) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n\n      resetCurrentFiber();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n\n      if (_next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        _next.flags &= HostEffectMask;\n        workInProgress = _next;\n        return;\n      }\n\n      if ( (completedWork.mode & ProfileMode) !== NoMode) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n        var actualDuration = completedWork.actualDuration;\n        var child = completedWork.child;\n\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      } else {\n        // We've unwound all the way to the root.\n        workInProgressRootExitStatus = RootDidNotComplete;\n        workInProgress = null;\n        return;\n      }\n    }\n\n    var siblingFiber = completedWork.sibling;\n\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    } // Otherwise, return to the parent\n\n\n    completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n    workInProgress = completedWork;\n  } while (completedWork !== null); // We've reached the root.\n\n\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(root, recoverableErrors, transitions) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  var previousUpdateLanePriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);\n  } finally {\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  var finishedWork = root.finishedWork;\n  var lanes = root.finishedLanes;\n\n  {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n\n    {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    {\n      if (lanes === NoLanes) {\n        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n      }\n    }\n  }\n\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n  } // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n\n\n  root.callbackNode = null;\n  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n\n  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n\n\n  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      // to store it in pendingPassiveTransitions until they get processed\n      // We need to pass this through as an argument to commitRoot\n      // because workInProgressTransitions might have changed between\n      // the previous render and commit if we throttle the commit\n      // with setTimeout\n\n      pendingPassiveTransitions = transitions;\n      scheduleCallback$1(NormalPriority, function () {\n        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n        return null;\n      });\n    }\n  } // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n\n\n  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    var prevTransition = ReactCurrentBatchConfig$2.transition;\n    ReactCurrentBatchConfig$2.transition = null;\n    var previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    var prevExecutionContext = executionContext;\n    executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n\n    var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);\n\n    {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n\n    commitMutationEffects(root, finishedWork, lanes);\n\n    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n\n    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n    {\n      markLayoutEffectsStarted(lanes);\n    }\n\n    commitLayoutEffects(finishedWork, root, lanes);\n\n    {\n      markLayoutEffectsStopped();\n    }\n    // opportunity to paint.\n\n\n    requestPaint();\n    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n\n    {\n      recordCommitTime();\n    }\n  }\n\n  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } else {\n\n    {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n    }\n  } // Read this again, since an effect might have updated it\n\n\n  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n\n  {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  {\n    onCommitRoot$1();\n  } // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n\n\n  ensureRootIsScheduled(root, now());\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    var onRecoverableError = root.onRecoverableError;\n\n    for (var i = 0; i < recoverableErrors.length; i++) {\n      var recoverableError = recoverableErrors[i];\n      var componentStack = recoverableError.stack;\n      var digest = recoverableError.digest;\n      onRecoverableError(recoverableError.value, {\n        componentStack: componentStack,\n        digest: digest\n      });\n    }\n  }\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    var error$1 = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error$1;\n  } // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n\n\n  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n    flushPassiveEffects();\n  } // Read this again, since a passive effect might have updated it\n\n\n  remainingLanes = root.pendingLanes;\n\n  if (includesSomeLane(remainingLanes, SyncLane)) {\n    {\n      markNestedUpdateScheduled();\n    } // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n\n\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  } // If layout work was scheduled, flush it now.\n\n\n  flushSyncCallbacks();\n\n  {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction flushPassiveEffects() {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    var prevTransition = ReactCurrentBatchConfig$2.transition;\n    var previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig$2.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n    }\n  }\n\n  return false;\n}\nfunction enqueuePendingPassiveProfilerEffect(fiber) {\n  {\n    pendingPassiveProfilerEffects.push(fiber);\n\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback$1(NormalPriority, function () {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  } // Cache and clear the transitions flag\n\n\n  var transitions = pendingPassiveTransitions;\n  pendingPassiveTransitions = null;\n  var root = rootWithPendingPassiveEffects;\n  var lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  {\n    isFlushingPassiveEffects = true;\n    didScheduleUpdateDuringPassiveEffects = false;\n  }\n\n  {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects\n\n  {\n    var profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n\n    for (var i = 0; i < profilerEffects.length; i++) {\n      var _fiber = profilerEffects[i];\n      commitPassiveEffectDurations(root, _fiber);\n    }\n  }\n\n  {\n    markPassiveEffectsStopped();\n  }\n\n  {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n  flushSyncCallbacks();\n\n  {\n    // If additional passive effects were scheduled, increment a counter. If this\n    // exceeds the limit, we'll fire a warning.\n    if (didScheduleUpdateDuringPassiveEffects) {\n      if (root === rootWithPassiveNestedUpdates) {\n        nestedPassiveUpdateCount++;\n      } else {\n        nestedPassiveUpdateCount = 0;\n        rootWithPassiveNestedUpdates = root;\n      }\n    } else {\n      nestedPassiveUpdateCount = 0;\n    }\n\n    isFlushingPassiveEffects = false;\n    didScheduleUpdateDuringPassiveEffects = false;\n  } // TODO: Move to commitPassiveMountEffects\n\n\n  onPostCommitRoot(root);\n\n  {\n    var stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nfunction isAlreadyFailedLegacyErrorBoundary(instance) {\n  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n}\nfunction markLegacyErrorBoundaryAsFailed(instance) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\n\nvar onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n  var root = enqueueUpdate(rootFiber, update, SyncLane);\n  var eventTime = requestEventTime();\n\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nfunction captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n  {\n    reportUncaughtErrorInDEV(error$1);\n    setIsRunningInsertionEffect(false);\n  }\n\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n    return;\n  }\n\n  var fiber = null;\n\n  {\n    fiber = nearestMountedAncestor;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      var ctor = fiber.type;\n      var instance = fiber.stateNode;\n\n      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n        var root = enqueueUpdate(fiber, update, SyncLane);\n        var eventTime = requestEventTime();\n\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n\n        return;\n      }\n    }\n\n    fiber = fiber.return;\n  }\n\n  {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n  }\n}\nfunction pingSuspendedRoot(root, wakeable, pingedLanes) {\n  var pingCache = root.pingCache;\n\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  var eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes);\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber, retryLane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  } // TODO: Special case idle priority?\n\n\n  var eventTime = requestEventTime();\n  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nfunction retryDehydratedSuspenseBoundary(boundaryFiber) {\n  var suspenseState = boundaryFiber.memoizedState;\n  var retryLane = NoLane;\n\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\nfunction resolveRetryWakeable(boundaryFiber, wakeable) {\n  var retryLane = NoLane; // Default\n\n  var retryCache;\n\n  switch (boundaryFiber.tag) {\n    case SuspenseComponent:\n      retryCache = boundaryFiber.stateNode;\n      var suspenseState = boundaryFiber.memoizedState;\n\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n\n      break;\n\n    case SuspenseListComponent:\n      retryCache = boundaryFiber.stateNode;\n      break;\n\n    default:\n      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n} // Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\n\nfunction jnd(timeElapsed) {\n  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n  }\n\n  {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n\n      error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n  {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n    setCurrentFiber(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n\n    resetCurrentFiber();\n  }\n}\n\nfunction invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    var current = firstChild;\n    var subtreeRoot = null;\n\n    while (current !== null) {\n      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n\n      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nvar didWarnStateUpdateForNotYetMountedComponent = null;\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    var tag = fiber.tag;\n\n    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    } // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n\n\n    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    var previousFiber = current;\n\n    try {\n      setCurrentFiber(fiber);\n\n      error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n    } finally {\n      if (previousFiber) {\n        setCurrentFiber(fiber);\n      } else {\n        resetCurrentFiber();\n      }\n    }\n  }\n}\nvar beginWork$1;\n\n{\n  var dummyFiber = null;\n\n  beginWork$1 = function (current, unitOfWork, lanes) {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n\n    try {\n      return beginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\n        // Don't replay promises.\n        // Don't replay errors if we are hydrating and have already suspended or handled an error\n        throw originalError;\n      } // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n\n\n      resetContextDependencies();\n      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n      // Unwind the failed stack frame\n\n      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if ( unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      } // Run beginWork again.\n\n\n      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n\n      if (hasCaughtError()) {\n        var replayError = clearCaughtError();\n\n        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      } // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n\n\n      throw originalError;\n    }\n  };\n}\n\nvar didWarnAboutUpdateInRender = false;\nvar didWarnAboutUpdateInRenderForAnotherComponent;\n\n{\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  {\n    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n            var dedupeKey = renderingComponentName;\n\n            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n            }\n\n            break;\n          }\n\n        case ClassComponent:\n          {\n            if (!didWarnAboutUpdateInRender) {\n              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n\n              didWarnAboutUpdateInRender = true;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n}\n\nfunction restorePendingUpdaters(root, lanes) {\n  {\n    if (isDevToolsPresent) {\n      var memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(function (schedulingFiber) {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      }); // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\nvar fakeActCallbackNode = {};\n\nfunction scheduleCallback$1(priorityLevel, callback) {\n  {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    var actQueue = ReactCurrentActQueue$1.current;\n\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return scheduleCallback(priorityLevel, callback);\n    }\n  }\n}\n\nfunction cancelCallback$1(callbackNode) {\n  if ( callbackNode === fakeActCallbackNode) {\n    return;\n  } // In production, always call Scheduler. This function will be stripped out.\n\n\n  return cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return  ReactCurrentActQueue$1.current !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber) {\n  {\n    if (fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n\n      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactCurrentActQueue$1.current === null) {\n      var previousFiber = current;\n\n      try {\n        setCurrentFiber(fiber);\n\n        error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n      } finally {\n        if (previousFiber) {\n          setCurrentFiber(fiber);\n        } else {\n          resetCurrentFiber();\n        }\n      }\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n  {\n    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n    }\n  }\n}\n\nfunction setIsRunningInsertionEffect(isRunning) {\n  {\n    isRunningInsertionEffect = isRunning;\n  }\n}\n\n/* eslint-disable react-internal/prod-error-codes */\nvar resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\nvar failedBoundaries = null;\nvar setRefreshHandler = function (handler) {\n  {\n    resolveFamily = handler;\n  }\n};\nfunction resolveFunctionForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction resolveClassForHotReloading(type) {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\nfunction resolveForwardRefForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (type !== null && type !== undefined && typeof type.render === 'function') {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        var currentRender = resolveFunctionForHotReloading(type.render);\n\n        if (type.render !== currentRender) {\n          var syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender\n          };\n\n          if (type.displayName !== undefined) {\n            syntheticType.displayName = type.displayName;\n          }\n\n          return syntheticType;\n        }\n      }\n\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction isCompatibleFamilyForHotReloading(fiber, element) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    var prevType = fiber.elementType;\n    var nextType = element.type; // If we got here, we know types aren't === equal.\n\n    var needsCompareFamilies = false;\n    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n\n    switch (fiber.tag) {\n      case ClassComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case FunctionComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            // We don't know the inner type yet.\n            // We're going to assume that the lazy inner type is stable,\n            // and so it is sufficient to avoid reconciling it away.\n            // We're not going to unwrap or actually use the new lazy type.\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case ForwardRef:\n        {\n          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          if ($$typeofNextType === REACT_MEMO_TYPE) {\n            // TODO: if it was but can no longer be simple,\n            // we shouldn't set this.\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      default:\n        return false;\n    } // Check if both types have a family and it's the same one.\n\n\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      var prevFamily = resolveFamily(prevType);\n\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\nfunction markFailedErrorBoundaryForHotReloading(fiber) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n\n    failedBoundaries.add(fiber);\n  }\n}\nvar scheduleRefresh = function (root, update) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    var staleFamilies = update.staleFamilies,\n        updatedFamilies = update.updatedFamilies;\n    flushPassiveEffects();\n    flushSync(function () {\n      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n    });\n  }\n};\nvar scheduleRoot = function (root, element) {\n  {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n\n    flushPassiveEffects();\n    flushSync(function () {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n  {\n    var alternate = fiber.alternate,\n        child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    var needsRender = false;\n    var needsRemount = false;\n\n    if (candidateType !== null) {\n      var family = resolveFamily(candidateType);\n\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n\n    if (failedBoundaries !== null) {\n      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n\n    if (needsRemount || needsRender) {\n      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (_root !== null) {\n        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n    }\n\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n    }\n  }\n}\n\nvar findHostInstancesForRefresh = function (root, families) {\n  {\n    var hostInstances = new Set();\n    var types = new Set(families.map(function (family) {\n      return family.current;\n    }));\n    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n    return hostInstances;\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n  {\n    var child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    var didMatch = false;\n\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n\n    if (foundHostInstances) {\n      return;\n    } // If we didn't find any host children, fallback to closest host parent.\n\n\n    var node = fiber;\n\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var node = fiber;\n    var foundHostInstances = false;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  return false;\n}\n\nvar hasBadMapPolyfill;\n\n{\n  hasBadMapPolyfill = false;\n\n  try {\n    var nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\nvar createFiber = function (tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct$1(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n}\nfunction resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    var $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n\n  return IndeterminateComponent;\n} // This is used to create an alternate fiber to do work on.\n\nfunction createWorkInProgress(current, pendingProps) {\n  var workInProgress = current.alternate;\n\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    {\n      // DEV-only fields\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  } // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n\n\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  var currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    lanes: currentDependencies.lanes,\n    firstContext: currentDependencies.firstContext\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n    }\n  }\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nfunction resetWorkInProgress(workInProgress, renderLanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n  var current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n    workInProgress.stateNode = null;\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    var currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    };\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\nfunction createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n  var mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      {\n        mode |= StrictEffectsMode;\n      }\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if ( isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nfunction createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, lanes) {\n  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  var resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct$1(type)) {\n      fiberTag = ClassComponent;\n\n      {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n\n        if ( (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n      case REACT_LEGACY_HIDDEN_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_SCOPE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_CACHE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_TRACING_MARKER_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                fiberTag = ContextProvider;\n                break getTag;\n\n              case REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = ContextConsumer;\n                break getTag;\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                {\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                }\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n            }\n          }\n\n          var info = '';\n\n          {\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n            }\n\n            var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n          }\n\n          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n        }\n    }\n  }\n\n  var fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromElement(element, mode, lanes) {\n  var owner = null;\n\n  {\n    owner = element._owner;\n  }\n\n  var type = element.type;\n  var key = element.key;\n  var pendingProps = element.props;\n  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n  {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromFragment(elements, mode, lanes, key) {\n  var fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n  {\n    if (typeof pendingProps.id !== 'string') {\n      error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n    }\n  }\n\n  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0\n    };\n  }\n\n  return fiber;\n}\n\nfunction createFiberFromSuspense(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  var primaryChildInstance = {\n    isHidden: false\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\nfunction createFiberFromText(content, mode, lanes) {\n  var fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromHostInstanceForDeletion() {\n  var fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\nfunction createFiberFromDehydratedFragment(dehydratedNode) {\n  var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\nfunction createFiberFromPortal(portal, mode, lanes) {\n  var pendingProps = portal.children !== null ? portal.children : [];\n  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n} // Used for stashing WIP properties to replay failed work in DEV.\n\nfunction assignFiberPropertiesInDEV(target, source) {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  } // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n\n  {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n\nfunction FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n  this.identifierPrefix = identifierPrefix;\n  this.onRecoverableError = onRecoverableError;\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  {\n    this.memoizedUpdaters = new Set();\n    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n\n    for (var _i = 0; _i < TotalLanes; _i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nfunction createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n// host config, but because they are passed in at runtime, we have to thread\n// them through the root constructor. Perhaps we should put them all into a\n// single type, like a DynamicHostConfig that is defined by the renderer.\nidentifierPrefix, onRecoverableError, transitionCallbacks) {\n  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\n  // stateNode is any.\n\n\n  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  {\n    var _initialState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: null,\n      // not enabled yet\n      transitions: null,\n      pendingSuspenseBoundaries: null\n    };\n    uninitializedFiber.memoizedState = _initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n  return root;\n}\n\nvar ReactVersion = '18.2.0';\n\nfunction createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.\nimplementation) {\n  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  {\n    checkKeyStringCoercion(key);\n  }\n\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children: children,\n    containerInfo: containerInfo,\n    implementation: implementation\n  };\n}\n\nvar didWarnAboutNestedUpdates;\nvar didWarnAboutFindNodeInStrictMode;\n\n{\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(parentComponent) {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  var fiber = get(parentComponent);\n  var parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    var Component = fiber.type;\n\n    if (isContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component) {\n  var fiber = get(component);\n\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      throw new Error('Unable to find node on an unmounted component.');\n    } else {\n      var keys = Object.keys(component).join(',');\n      throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n    }\n  }\n\n  var hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(component, methodName) {\n  {\n    var fiber = get(component);\n\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        throw new Error('Unable to find node on an unmounted component.');\n      } else {\n        var keys = Object.keys(component).join(',');\n        throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n      }\n    }\n\n    var hostFiber = findCurrentHostFiber(fiber);\n\n    if (hostFiber === null) {\n      return null;\n    }\n\n    if (hostFiber.mode & StrictLegacyMode) {\n      var componentName = getComponentNameFromFiber(fiber) || 'Component';\n\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n        var previousFiber = current;\n\n        try {\n          setCurrentFiber(hostFiber);\n\n          if (fiber.mode & StrictLegacyMode) {\n            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n          } else {\n            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentFiber(previousFiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n\n    return hostFiber.stateNode;\n  }\n}\n\nfunction createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n  var hydrate = false;\n  var initialChildren = null;\n  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n}\nfunction createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.\ncallback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n  var hydrate = true;\n  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\n\n  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n\n  var current = root.current;\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(current);\n  var update = createUpdate(eventTime, lane);\n  update.callback = callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update, lane);\n  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n  return root;\n}\nfunction updateContainer(element, container, parentComponent, callback) {\n  {\n    onScheduleRoot(container, element);\n  }\n\n  var current$1 = container.current;\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(current$1);\n\n  {\n    markRenderScheduled(lane);\n  }\n\n  var context = getContextForSubtree(parentComponent);\n\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  {\n    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n      didWarnAboutNestedUpdates = true;\n\n      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n    }\n  }\n\n  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: element\n  };\n  callback = callback === undefined ? null : callback;\n\n  if (callback !== null) {\n    {\n      if (typeof callback !== 'function') {\n        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n      }\n    }\n\n    update.callback = callback;\n  }\n\n  var root = enqueueUpdate(current$1, update, lane);\n\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, current$1, lane, eventTime);\n    entangleTransitions(root, current$1, lane);\n  }\n\n  return lane;\n}\nfunction getPublicRootInstance(container) {\n  var containerFiber = container.current;\n\n  if (!containerFiber.child) {\n    return null;\n  }\n\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\nfunction attemptSynchronousHydration(fiber) {\n  switch (fiber.tag) {\n    case HostRoot:\n      {\n        var root = fiber.stateNode;\n\n        if (isRootDehydrated(root)) {\n          // Flush the first scheduled \"update\".\n          var lanes = getHighestPriorityPendingLanes(root);\n          flushRoot(root, lanes);\n        }\n\n        break;\n      }\n\n    case SuspenseComponent:\n      {\n        flushSync(function () {\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            var eventTime = requestEventTime();\n            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n          }\n        }); // If we're still blocked after this, we need to increase\n        // the priority of any promises resolving within this\n        // boundary so that they next attempt also has higher pri.\n\n        var retryLane = SyncLane;\n        markRetryLaneIfNotHydrated(fiber, retryLane);\n        break;\n      }\n  }\n}\n\nfunction markRetryLaneImpl(fiber, retryLane) {\n  var suspenseState = fiber.memoizedState;\n\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n  }\n} // Increases the priority of thenables when they resolve within this boundary.\n\n\nfunction markRetryLaneIfNotHydrated(fiber, retryLane) {\n  markRetryLaneImpl(fiber, retryLane);\n  var alternate = fiber.alternate;\n\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nfunction attemptDiscreteHydration(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n\n  var lane = SyncLane;\n  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n  if (root !== null) {\n    var eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction attemptContinuousHydration(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n\n  var lane = SelectiveHydrationLane;\n  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n  if (root !== null) {\n    var eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction attemptHydrationAtCurrentPriority(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n  if (root !== null) {\n    var eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction findHostInstanceWithNoPortals(fiber) {\n  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nvar shouldErrorImpl = function (fiber) {\n  return null;\n};\n\nfunction shouldError(fiber) {\n  return shouldErrorImpl(fiber);\n}\n\nvar shouldSuspendImpl = function (fiber) {\n  return false;\n};\n\nfunction shouldSuspend(fiber) {\n  return shouldSuspendImpl(fiber);\n}\nvar overrideHookState = null;\nvar overrideHookStateDeletePath = null;\nvar overrideHookStateRenamePath = null;\nvar overrideProps = null;\nvar overridePropsDeletePath = null;\nvar overridePropsRenamePath = null;\nvar scheduleUpdate = null;\nvar setErrorHandler = null;\nvar setSuspenseHandler = null;\n\n{\n  var copyWithDeleteImpl = function (obj, path, index) {\n    var key = path[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(key, 1);\n      } else {\n        delete updated[key];\n      }\n\n      return updated;\n    } // $FlowFixMe number or string is fine here\n\n\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  var copyWithDelete = function (obj, path) {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n    var oldKey = oldPath[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n    if (index + 1 === oldPath.length) {\n      var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n      updated[newKey] = updated[oldKey];\n\n      if (isArray(updated)) {\n        updated.splice(oldKey, 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\n      obj[oldKey], oldPath, newPath, index + 1);\n    }\n\n    return updated;\n  };\n\n  var copyWithRename = function (obj, oldPath, newPath) {\n    if (oldPath.length !== newPath.length) {\n      warn('copyWithRename() expects paths of the same length');\n\n      return;\n    } else {\n      for (var i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          warn('copyWithRename() expects paths to be the same except for the deepest key');\n\n          return;\n        }\n      }\n    }\n\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  var copyWithSetImpl = function (obj, path, index, value) {\n    if (index >= path.length) {\n      return value;\n    }\n\n    var key = path[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  var copyWithSet = function (obj, path, value) {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  var findHook = function (fiber, id) {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    var currentHook = fiber.memoizedState;\n\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n\n    return currentHook;\n  }; // Support DevTools editable values for useState and useReducer.\n\n\n  overrideHookState = function (fiber, id, path, value) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  overrideHookStateDeletePath = function (fiber, id, path) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n  overrideProps = function (fiber, path, value) {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overridePropsDeletePath = function (fiber, path) {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overridePropsRenamePath = function (fiber, oldPath, newPath) {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  scheduleUpdate = function (fiber) {\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  setErrorHandler = function (newShouldErrorImpl) {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = function (newShouldSuspendImpl) {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber) {\n  var hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(instance) {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return current;\n}\n\nfunction injectIntoDevTools(devToolsConfig) {\n  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState: overrideHookState,\n    overrideHookStateDeletePath: overrideHookStateDeletePath,\n    overrideHookStateRenamePath: overrideHookStateRenamePath,\n    overrideProps: overrideProps,\n    overridePropsDeletePath: overridePropsDeletePath,\n    overridePropsRenamePath: overridePropsRenamePath,\n    setErrorHandler: setErrorHandler,\n    setSuspenseHandler: setSuspenseHandler,\n    scheduleUpdate: scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber: findHostInstanceByFiber,\n    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh:  findHostInstancesForRefresh ,\n    scheduleRefresh:  scheduleRefresh ,\n    scheduleRoot:  scheduleRoot ,\n    setRefreshHandler:  setRefreshHandler ,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber:  getCurrentFiberForDevTools ,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion\n  });\n}\n\nexports.attemptContinuousHydration = attemptContinuousHydration;\nexports.attemptDiscreteHydration = attemptDiscreteHydration;\nexports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\nexports.attemptSynchronousHydration = attemptSynchronousHydration;\nexports.batchedUpdates = batchedUpdates;\nexports.createComponentSelector = createComponentSelector;\nexports.createContainer = createContainer;\nexports.createHasPseudoClassSelector = createHasPseudoClassSelector;\nexports.createHydrationContainer = createHydrationContainer;\nexports.createPortal = createPortal;\nexports.createRoleSelector = createRoleSelector;\nexports.createTestNameSelector = createTestNameSelector;\nexports.createTextSelector = createTextSelector;\nexports.deferredUpdates = deferredUpdates;\nexports.discreteUpdates = discreteUpdates;\nexports.findAllNodes = findAllNodes;\nexports.findBoundingRects = findBoundingRects;\nexports.findHostInstance = findHostInstance;\nexports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\nexports.findHostInstanceWithWarning = findHostInstanceWithWarning;\nexports.flushControlled = flushControlled;\nexports.flushPassiveEffects = flushPassiveEffects;\nexports.flushSync = flushSync;\nexports.focusWithin = focusWithin;\nexports.getCurrentUpdatePriority = getCurrentUpdatePriority;\nexports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\nexports.getPublicRootInstance = getPublicRootInstance;\nexports.injectIntoDevTools = injectIntoDevTools;\nexports.isAlreadyRendering = isAlreadyRendering;\nexports.observeVisibleRects = observeVisibleRects;\nexports.registerMutableSourceForHydration = registerMutableSourceForHydration;\nexports.runWithPriority = runWithPriority;\nexports.shouldError = shouldError;\nexports.shouldSuspend = shouldSuspend;\nexports.updateContainer = updateContainer;\n    return exports;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}